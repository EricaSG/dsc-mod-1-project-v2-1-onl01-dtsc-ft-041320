 1/1:
import sys
print(sys.version)
 5/1: This is a python cell without valid Python code so you will see an error
 5/2: name = 'bob'
 5/3: name
 5/4:
age = 14
age
 5/5: hometown = 'NYC'
 5/6: hometown
 6/1:
number = 42
number
 6/2:
flatiron_mantra = "Learn. Love. Code."
flatiron_mantra
 8/1: print('This is code being run.')
 8/2:
import pandas as pd
import matplotlib.pyplot as plt
%matplotlib inline
 8/3: pwd
 8/4: ls
 8/5:
df = pd.read_csv('lego_sets.csv') #Loads the dataframe in
print(len(df)) #Prints the length of the dataframe
df.head() #Uses a built in method common to all Pandas Dataframes
 8/6: pd.read_csv?
 8/7: pd.read_csv() #Move your cursor inside the parentheses and press shift+tab
 8/8: type(df)
 8/9: df.tail(10)#Practice using some of these methods
8/10:
df.abs? #Use tab completion to investigate at least 3 other methods of the df object. 
#Pull up their docstrings and investigate what they do.
8/11:
df.abs #Use tab completion to investigate at least 3 other methods of the df object. 
df.abs?#Pull up their docstrings and investigate what they do.
8/12:
df.abs #Use tab completion to investigate at least 3 other methods of the df object. 
df.abs()?#Pull up their docstrings and investigate what they do.
8/13: #Previewing Data
8/14: df.head(2) #preview your spreadsheet again; 2 keeps it a nice small preview
8/15: df.ages.head()
8/16: df.ages[:5] #Here we introduce another new syntax the list slice [:5] this limits us to the first 5 items
8/17: df.piece_count.
8/18: df.piece_count. ?
8/19: df.piece_count.?
8/20: df.piece_count?
8/21:
df.abs #Use tab completion to investigate at least 3 other methods of the df object. 
df.abs?#Pull up their docstrings and investigate what they do.
8/22:
df.abs #Use tab completion to investigate at least 3 other methods of the df object. 
df.abs ?#Pull up their docstrings and investigate what they do.
8/23: df.play_star_rating.value_counts? #Read the docstring and tinker! See how it works.
8/24: df.play_star_rating.value_counts ? #Read the docstring and tinker! See how it works.
8/25: series.mean #Keep tinkering!
8/26:
#import a subset of the matplotlib package under the alias 'plt'
import matplotlib.pyplot as plt

#ipython magic command for displaying graphs within the notebook
%matplotlib inline
8/27:
to_graph = df.theme_name.value_counts()[:5]
to_graph.plot(kind='barh')
8/28:
to_graph = df.theme_name.value_counts()[:5]
to_graph.plot(kind='barh') #lots of other optional parameters can be passed such as color
plt.title('Top 5 Lego Themes', fontsize=16) #add a title and adjust font size (optional)
plt.xlabel('Number of Lego Sets') #you could also pass in fontsize if you wanted here
plt.ylabel('Theme')
8/29: plt.scatter(df.play_star_rating, df.star_rating)
8/30: df.play_star_rating.hist()
10/1:
sentence = "woW WE LOVE cOdInG and strINGS!"
sentence.capitalize()
10/2:
flatiron_mantra = "learn. love. code."
flatiron_mantra.title()
10/3:
num_to_string = 1234
num_to_string = str(1234)
10/4:
full_address = num_to_string + " Abc street, Hometown USA"
full_address
10/5: num_to_string = str(1234)
10/6:
num_to_string = str(1234)
num_to_string
10/7:
full_address = num_to_string + " Abc street, Hometown USA"
full_address
10/8: help(str)
10/9:
name = "Bart Simpson"
name.replace('Simpson','Flanders'[,1])#Your code here; update the variable name
10/10:
name = "Bart Simpson"
name.replace('Simpson','Flanders')#Your code here; update the variable name
11/1: "art vandelay" # "ART VANDELAY"
11/2: "art vandelay".upper() # 'ART VANDELAY'
11/3:
art_vandelay = "art vandelay" # 'Art Vandelay'
art_vandelay.title()
11/4:
ceo = "Ceo" # 'CEO'
ceo.upper()
11/5:
ends_with_com = "art.vandelay@vandelay.co" # False
ends_with_com.endswith('com')
11/6:
web_address = 'vandelay.com' # 'www.vandelay.com'
'www.'+web_address
11/7:
phone_num_one = "7285553334" # 7285553335
int(phone_num_one) + 1
11/8:
phone_num_two = "7285553334" # 7285553336
int(phone_num_two) + 2
13/1: travel_month = 'January'
13/2:
travel_month = None 
travel_month = 'January'
13/3: travel_month # "January"
13/4:
number_of_weeks = None
number_of_weeks = 3
13/5: number_of_weeks # 3
13/6: number_of_weeks = 5 # 5
14/1:
traveling_schedule = None
traveling_schedule = 'I will be traveling'+ number_of_weeks + 'weeks starting in the month of' + travel_month
14/2: number_of_weeks = 5 # 5
14/3:
traveling_schedule = None
traveling_schedule = 'I will be traveling'+ number_of_weeks + 'weeks starting in the month of' + travel_month
14/4:
traveling_schedule = None
traveling_schedule = 'I will be traveling'+ str(number_of_weeks) + 'weeks starting in the month of' + travel_month
14/5:
travel_month = None 
travel_month = 'January'
14/6: travel_month # "January"
14/7:
number_of_weeks = None
number_of_weeks = 3
14/8: number_of_weeks # 3
14/9: number_of_weeks = 5 # 5
14/10:
traveling_schedule = None
traveling_schedule = 'I will be traveling'+ str(number_of_weeks) + 'weeks starting in the month of' + travel_month
14/11:
traveling_schedule = None
traveling_schedule = 'I will be traveling'+ str(number_of_weeks) + 'weeks starting in the month of' + travel_month
traveling_schedule
14/12:
traveling_schedule = None
traveling_schedule = 'I will be traveling'+ ' '+ number_of_weeks + ' ' + 'weeks starting in the month of'+ ' ' + travel_month
traveling_schedule
14/13:
traveling_schedule = None
traveling_schedule = 'I will be traveling'+ ' '+ str(number_of_weeks) + ' ' + 'weeks starting in the month of'+ ' ' + travel_month
traveling_schedule
16/1:
number_50 = 50
my_number = None
if number_50 > 100:
    my_number = 100 # if number_50 is greater than 100, assign the `my_number` variable to the number 100
elif number_50 > 50:
    my_number = 50  # if number_50 is greater than 50, assign the `my_number` variable to the number 50
else:
    my_number = 0 # else assign the `my_number` variable to 0
16/2:
number_50 = 50
my_number = None
if number_50 > 100:
    my_number = 100
    print(my_number)# if number_50 is greater than 100, assign the `my_number` variable to the number 100
elif number_50 > 50:
    my_number = 50
    print(my_number)# if number_50 is greater than 50, assign the `my_number` variable to the number 50
else:
    my_number = 0
    print(my_number)# else assign the `my_number` variable to 0
16/3:
temperature = 85
is_it_hot = None
if temperature > 80
    is_it_hot = 'It is so hot out!'
    print(is_it_hot)
else
    is_it_hot = 'This is nothing! Bring on the heat.'
    print(is_it_hot)

# conditionals go here
16/4:
temperature = 85
is_it_hot = None
if temperature > 80:
    is_it_hot = 'It is so hot out!'
    print(is_it_hot)
else
    is_it_hot = 'This is nothing! Bring on the heat.'
    print(is_it_hot)

# conditionals go here
16/5:
temperature = 85
is_it_hot = None
if temperature > 80:
    is_it_hot = 'It is so hot out!'
    print(is_it_hot)
else:
    is_it_hot = 'This is nothing! Bring on the heat.'
    print(is_it_hot)

# conditionals go here
16/6:
today_is = 4
day_of_the_week = None
if today_is = 4:
    day_of_the_week = 'Wednesday'
    print(day_of_the_week)
    
# conditionals go here
16/7:
today_is = 4
day_of_the_week = None
if today_is = 4
    day_of_the_week = 'Wednesday'
    print(day_of_the_week)
    
# conditionals go here
16/8:
today_is = 4
day_of_the_week = None
if today_is:
    day_of_the_week = 'Wednesday'
    print(day_of_the_week)
    
# conditionals go here
16/9:
string = "Python"
sub_string = "on"
ends_with = None
if string.endswith('on')
    ends_width = True
    print('True')
else
    ends_with = False
    print('False')
# conditionals go here
16/10:
string = "Python"
sub_string = "on"
ends_with = None
if string.endswith("on")
    ends_width = True
    print('True')
else
    ends_with = False
    print('False')
# conditionals go here
16/11:
string = "Python"
sub_string = "on"
ends_with = None
if string.endswith("on"):
    ends_width = True
    print('True')
else:
    ends_with = False
    print('False')
# conditionals go here
18/1: top_travel_cities = ['Solta', 'Greenville', 'Buenos Aires', 'Los Cabos', 'Walla Walla Valley', 'Marakesh', 'Albuquerque', 'Archipelago Sea', 'Iguazu Falls', 'Salina Island', 'Toronto', 'Pyeongchang']
18/2:
countries = ['Croatia',
 'USA',
 'Argentina',
 'Mexico',
 'USA',
 'Morocco',
 'New Mexico',
 'Finland',
 'Argentina',
 'Italy',
 'Canada',
 'South Korea']
18/3:
italy = None # 'Italy'
italy = countries[-3]
18/4: italy = countries[-3] # 'Italy'
18/5:
italy = countries[-3] # 'Italy'
italy
18/6: italy # 'Italy'
18/7:
mexico = countries[4]
mexico
18/8:
kindof_neighbors = countries[1:5]
kindof_neighbors
18/9:
countries.append('Malta')
countries # add code here
18/10:
countries.append('Thailand')
countries # add code here
18/11:
countries 
# ['Croatia', 'USA', 'Argentina', 'Mexico', 'USA', 'Morocco', 'New Mexico', 'Finland', 
# 'Argentina', 'Italy',  'Canada', 'South Korea',  'Malta',  'Thailand']
18/12: countries[6] = 'USA' # add code here
18/13:
countries 
# ['Croatia', 'USA', 'Argentina', 'Mexico', 'USA', 'Morocco', 'USA', 'Finland', 
# 'Argentina', 'Italy',  'Canada', 'South Korea',  'Malta',  'Thailand']
18/14: countries.pop() # 'Thailand'
18/15: print(countries)
18/16: unique_countries = set(countries)
18/17:
unique_countries # ['Canada', 'Italy', 'USA', 'Mexico', 'Finland', 
#'Malta', 'Morocco', 'Croatia', 'Argentina', 'South Korea']
18/18:
unique_set = set(countries)
unique_countries = list(unique_set)
18/19:
unique_countries # ['Canada', 'Italy', 'USA', 'Mexico', 'Finland', 
#'Malta', 'Morocco', 'Croatia', 'Argentina', 'South Korea']
18/20:
num_of_repeats = countries - unique_countries
num_of_repeats # 3
18/21:
num_of_repeats = len(countries) - len(unique_countries)
num_of_repeats # 3
19/1: greenville = {'Area': 68, 'City': 'Greenville', 'Country': 'USA', 'Population': 84554}
19/2:
greenville_population['Population'] None # change None
greenville_population # 84554
19/3:
greenville_population['Population'] # change None
greenville_population # 84554
19/4:
greenville_population = greenville['Population'] # change None
greenville_population # 84554
19/5:
greenville_area = greenville['Area']
greenville_area # 68
19/6:
city_keys = ['Area','City','Country', 'Population']
city_keys # ['Area', 'City', 'Country', 'Population']
19/7:
city_values = [68, 'Greenville', 'USA', 84554]
city_values # [68, 'Greenville', 'USA', 84554]
21/1: import random
21/2:
list_of_numbers = [] 
for i is range[10]:
    random_number = random.randint(0,20)
    print(random_number)
21/3:
list_of_numbers = [] 
for i in range[10]:
    random_number = random.randint(0,20)
    print(random_number)
21/4:
list_of_numbers = [] 
for i in range(10):
    random_number = random.randint(0,20)
    print(random_number)
21/5:
list_of_numbers = [] #make a list of 10 numbers
for i in range(10):
    random_number = random.randint(0,20)
    print(random_number)
    #how do we add this number to our list?
    list_of_numbers.append(random_number)
21/6:
list_of_numbers = [] #make a list of 10 numbers
for i in range(10):
    random_number = random.randint(0,20)
    print(random_number)
    #how do we add this number to our list?
    list_of_numbers.append(random_number)
    
print(list_of_numbers)
21/7:
import random
random.seed(42)
21/8:
list_of_numbers = [] #make a list of 10 numbers
for i in range(10):
    random_number = random.randint(0,20)
    print(random_number)
    #how do we add this number to our list?
    list_of_numbers.append(random_number)

    #print list of numbers outside of loop
print(list_of_numbers)
21/9:
#how do I know its making a list? Cause of the brakets
list_of_numbers = random.randit(0,20)[for i in range(10)]
list_of_numbers
21/10:
#how do I know its making a list? Cause of the brakets
list_of_numbers = [random.randit(0,20)for i in range(10)]
list_of_numbers
21/11: from string import ascii_letters
21/12: random.choice(ascii_letters)
21/13:
#how do I know its making a list? Cause of the brakets
list_of_numbers = [random.randit(0,20) for i in range(10)]
list_of_numbers
21/14:
#how do I know its making a list? Cause of the brakets
list_of_numbers = [random.randit(0,20) for i in range(10)]
list_of_numbers
21/15:
#we're going to make a dictionary containing 10 key value pairs?
#What is a dictionary?
#collection of key/value pairs (hashable faster in memory)

d = {'key1': 0}
d
21/16: d['key1']
21/17: d.get('key1')
21/18: d['key2']
21/19:
letter_dict = {} #letter: counts
for i in range(20):
    letter_key = random.choice(ascii_letters)
    print(letter_key)
21/20:
letter_dict = {} #letter: counts
for i in range(20):
    letter_key = random.choice(ascii_letters)
    print(letter_key)
    if letter_key not in letter_dict.keys():
        letter_dict[letter_key] = 1
21/21:
letter_dict = {} #letter: counts
for i in range(20):
    letter_key = random.choice(ascii_letters)
    print(letter_key)
    if letter_key not in letter_dict.keys():
        letter_dict[letter_key] = 1 #if I havent seen it, create the key/value strating with 1
    else:
        letter_dict[letter_key] += 1 #otherwise add 1 to the value
21/22:
letter_dict = {} #letter: counts
for i in range(20):
    letter_key = random.choice(ascii_letters)
    if letter_key not in letter_dict.keys():
        letter_dict[letter_key] = 1 #if I havent seen it, create the key/value strating with 1
    else:
        letter_dict[letter_key] += 1 #otherwise add 1 to the value
        
letter_dict
21/23:
#or use get method
#letter_dict = {}
#for i in range(40):
    #letter_key = random.choice(ascii_letters)
    #letter_dict()
21/24:
#making a dictionary
d = {}
d['name'] = 'Erica'
d['age'] = 28
d
21/25:
d['careers'] = [{'job_title': 'project manager', 'year': 2016},
                {'job_title': 'intern', 'year': 2013},
                {'job_title': 'data manager', 'year': 2019}]
21/26:
d['careers'] = [{'job_title': 'project manager', 'year': 2016},
                {'job_title': 'intern', 'year': 2013},
                {'job_title': 'data manager', 'year': 2019}]
d
21/27: from pprint import pprint
21/28: pprint(d)
21/29: d['job title'][1]
21/30: d['careers']
21/31: d['careers'][1]
21/32: d['careers'][1][0]
21/33: d['careers'][1]
21/34: d['careers'][1](0)
21/35: d['careers'][1]['job title']
21/36: d['careers'][1]['job title']
21/37: d['careers'][1]['job title']
21/38: d['careers'][1]['job_title']
21/39:
for career in d['careers']:
    print(career)
    job_title = career['job_title']
    year = career['year']
    print(f'This job title is (job_title)')
    print(f'This job was performed in (year)')
    print('-----------')
    break
21/40:
for career in d['careers']: #iterate through to find out what datatypes are in your list, so you can see what you can do with them
    print(career)
    job_title = career['job_title']
    year = career['year']
    print(f'This job title is {job_title}')
    print(f'This job was performed in {year}')
    print('-----------')
    break
21/41: #zip function
21/42:
lst1 = [random.randit(0,10) for i in range(15)]
lst2 = [random.randit(0,10) for i in range(15)]
lst1, lst2
21/43:
import random
random.seed(42)
21/44:
lst1 = [random.randit(0,10) for i in range(15)]
lst2 = [random.randit(0,10) for i in range(15)]
lst1, lst2
21/45:
#lst3 = [5+9, 2+1,...,3+9]
lst3 = []
for i in range(len(lst1)):
    el = lst1[i]
    e2 = lst2[i]
    lst3.append(e1+e2)
print(lst3)
21/46:
lst1 = [random.randint(0, 10) for i in range(15)]
lst2 = [random.randint(0, 10) for i in range(15)]
lst1, lst2
21/47:
#lst3 = [5+9, 2+1,...,3+9]
lst3 = []
for i in range(len(lst1)):
    el = lst1[i]
    e2 = lst2[i]
    lst3.append(e1+e2)
print(lst3)
21/48:
#lst3 = [5+9, 2+1,...,3+9]
lst3 = []
for i in range(len(lst1)):
    e1 = lst1[i]
    e2 = lst2[i]
    lst3.append(e1+e2)
print(lst3)
21/49:
lst3 = []
for i in zip(lst1, lst2): #shortcut to the above, using zip function
    print(i) #the output are tuples
21/50:
for i, j, k in zip(lst1, lst2, lst3):
    print(i, j, k)
    print(i+j+k)
    print("n/n")
21/51:
for i, j, k in zip(lst1, lst2, lst3):
    print(i, j, k)
    print(i+j+k)
21/52:
lst3 = []
for i, j, k in zip(lst1, lst2, lst3):
    print(i, j, k)
    print(i+j+k)
21/53:
lst3 = []
for i, j, k in zip(lst1, lst2, lst3):
    print(i, j, k)
    print(i+j+k)
    
lst3
21/54:
#lambdas
def remove_as(string):
    new_string = string.replace('a', '')
    return new_string
21/55: string1 = 'this is a stringwith some letter and stuff'
21/56: remove_as(string1)
21/57: string1 = 'this is a stringwith some letter and stuff for the sake of an example'
21/58: remove_as(string1)
21/59:
#how can we write that same function as a lambda?
#remove_as = lambda input: output
remove_as = lambda string: string.replace('a', '')
21/60: remove_as(string)
21/61: remove_as(string1)
21/62: string1 = 'this is a string with some letter and stuff for the sake of an example'
21/63: remove_as(string1)
21/64:
#how can we write that same function as a lambda?
#remove_as = lambda input: output
remove_as = lambda string: string.replace('a', '')
21/65: remove_as(string1)
20/1:
import pandas as pd
file_name = './cities.xlsx'
travel_df = pd.read_excel(file_name)
cities = travel_df.to_dict('records')
20/2: cities
20/3:
salina = cities[-3] 
salina
# {'Area': 27, 'City': 'Salina Island', 'Country': 'Italy', 'Population': 4000}
20/4:
los_cabos_pop = cities[3]['Population']
los_cabos_pop # 287651
20/5:
city_count = cities['City']
city_count # 12
20/6:
city_count = len(cities)
city_count # 12
20/7:
cities[11]['City'] = 'PyeongChang'
cities[11]['City'] # 'PyeongChang'
20/8:
pyeongchang_values = cities[11]

pyeongchang_values # ['PyeongChang', 'South Korea', 2581000, 3194]
type(pyeongchang_values) # list
20/9:
pyeongchang_values = cities[11]

pyeongchang_values # ['PyeongChang', 'South Korea', 2581000, 3194]
type(list(pyeongchang_values) # list
20/10:
pyeongchang_values = cities[11]

pyeongchang_values # ['PyeongChang', 'South Korea', 2581000, 3194]
type(list(pyeongchang_values)) # list
20/11:
pyeongchang_values = cities[11]

pyeongchang_values # ['PyeongChang', 'South Korea', 2581000, 3194]
#type(list(pyeongchang_values)) # list
20/12:
pyeongchang_values = cities[11]

pyeongchang_values # ['PyeongChang', 'South Korea', 2581000, 3194]
type(list(pyeongchang_values)) # list
20/13:
pyeongchang_keys = ['City', 'Country', 'Population', 'Area']


pyeongchang_keys # ['City', 'Country', 'Population', 'Area']
type(pyeongchang_keys) # list
22/1:
import pandas as pd
file_name = './cities.xlsx'
travel_df = pd.read_excel(file_name)
cities = travel_df.to_dict('records')
22/2:
import matplotlib.pyplot as plt

%matplotlib inline

x_values = [cities[0]['City'], cities[1]['City'], cities[2]['City']]
y_values = [cities[0]['Population'], cities[1]['Population'], cities[2]['Population']]
 
plt.bar(x_values, y_values)
plt.ylabel('Population')
plt.title('City Populations')
 
plt.show()
22/3:
x_values = [cities[0]['City'], cities[1]['City'], cities[2]['City']]
y_values = [cities[0]['Population'], cities[1]['Population'], cities[2]['Population']]
22/4:
buenos_aires = cities[0]
buenos_aires
22/5:
# here we want to find just the area of buenos_aires
buenos_aires_area = buenos_aires['Area']
# code goes here

buenos_aires_area
22/6:
city_indices = None
city_indices # [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
22/7:
city_indices = list(range(0,len(cities)))
city_indices # [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
22/8:
city_names = []
for name in city_indices:
    cities(name)

city_names
22/9:
city_names = []
for name in city_indices:
    city = cities['City']
    city.append(city_names)
    

city_names
22/10:
city_names = []
for name in city_indices:
    city = cities['City']
    city_names.append(city)
    

city_names
22/11:
city_names = []
for name in city_indices:
    print(cities[name])
    

city_names
22/12:
city_names = []
for name in city_indices:
    print(cities['City'][name])
    

city_names
22/13:
city_names = []
for name in city_indices:
    print(cities[name]['City'])
    

city_names
22/14:
city_names = []
for name in city_indices:
    cities[name]['City'].append(city_names)
    

city_names
22/15:
city_names = []
for name in city_indices:
    cities[name]['City'].append()
    

city_names
22/16:
city_names = []
for name in city_indices:
    cities[name]['City']
    

city_names
22/17:
city_names = []
for name in city_indices:
    print(cities[name]['City'])
    

city_names
22/18:
city_names = []
for name in city_indices:
    city = cities[name]['City']
    city_names.append(city)
    

city_names
23/1:
names_and_ranks = []
for index in city_indices:
    rank = index+1


names_and_ranks
# write a for loop that adds the properly formatted string to the names_and_ranks list
23/2:
import pandas as pd
file_name = './cities.xlsx'
travel_df = pd.read_excel(file_name)
cities = travel_df.to_dict('records')
23/3:
import matplotlib.pyplot as plt

%matplotlib inline

x_values = [cities[0]['City'], cities[1]['City'], cities[2]['City']]
y_values = [cities[0]['Population'], cities[1]['Population'], cities[2]['Population']]
 
plt.bar(x_values, y_values)
plt.ylabel('Population')
plt.title('City Populations')
 
plt.show()
23/4:
x_values = [cities[0]['City'], cities[1]['City'], cities[2]['City']]
y_values = [cities[0]['Population'], cities[1]['Population'], cities[2]['Population']]
23/5:
buenos_aires = cities[0]
buenos_aires
23/6:
# here we want to find just the area of buenos_aires
buenos_aires_area = buenos_aires['Area']
# code goes here

buenos_aires_area
23/7:
city_indices = list(range(0,len(cities)))
city_indices # [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
23/8:
city_names = []
for name in city_indices:
    city = cities[name]['City']
    city_names.append(city)
    

city_names
23/9:
names_and_ranks = []
for index in city_indices:
    rank = index+1


names_and_ranks
# write a for loop that adds the properly formatted string to the names_and_ranks list
23/10:
names_and_ranks = []
for index in city_indices:
rank = index+1


names_and_ranks
# write a for loop that adds the properly formatted string to the names_and_ranks list
23/11:
names_and_ranks = []
for index in city_indices:
    rank = index+1
    answer = print(f'{rank}. {city_names}')
    names_and_ranks.append(answer)


names_and_ranks
# write a for loop that adds the properly formatted string to the names_and_ranks list
23/12:
names_and_ranks = []
for index in city_indices:
    rank = print(index+1)
    answer = print(f'{rank}. {city_names}')
    names_and_ranks.append(answer)


names_and_ranks
# write a for loop that adds the properly formatted string to the names_and_ranks list
23/13:
names_and_ranks = []
index+1 for index in city_indices:
    answer = print(f'{index}. {city_names}')
    names_and_ranks.append(answer)


names_and_ranks
# write a for loop that adds the properly formatted string to the names_and_ranks list
23/14:
names_and_ranks = []
ranks = [index+1 for index in city_indices]:
    answer = print(f'{index}. {city_names}')
    names_and_ranks.append(answer)


names_and_ranks
# write a for loop that adds the properly formatted string to the names_and_ranks list
23/15:
names_and_ranks = []
for index in city_indices:
    index+=1
    answer = print(f'{index}. {city_names}')
    names_and_ranks.append(answer)


names_and_ranks
# write a for loop that adds the properly formatted string to the names_and_ranks list
23/16:
names_and_ranks = []
for index in city_indices:
    answer = print(f'{index+1}. {city_names}')
    names_and_ranks.append(answer)


names_and_ranks
# write a for loop that adds the properly formatted string to the names_and_ranks list
23/17:
names_and_ranks = []
for index in city_indices:
    answer = print(f'{index+1}. {city_names}')
    names_and_ranks.append(answer)


names_and_ranks
# write a for loop that adds the properly formatted string to the names_and_ranks list
23/18:
names_and_ranks = []
for index in city_indices:
    names_and_ranks.append(print(f'{index+1}. {city_names}'))


names_and_ranks
# write a for loop that adds the properly formatted string to the names_and_ranks list
23/19:
names_and_ranks = []
for index in city_indices:
    names_and_ranks.append(print(f'{index+1}. {city_names[index]}'))


names_and_ranks
# write a for loop that adds the properly formatted string to the names_and_ranks list
23/20:
names_and_ranks = []
for index in city_indices:
    names_and_ranks.append(print(f'{index+1}. {city_names[index]}'))
names_and_ranks
# write a for loop that adds the properly formatted string to the names_and_ranks list
23/21:
names_and_ranks = []
for index in city_indices:
    names_and_ranks.append(print(f'{index+1}. {city_names[index]}'))
names_and_ranks
# write a for loop that adds the properly formatted string to the names_and_ranks list
23/22:
names_and_ranks = []
for index in city_indices:
    names_and_ranks.append(f'{index+1}. {city_names[index]}')
names_and_ranks
# write a for loop that adds the properly formatted string to the names_and_ranks list
23/23:
print(names_and_ranks[0]) # '1. Buenos Aires'
print(names_and_ranks[1]) # '2. Toronto'
print(names_and_ranks[-1]) # '12. Iguazu Falls'
23/24:
city_populations = []
for city in cities:
    city_populations.append(city['Population'])
city_populations # use a for loop to iterate through the list of cities with their corresponding population
23/25:
print(city_populations[0]) # 2891000
print(city_populations[1]) # 2800000
print(city_populations[-1]) # 0
23/26:
plt.bar(names_and_ranks, city_populations)
plt.xticks(rotation='vertical')
plt.ylabel('Population')
plt.title('City Populations')
plt.show()
23/27:
city_areas = []
for index in cities:
    city_areas.append(index['Area'])
city_areas
#write a for loop that adds the 'Area' of each city to the list city_areas
23/28:
plt.bar(names_and_ranks, city_populations)

plt.ylabel('Population')
plt.xlabel('Cities')
plt.title('City Populations')
plt.xticks(rotation='vertical')
 
plt.show()
23/29:
plt.bar(names_and_ranks, city_areas)
plt.ylabel('Area')
plt.xlabel('Cities')
plt.title('City Areas')
plt.xticks(rotation='vertical')
 
plt.show()
24/1:
# import the required libraries
import numpy as np
import matplotlib.pyplot as plt

x = ['crime/mystery','science fiction','drama', 'comedy', 'action','documentary movies']

y = [40, 30, 10, 50,25,5]
labels = 'Movie Data'

plt.figure(figsize=(8,6))
plt.bar(x,y,label='Movie Data')
plt.xlabel('genres', 'number of movies')
plt.title("Jim's Video Library")
plt.legend()
plt.show()


# Create a new figure object

# Plot vertical bars of fixed width by passing x and y values to .bar() function 

# Give a title to the bar graph

# Output the final plot
24/2:
# import the required libraries
import numpy as np
import matplotlib.pyplot as plt

x = ['crime/mystery','science fiction','drama', 'comedy', 'action','documentary movies']

y = [40, 30, 10, 50,25,5]
labels = 'Movie Data'

plt.figure(figsize=(8,6))
plt.bar(x,y,label='Movie Data')
plt.xlabel('genres') 
plt.ylabel('number of movies')
plt.title("Jim's Video Library")
plt.legend()
plt.show()


# Create a new figure object

# Plot vertical bars of fixed width by passing x and y values to .bar() function 

# Give a title to the bar graph

# Output the final plot
24/3:
# import the required libraries
import numpy as np
import matplotlib.pyplot as plt

x = ['crime/mystery', 'science fiction','drama', 'comedy', 'action','documentary movies']

y = [40, 30, 10, 50,25,5]
labels = 'Movie Data'

plt.figure(figsize=(8,6))
plt.bar(x,y,label='Movie Data')
plt.xlabel('genres') 
plt.ylabel('number of movies')
plt.title("Jim's Video Library")
plt.legend()
plt.show()


# Create a new figure object

# Plot vertical bars of fixed width by passing x and y values to .bar() function 

# Give a title to the bar graph

# Output the final plot
24/4:
weight = [2750, 3125, 2100, 4082, 2690, 3640, 4380, 2241, 2895, 3659]
mpg = [29, 23, 33, 28, 20, 21, 14, 25, 31, 17]

plt.figure(figsize=(10,6))

plt.scatter(weight, mpg, label = 'weight vs. mpg')
plt.xlabel('Weight')
plt.ylabel('Mpg')
plt.title('Weight vs. Miles per Gallon')
plt.legend()
plt.show




# Set the figure size in inches

# Plot with scatter()

# Set x and y axes labels and a title
24/5:
x = [43.1, 35.6, 37.5, 36.5, 45.3, 43.4, 40.3, 50.2, 47.3, 31.2, 42.2, 45.5, 30.3, 31.4, 35.6, 45.2, 54.1, 45.6, 36.5, 43.1]

plt.hist(x, bins = 5, edgecolor='black')

plt.xlabel('Wait Times')
plt.ylabel('Number of Customers')
plt.title('Customer Waiting Times')
plt.show()
#Plot the distogram with hist() function

# Label, give title and show the plot
24/6:
x = [43.1, 35.6, 37.5, 36.5, 45.3, 43.4, 40.3, 50.2, 47.3, 31.2, 42.2, 45.5, 30.3, 31.4, 35.6, 45.2, 54.1, 45.6, 36.5, 43.1]

plt.hist(x, bins = 5)

plt.xlabel('Wait Times')
plt.ylabel('Number of Customers')
plt.title('Customer Waiting Times')
plt.show()
#Plot the distogram with hist() function

# Label, give title and show the plot
25/1:
import requests
macbeth = requests.get('http://www.gutenberg.org/cache/epub/2264/pg2264.txt').text

print(type(macbeth))
print(len(macbeth))
print(macbeth[:500])
25/2:
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline

dict(macbeth)
# Your code here

# Pseudo-code outline

# Split the transcript into words
# Create a dictionary
# Iterate through the text of Macbeth
# Update word counts
# Sort words by counts in descending order
# Create Bar Graph
# Include descriptive titles and labels
25/3:
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline

list_macbeth = [index.strip() for index in macbeth.split(',')]
# Your code here

# Pseudo-code outline

# Split the transcript into words
# Create a dictionary
# Iterate through the text of Macbeth
# Update word counts
# Sort words by counts in descending order
# Create Bar Graph
# Include descriptive titles and labels
25/4:
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline

list_macbeth = [index.strip() for index in macbeth.split(',')]
list_macbeth
# Your code here

# Pseudo-code outline

# Split the transcript into words
# Create a dictionary
# Iterate through the text of Macbeth
# Update word counts
# Sort words by counts in descending order
# Create Bar Graph
# Include descriptive titles and labels
25/5:
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline

list_macbeth = [index.strip() for index in macbeth.split(' ')] 

list_macbeth
# Your code here

# Pseudo-code outline

# Split the transcript into words
# Create a dictionary
# Iterate through the text of Macbeth
# Update word counts
# Sort words by counts in descending order
# Create Bar Graph
# Include descriptive titles and labels
25/6:
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline

list_macbeth = [index.strip() for index in macbeth.split(' ')] #remove whitespace and separate words by comma
dict_macbeth = dict(zip(list_macbeth))
dict_macbeth
# Your code here

# Pseudo-code outline

# Split the transcript into words
# Create a dictionary
# Iterate through the text of Macbeth
# Update word counts
# Sort words by counts in descending order
# Create Bar Graph
# Include descriptive titles and labels
25/7:
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline

list_macbeth = [index.strip() for index in macbeth.split(' ')] #remove whitespace and separate words by comma
dict_macbeth = dict(zip(*[iter(list_macbeth)]*2))
dict_macbeth
# Your code here

# Pseudo-code outline

# Split the transcript into words
# Create a dictionary
# Iterate through the text of Macbeth
# Update word counts
# Sort words by counts in descending order
# Create Bar Graph
# Include descriptive titles and labels
25/8:
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline

list_macbeth = [index.strip() for index in macbeth.split(' ')] #remove whitespace and separate words by comma
remove_char = list_macbeth.replace('*','')
dict_macbeth = dict(zip(*[iter(remove_char)]*2)) #group words in pairs of 2, making the first words the key and the latter the value, then converts to a dictionary

dict_macbeth
# Your code here

# Pseudo-code outline

# Split the transcript into words
# Create a dictionary
# Iterate through the text of Macbeth
# Update word counts
# Sort words by counts in descending order
# Create Bar Graph
# Include descriptive titles and labels
25/9:
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline

list_macbeth = [index.strip() for index in macbeth.split(' ')] #remove whitespace and separate words by comma
dict_macbeth = dict(zip(*[iter(list_macbeth)]*2)) #group words in pairs of 2, making the first words the key and the latter the value, then converts to a dictionary
remove_char = dict_macbeth.replace('*', '')
remove_char
# Your code here

# Pseudo-code outline

# Split the transcript into words
# Create a dictionary
# Iterate through the text of Macbeth
# Update word counts
# Sort words by counts in descending order
# Create Bar Graph
# Include descriptive titles and labels
25/10:
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline

list_macbeth = [index.strip() for index in macbeth.split(' ')] #remove whitespace and separate words by comma
dict_macbeth = dict(zip(*[iter(list_macbeth)]*2)) #group words in pairs of 2, making the first words the key and the latter the value, then converts to a dictionary
remove_char = dict_macbeth.replace['*', '']
remove_char
# Your code here

# Pseudo-code outline

# Split the transcript into words
# Create a dictionary
# Iterate through the text of Macbeth
# Update word counts
# Sort words by counts in descending order
# Create Bar Graph
# Include descriptive titles and labels
25/11:
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline

list_macbeth = [index.strip() for index in macbeth.split(' ')] #remove whitespace and separate words by comma
dict_macbeth = dict(zip(*[iter(list_macbeth)]*2)) #group words in pairs of 2, making the first words the key and the latter the value, then converts to a dictionary
remove_char = dict_macbeth.replace{'*', ''}
remove_char
# Your code here

# Pseudo-code outline

# Split the transcript into words
# Create a dictionary
# Iterate through the text of Macbeth
# Update word counts
# Sort words by counts in descending order
# Create Bar Graph
# Include descriptive titles and labels
25/12:
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline

list_macbeth = [index.strip() for index in macbeth.split(' ')] #remove whitespace and separate words by comma
dict_macbeth = dict(zip(*[iter(list_macbeth)]*2)) #group words in pairs of 2, making the first words the key and the latter the value, then converts to a dictionary
remove_char = dict_macbeth.replace[]'*', '']
remove_char
# Your code here

# Pseudo-code outline

# Split the transcript into words
# Create a dictionary
# Iterate through the text of Macbeth
# Update word counts
# Sort words by counts in descending order
# Create Bar Graph
# Include descriptive titles and labels
25/13:
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline

list_macbeth = [index.strip() for index in macbeth.split(' ')] #remove whitespace and separate words by comma
dict_macbeth = dict(zip(*[iter(list_macbeth)]*2)) #group words in pairs of 2, making the first words the key and the latter the value, then converts to a dictionary
remove_char = dict_macbeth.replace['*', '']
remove_char
# Your code here

# Pseudo-code outline

# Split the transcript into words
# Create a dictionary
# Iterate through the text of Macbeth
# Update word counts
# Sort words by counts in descending order
# Create Bar Graph
# Include descriptive titles and labels
25/14:
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline

s = macbeth.replace('*','')
s
#list_macbeth = [index.strip() for index in macbeth.split(' ')] #remove whitespace and separate words by comma
#dict_macbeth = dict(zip(*[iter(list_macbeth)]*2)) #group words in pairs of 2, making the first words the key and the latter the value, then converts to a dictionary

#dict_macbeth
# Your code here

# Pseudo-code outline

# Split the transcript into words
# Create a dictionary
# Iterate through the text of Macbeth
# Update word counts
# Sort words by counts in descending order
# Create Bar Graph
# Include descriptive titles and labels
25/15:
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline

astericks = macbeth.replace('*','')
backslashr = astericks.replace('\r')
backslashr
#list_macbeth = [index.strip() for index in macbeth.split(' ')] #remove whitespace and separate words by comma
#dict_macbeth = dict(zip(*[iter(list_macbeth)]*2)) #group words in pairs of 2, making the first words the key and the latter the value, then converts to a dictionary

#dict_macbeth
# Your code here

# Pseudo-code outline

# Split the transcript into words
# Create a dictionary
# Iterate through the text of Macbeth
# Update word counts
# Sort words by counts in descending order
# Create Bar Graph
# Include descriptive titles and labels
25/16:
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline

astericks = macbeth.replace('*','')
backslashr = astericks.replace('\r','')
backslashr
#list_macbeth = [index.strip() for index in macbeth.split(' ')] #remove whitespace and separate words by comma
#dict_macbeth = dict(zip(*[iter(list_macbeth)]*2)) #group words in pairs of 2, making the first words the key and the latter the value, then converts to a dictionary

#dict_macbeth
# Your code here

# Pseudo-code outline

# Split the transcript into words
# Create a dictionary
# Iterate through the text of Macbeth
# Update word counts
# Sort words by counts in descending order
# Create Bar Graph
# Include descriptive titles and labels
25/17:
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline

astericks = macbeth.replace('*','')
backslashr = astericks.replace('\r','')
backslashn = backslashr.replace('\n','')
backslashn
#list_macbeth = [index.strip() for index in macbeth.split(' ')] #remove whitespace and separate words by comma
#dict_macbeth = dict(zip(*[iter(list_macbeth)]*2)) #group words in pairs of 2, making the first words the key and the latter the value, then converts to a dictionary

#dict_macbeth
# Your code here

# Pseudo-code outline

# Split the transcript into words
# Create a dictionary
# Iterate through the text of Macbeth
# Update word counts
# Sort words by counts in descending order
# Create Bar Graph
# Include descriptive titles and labels
25/18:
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline

astericks = macbeth.replace('*','')
backslashr = astericks.replace('\r','')
backslashn = backslashr.replace('\n','')
slash = backslashn.replace('\','')
slash
#list_macbeth = [index.strip() for index in macbeth.split(' ')] #remove whitespace and separate words by comma
#dict_macbeth = dict(zip(*[iter(list_macbeth)]*2)) #group words in pairs of 2, making the first words the key and the latter the value, then converts to a dictionary

#dict_macbeth
# Your code here

# Pseudo-code outline

# Split the transcript into words
# Create a dictionary
# Iterate through the text of Macbeth
# Update word counts
# Sort words by counts in descending order
# Create Bar Graph
# Include descriptive titles and labels
25/19:
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline

astericks = macbeth.replace('*','')
backslashr = astericks.replace('\r','')
backslashn = backslashr.replace('\n','')
slash = backslashn.replace("""\""",""")
slash


#list_macbeth = [index.strip() for index in macbeth.split(' ')] #remove whitespace and separate words by comma
#dict_macbeth = dict(zip(*[iter(list_macbeth)]*2)) #group words in pairs of 2, making the first words the key and the latter the value, then converts to a dictionary

#dict_macbeth
# Your code here

# Pseudo-code outline

# Split the transcript into words
# Create a dictionary
# Iterate through the text of Macbeth
# Update word counts
# Sort words by counts in descending order
# Create Bar Graph
# Include descriptive titles and labels
25/20:
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline

astericks = macbeth.replace('*','')
backslashr = astericks.replace('\r','')
backslashn = backslashr.replace('\n','')
slash = backslashn.replace("""\""",""""")
slash


#list_macbeth = [index.strip() for index in macbeth.split(' ')] #remove whitespace and separate words by comma
#dict_macbeth = dict(zip(*[iter(list_macbeth)]*2)) #group words in pairs of 2, making the first words the key and the latter the value, then converts to a dictionary

#dict_macbeth
# Your code here

# Pseudo-code outline

# Split the transcript into words
# Create a dictionary
# Iterate through the text of Macbeth
# Update word counts
# Sort words by counts in descending order
# Create Bar Graph
# Include descriptive titles and labels
25/21:
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline

astericks = macbeth.replace('*','')
backslashr = astericks.replace('\r','')
backslashn = backslashr.replace('\n','')
slash = backslashn.replace("""\""","""""")
slash


#list_macbeth = [index.strip() for index in macbeth.split(' ')] #remove whitespace and separate words by comma
#dict_macbeth = dict(zip(*[iter(list_macbeth)]*2)) #group words in pairs of 2, making the first words the key and the latter the value, then converts to a dictionary

#dict_macbeth
# Your code here

# Pseudo-code outline

# Split the transcript into words
# Create a dictionary
# Iterate through the text of Macbeth
# Update word counts
# Sort words by counts in descending order
# Create Bar Graph
# Include descriptive titles and labels
25/22:
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline

astericks = macbeth.replace('*','')
backslashr = astericks.replace('\r','')
backslashn = backslashr.replace('\n','')
backslashn

#list_macbeth = [index.strip() for index in macbeth.split(' ')] #remove whitespace and separate words by comma
#dict_macbeth = dict(zip(*[iter(list_macbeth)]*2)) #group words in pairs of 2, making the first words the key and the latter the value, then converts to a dictionary

#dict_macbeth
# Your code here

# Pseudo-code outline

# Split the transcript into words
# Create a dictionary
# Iterate through the text of Macbeth
# Update word counts
# Sort words by counts in descending order
# Create Bar Graph
# Include descriptive titles and labels
25/23:
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline

astericks = macbeth.replace('*','')
backslashr = astericks.replace('\r','')
backslashn = backslashr.replace('\n','')

list_macbeth = [index.strip() for index in backslashn.split(' ')] #remove whitespace and separate words by comma
dict_macbeth = dict(zip(*[iter(list_macbeth)]*2)) #group words in pairs of 2, making the first words the key and the latter the value, then converts to a dictionary

#dict_macbeth
# Your code here

# Pseudo-code outline

# Split the transcript into words
# Create a dictionary
# Iterate through the text of Macbeth
# Update word counts
# Sort words by counts in descending order
# Create Bar Graph
# Include descriptive titles and labels
25/24:
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline

astericks = macbeth.replace('*','')
backslashr = astericks.replace('\r','')
backslashn = backslashr.replace('\n','')

list_macbeth = [index.strip() for index in backslashn.split(' ')] #remove whitespace and separate words by comma
dict_macbeth = dict(zip(*[iter(list_macbeth)]*2)) #group words in pairs of 2, making the first words the key and the latter the value, then converts to a dictionary
dict_macbeth

#dict_macbeth
# Your code here

# Pseudo-code outline

# Split the transcript into words
# Create a dictionary
# Iterate through the text of Macbeth
# Update word counts
# Sort words by counts in descending order
# Create Bar Graph
# Include descriptive titles and labels
25/25:
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline

astericks = macbeth.replace('*','')
#backslashr = astericks.replace('\r','')
#backslashn = backslashr.replace('\n','')

list_macbeth = [index.strip() for index in astericks.split(' ')] #remove whitespace and separate words by comma
dict_macbeth = dict(zip(*[iter(list_macbeth)]*2)) #group words in pairs of 2, making the first words the key and the latter the value, then converts to a dictionary
dict_macbeth

#dict_macbeth
# Your code here

# Pseudo-code outline

# Split the transcript into words
# Create a dictionary
# Iterate through the text of Macbeth
# Update word counts
# Sort words by counts in descending order
# Create Bar Graph
# Include descriptive titles and labels
25/26:
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline

astericks = macbeth.replace('*','')
backslashr = astericks.replace('\r','')
backslashn = backslashr.replace('\n','')

list_macbeth = [index.strip() for index in backslashn.split(' ')] #remove whitespace and separate words by comma
dict_macbeth = dict(zip(*[iter(list_macbeth)]*2)) #group words in pairs of 2, making the first words the key and the latter the value, then converts to a dictionary
dict_macbeth

#dict_macbeth
# Your code here

# Pseudo-code outline

# Split the transcript into words
# Create a dictionary
# Iterate through the text of Macbeth
# Update word counts
# Sort words by counts in descending order
# Create Bar Graph
# Include descriptive titles and labels
25/27:
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline

macbeth

#dict_macbeth
# Your code here

# Pseudo-code outline

# Split the transcript into words
# Create a dictionary
# Iterate through the text of Macbeth
# Update word counts
# Sort words by counts in descending order
# Create Bar Graph
# Include descriptive titles and labels
25/28:
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline


# Your code here

# Pseudo-code outline
astericks = macbeth.replace('*','')
backslashr = astericks.replace('\r','')
backslashn = backslashr.replace('\n','')
# Split the transcript into words
# Create a dictionary
list_macbeth = [index.strip() for index in backslashn.split(' ')] #remove whitespace and separate words by comma
dict_macbeth = dict(zip(*[iter(list_macbeth)]*2)) #group words in pairs of 2, making the first words the key and the latter the value, then converts to a dictionary
# Iterate through the text of Macbeth
tallies = Counter()
for words in dict_macbeth:
    tallies[words] +=1
    
tallies
    
    
# Update word counts
# Sort words by counts in descending order
# Create Bar Graph
# Include descriptive titles and labels
25/29:
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline


# Your code here

# Pseudo-code outline
astericks = macbeth.replace('*','')
backslashr = astericks.replace('\r','')
backslashn = backslashr.replace('\n','')
# Split the transcript into words
# Create a dictionary
list_macbeth = [index.strip() for index in backslashn.split(' ')] #remove whitespace and separate words by comma
dict_macbeth = dict(zip(*[iter(list_macbeth)]*2)) #group words in pairs of 2, making the first words the key and the latter the value, then converts to a dictionary
# Iterate through the text of Macbeth
tallies = []
for words in dict_macbeth:
    tallies[words] +=1
    
tallies
    
    
# Update word counts
# Sort words by counts in descending order
# Create Bar Graph
# Include descriptive titles and labels
25/30:
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline


# Your code here

# Pseudo-code outline
astericks = macbeth.replace('*','')
backslashr = astericks.replace('\r','')
backslashn = backslashr.replace('\n','')
# Split the transcript into words
# Create a dictionary
list_macbeth = [index.strip() for index in backslashn.split(' ')] #remove whitespace and separate words by comma
dict_macbeth = dict(zip(*[iter(list_macbeth)]*2)) #group words in pairs of 2, making the first words the key and the latter the value, then converts to a dictionary
# Iterate through the text of Macbeth
tallies = ()
for words in dict_macbeth:
    tallies[words] +=1
    
tallies
    
    
# Update word counts
# Sort words by counts in descending order
# Create Bar Graph
# Include descriptive titles and labels
25/31:
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline


# Your code here

# Pseudo-code outline
astericks = macbeth.replace('*','')
backslashr = astericks.replace('\r','')
backslashn = backslashr.replace('\n','')
# Split the transcript into words
# Create a dictionary
# Iterate through the text of Macbeth
list_macbeth = [index.strip() for index in backslashn.split(' ')] #remove whitespace and separate words by comma
dict_macbeth = dict(zip(*[iter(list_macbeth)]*2)) #group words in pairs of 2, making the first words the key and the latter the value, then converts to a dictionary
Counter(dict_macbeth).most_common(25) 
    
# Update word counts
# Sort words by counts in descending order
# Create Bar Graph
# Include descriptive titles and labels
25/32:
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline


# Your code here

# Pseudo-code outline
astericks = macbeth.replace('*','')
backslashr = astericks.replace('\r','')
backslashn = backslashr.replace('\n','')
# Split the transcript into words
# Create a dictionary
# Iterate through the text of Macbeth
list_macbeth = [index.strip() for index in backslashn.split(' ')] #remove whitespace and separate words by comma
dict_macbeth = dict(zip(*[iter(list_macbeth)]*2)) #group words in pairs of 2, making the first words the key and the latter the value, then converts to a dictionary
dict_macbeth.most_common(25) 
    
# Update word counts
# Sort words by counts in descending order
# Create Bar Graph
# Include descriptive titles and labels
25/33:
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline


# Your code here

# Pseudo-code outline
astericks = macbeth.replace('*','')
backslashr = astericks.replace('\r','')
backslashn = backslashr.replace('\n','')
# Split the transcript into words
# Create a dictionary
# Iterate through the text of Macbeth
list_macbeth = [index.strip() for index in backslashn.split(' ')] #remove whitespace and separate words by comma
dict_macbeth = dict(zip(*[iter(list_macbeth)]*2)) #group words in pairs of 2, making the first words the key and the latter the value, then converts to a dictionary

word_store = {}
for words in dict_macbeth:
    word_store[words]=dict_macbeth.count(words)
    
# Update word counts
# Sort words by counts in descending order
# Create Bar Graph
# Include descriptive titles and labels
25/34:
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline


# Your code here

# Pseudo-code outline
astericks = macbeth.replace('*','')
backslashr = astericks.replace('\r','')
backslashn = backslashr.replace('\n','')
period = backslashn.replace('.','')

# Split the transcript into words
# Create a dictionary
# Iterate through the text of Macbeth
list_macbeth = [index.strip() for index in period.split(' ')] #remove whitespace and separate words by comma
dict_macbeth = dict(zip(*[iter(list_macbeth)]*2)) #group words in pairs of 2, making the first words the key and the latter the value, then converts to a dictionary

#word_store = {}
#for words in dict_macbeth:
    #word_store[words]=dict_macbeth.count(words)
    
# Update word counts
# Sort words by counts in descending order
# Create Bar Graph
# Include descriptive titles and labels
25/35:
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline


# Your code here

# Pseudo-code outline
astericks = macbeth.replace('*','')
backslashr = astericks.replace('\r','')
backslashn = backslashr.replace('\n','')
period = backslashn.replace('.','')

# Split the transcript into words
# Create a dictionary
# Iterate through the text of Macbeth
list_macbeth = [index.strip() for index in period.split(' ')] #remove whitespace and separate words by comma
dict_macbeth = dict(zip(*[iter(list_macbeth)]*2)) #group words in pairs of 2, making the first words the key and the latter the value, then converts to a dictionary

dict_macbeth
#word_store = {}
#for words in dict_macbeth:
    #word_store[words]=dict_macbeth.count(words)
    
# Update word counts
# Sort words by counts in descending order
# Create Bar Graph
# Include descriptive titles and labels
25/36:
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline


# Your code here

# Pseudo-code outline
astericks = macbeth.replace('*','')
backslashr = astericks.replace('\r','')
backslashn = backslashr.replace('\n','')
period = backslashn.replace('.','')
slash = period.replace('\','')

# Split the transcript into words
# Create a dictionary
# Iterate through the text of Macbeth
list_macbeth = [index.strip() for index in slash.split(' ')] #remove whitespace and separate words by comma
dict_macbeth = dict(zip(*[iter(list_macbeth)]*2)) #group words in pairs of 2, making the first words the key and the latter the value, then converts to a dictionary

dict_macbeth
#word_store = {}
#for words in dict_macbeth:
    #word_store[words]=dict_macbeth.count(words)
    
# Update word counts
# Sort words by counts in descending order
# Create Bar Graph
# Include descriptive titles and labels
25/37:
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline


# Your code here

# Pseudo-code outline


# Split the transcript into words
# Create a dictionary
# Iterate through the text of Macbeth
list_macbeth = [index.strip() for index in macbeth.split(' ')] #remove whitespace and separate words by comma
dict_macbeth = dict(zip(*[iter(list_macbeth)]*2)) #group words in pairs of 2, making the first words the key and the latter the value, then converts to a dictionary

for nonwords in dict_macbeth:
    nonwords = nonwords.replace('*','')
    nonwords = nonwords.replace('\r','')
    nonwords = nonwords.replace('\n','')
    nonwords = nonwords.replace('.','')
    nonwords = nonwords.replace('\','')

#word_store = {}
#for words in dict_macbeth:
    #word_store[words]=dict_macbeth.count(words)
    
# Update word counts
# Sort words by counts in descending order
# Create Bar Graph
# Include descriptive titles and labels
25/38:
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline


# Your code here

# Pseudo-code outline


# Split the transcript into words
# Create a dictionary
# Iterate through the text of Macbeth
list_macbeth = [index.strip() for index in macbeth.split(' ')] #remove whitespace and separate words by comma
dict_macbeth = dict(zip(*[iter(list_macbeth)]*2)) #group words in pairs of 2, making the first words the key and the latter the value, then converts to a dictionary

for nonwords in dict_macbeth:
    nonwords = nonwords.replace('*','')
    nonwords = nonwords.replace('\r','')
    nonwords = nonwords.replace('\n','')
    nonwords = nonwords.replace('.','')
 

#word_store = {}
#for words in dict_macbeth:
    #word_store[words]=dict_macbeth.count(words)
    
# Update word counts
# Sort words by counts in descending order
# Create Bar Graph
# Include descriptive titles and labels
25/39:
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline


# Your code here

# Pseudo-code outline


# Split the transcript into words
# Create a dictionary
# Iterate through the text of Macbeth
list_macbeth = [index.strip() for index in macbeth.split(' ')] #remove whitespace and separate words by comma
dict_macbeth = dict(zip(*[iter(list_macbeth)]*2)) #group words in pairs of 2, making the first words the key and the latter the value, then converts to a dictionary

for nonwords in dict_macbeth:
    nonwords = nonwords.replace('*','')
    nonwords = nonwords.replace('\r','')
    nonwords = nonwords.replace('\n','')
    nonwords = nonwords.replace('.','')
    nonwords = nonwords.replace('"/"',"")
 

#word_store = {}
#for words in dict_macbeth:
    #word_store[words]=dict_macbeth.count(words)
    
# Update word counts
# Sort words by counts in descending order
# Create Bar Graph
# Include descriptive titles and labels
25/40:
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline


# Your code here

# Pseudo-code outline


# Split the transcript into words
# Create a dictionary
# Iterate through the text of Macbeth
list_macbeth = [index.strip() for index in macbeth.split(' ')] #remove whitespace and separate words by comma
dict_macbeth = dict(zip(*[iter(list_macbeth)]*2)) #group words in pairs of 2, making the first words the key and the latter the value, then converts to a dictionary

for nonwords in dict_macbeth:
    nonwords = nonwords.replace('*','')
    nonwords = nonwords.replace('\r','')
    nonwords = nonwords.replace('\n','')
    nonwords = nonwords.replace('.','')
    nonwords = nonwords.replace('"/"',"")

dict_macbeth
 

#word_store = {}
#for words in dict_macbeth:
    #word_store[words]=dict_macbeth.count(words)
    
# Update word counts
# Sort words by counts in descending order
# Create Bar Graph
# Include descriptive titles and labels
25/41:
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline


# Your code here

# Pseudo-code outline


# Split the transcript into words
# Create a dictionary
# Iterate through the text of Macbeth
list_macbeth = [index.strip() for index in macbeth.split(' ')] #remove whitespace and separate words by comma
dict_macbeth = dict(zip(*[iter(list_macbeth)]*2)) #group words in pairs of 2, making the first words the key and the latter the value, then converts to a dictionary

for nonwords in dict_macbeth:
    nonwords = nonwords.replace('*','')
    nonwords = nonwords.replace('\r','')
    nonwords = nonwords.replace('\n','')
    nonwords = nonwords.replace('.','')
    nonwords = nonwords.replace('"/"',"")

nonwords
 

#word_store = {}
#for words in dict_macbeth:
    #word_store[words]=dict_macbeth.count(words)
    
# Update word counts
# Sort words by counts in descending order
# Create Bar Graph
# Include descriptive titles and labels
25/42:
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline


# Your code here

# Pseudo-code outline
astericks = macbeth.replace('*','')
backslashr = astericks.replace('\r','')
backslashn = backslashr.replace('\n','')
period = backslashn.replace('.','')
colon = period.replace('"/"',"")

# Split the transcript into words
# Create a dictionary
# Iterate through the text of Macbeth
list_macbeth = [index.strip() for index in colon.split(' ')]: #remove whitespace and separate words by comma
dict_macbeth = dict(zip(*[iter(list_macbeth)]*2)) #group words in pairs of 2, making the first words the key and the latter the value, then converts to a dictionary

dict_macbeth
#word_store = {}
#for words in dict_macbeth:
    #word_store[words]=dict_macbeth.count(words)



    


 

#word_store = {}
#for words in dict_macbeth:
    #word_store[words]=dict_macbeth.count(words)
    
# Update word counts
# Sort words by counts in descending order
# Create Bar Graph
# Include descriptive titles and labels
25/43:
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline


# Your code here

# Pseudo-code outline
astericks = macbeth.replace('*','')
backslashr = astericks.replace('\r','')
backslashn = backslashr.replace('\n','')
period = backslashn.replace('.','')
colon = period.replace('"/"',"")

# Split the transcript into words
# Create a dictionary
# Iterate through the text of Macbeth
list_macbeth = [index.strip() for index in colon.split(' ')] #remove whitespace and separate words by comma
dict_macbeth = dict(zip(*[iter(list_macbeth)]*2)) #group words in pairs of 2, making the first words the key and the latter the value, then converts to a dictionary

dict_macbeth
#word_store = {}
#for words in dict_macbeth:
    #word_store[words]=dict_macbeth.count(words)



    


 

#word_store = {}
#for words in dict_macbeth:
    #word_store[words]=dict_macbeth.count(words)
    
# Update word counts
# Sort words by counts in descending order
# Create Bar Graph
# Include descriptive titles and labels
25/44:
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline


# Your code here

# Pseudo-code outline
astericks = macbeth.replace('*','')
backslashr = astericks.replace('\r','')
backslashn = backslashr.replace('\n','')
period = backslashn.replace('.','')
colon = period.replace('"/"',"")

# Split the transcript into words
# Create a dictionary
# Iterate through the text of Macbeth
list_macbeth = [index.strip() for index in colon.split(' ')] #remove whitespace and separate words by comma
dict_macbeth = dict(zip(*[iter(list_macbeth)]*2)) #group words in pairs of 2, making the first words the key and the latter the value, then converts to a dictionary

dict_macbeth

word_store = {}
for colon in dict_macbeth:
    if colon not in dict_macbeth:
        word_store[colon] = 1
    else:
        word_store[colon] += 1
    

   
    
# Update word counts
# Sort words by counts in descending order
# Create Bar Graph
# Include descriptive titles and labels
25/45:
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline


# Your code here

# Pseudo-code outline
astericks = macbeth.replace('*','')
backslashr = astericks.replace('\r','')
backslashn = backslashr.replace('\n','')
period = backslashn.replace('.','')
colon = period.replace('"/"',"")

# Split the transcript into words
# Create a dictionary
# Iterate through the text of Macbeth
list_macbeth = [index.strip() for index in colon.split(' ')] #remove whitespace and separate words by comma
dict_macbeth = dict(zip(*[iter(list_macbeth)]*2)) #group words in pairs of 2, making the first words the key and the latter the value, then converts to a dictionary

word_store = {}
for colon in dict_macbeth:
    if colon not in dict_macbeth:
        word_store[colon] = 1
    else:
        word_store[colon] += 1
    

   
    
# Update word counts
# Sort words by counts in descending order
# Create Bar Graph
# Include descriptive titles and labels
25/46:
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline


# Your code here

# Pseudo-code outline
astericks = macbeth.replace('*','')
backslashr = astericks.replace('\r','')
backslashn = backslashr.replace('\n','')
period = backslashn.replace('.','')
colon = period.replace('"/"',"")

# Split the transcript into words
# Create a dictionary
# Iterate through the text of Macbeth
list_macbeth = [index.strip() for index in colon.split(' ')] #remove whitespace and separate words by comma
dict_macbeth = dict(zip(*[iter(list_macbeth)]*2)) #group words in pairs of 2, making the first words the key and the latter the value, then converts to a dictionary

word_store = {}
for index in dict_macbeth:
    word_store[index] = word_store.get(index, 0) + 1

    word_store
   
    

   
    
# Update word counts
# Sort words by counts in descending order
# Create Bar Graph
# Include descriptive titles and labels
25/47:
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline


# Your code here

# Pseudo-code outline
astericks = macbeth.replace('*','')
backslashr = astericks.replace('\r','')
backslashn = backslashr.replace('\n','')
period = backslashn.replace('.','')
colon = period.replace('"/"',"")

# Split the transcript into words
# Create a dictionary
# Iterate through the text of Macbeth
list_macbeth = [index.strip() for index in colon.split(' ')] #remove whitespace and separate words by comma
dict_macbeth = dict(zip(*[iter(list_macbeth)]*2)) #group words in pairs of 2, making the first words the key and the latter the value, then converts to a dictionary

word_store = {}
for index in dict_macbeth:
    word_store[index] = word_store.get(index, 0) + 1

word_store
   
    

   
    
# Update word counts
# Sort words by counts in descending order
# Create Bar Graph
# Include descriptive titles and labels
25/48:
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline


# Your code here

# Pseudo-code outline
astericks = macbeth.replace('*','')
backslashr = astericks.replace('\r','')
backslashn = backslashr.replace('\n','')
period = backslashn.replace('.','')
colon = period.replace('"/"',"")

# Split the transcript into words
# Create a dictionary
# Iterate through the text of Macbeth
list_macbeth = [index.strip() for index in colon.split(' ')] #remove whitespace and separate words by comma
dict_macbeth = dict(zip(*[iter(list_macbeth)]*2)) #group words in pairs of 2, making the first words the key and the latter the value, then converts to a dictionary

word_store = {}
for colon in dict_macbeth:
    word_store[colon] = word_store.get(colon, 0) + 1

word_store
   
    

   
    
# Update word counts
# Sort words by counts in descending order
# Create Bar Graph
# Include descriptive titles and labels
25/49:
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline


# Your code here

# Pseudo-code outline
astericks = macbeth.replace('*','')
backslashr = astericks.replace('\r','')
backslashn = backslashr.replace('\n','')
period = backslashn.replace('.','')
colon = period.replace('"/"',"")

# Split the transcript into words
# Create a dictionary
# Iterate through the text of Macbeth
list_macbeth = [index.strip() for index in colon.split(' ')] #remove whitespace and separate words by comma
dict_macbeth = dict(zip(*[iter(list_macbeth)]*2)) #group words in pairs of 2, making the first words the key and the latter the value, then converts to a dictionary

word_store = {}
for index in dict_macbeth:
    word_store[index] = word_store.get(index, 0) + 1

word_store
   
    

   
    
# Update word counts
# Sort words by counts in descending order
# Create Bar Graph
# Include descriptive titles and labels
25/50:
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline


# Your code here

# Pseudo-code outline
astericks = macbeth.replace('*','')
backslashr = astericks.replace('\r','')
backslashn = backslashr.replace('\n','')
period = backslashn.replace('.','')
colon = period.replace('"/"',"")

# Split the transcript into words
# Create a dictionary
# Iterate through the text of Macbeth
list_macbeth = [index.strip() for index in colon.split(' ')] #remove whitespace and separate words by comma
#dict_macbeth = dict(zip(*[iter(list_macbeth)]*2)) #group words in pairs of 2, making the first words the key and the latter the value, then converts to a dictionary

word_store = {}
for index in list_macbeth:
    word_store[index] = word_store.get(index, 0) + 1 #Counts each word in the dictionary, and adds the word (key) and value (number/count) to the empty dictionary word_store
    

word_store
   
    

   
    
# Update word counts
# Sort words by counts in descending order
# Create Bar Graph
# Include descriptive titles and labels
25/51:
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline


# Your code here

# Pseudo-code outline
astericks = macbeth.replace('*','')
backslashr = astericks.replace('\r','')
backslashn = backslashr.replace('\n','')
period = backslashn.replace('.','')
colon = period.replace('"/"',"")

# Split the transcript into words
# Create a dictionary
# Iterate through the text of Macbeth
list_macbeth = [index.strip() for index in colon.split(' ')] #remove whitespace and separate words by comma


# Update word counts
word_store = {}
for index in list_macbeth:
    word_store[index] = word_store.get(index, 0) + 1 #Counts each word in the dictionary, and adds the word (key) and value (number/count) to the empty dictionary word_store
    

word_store

list.sorted(word_store)
# Sort words by counts in descending order
# Create Bar Graph
# Include descriptive titles and labels
25/52:
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline


# Your code here

# Pseudo-code outline
astericks = macbeth.replace('*','')
backslashr = astericks.replace('\r','')
backslashn = backslashr.replace('\n','')
period = backslashn.replace('.','')
colon = period.replace('"/"',"")

# Split the transcript into words
# Create a dictionary
# Iterate through the text of Macbeth
list_macbeth = [index.strip() for index in colon.split(' ')] #remove whitespace and separate words by comma


# Update word counts
word_store = {}
for index in list_macbeth:
    word_store[index] = word_store.get(index, 0) + 1 #Counts each word in the dictionary, and adds the word (key) and value (number/count) to the empty dictionary word_store
    

word_store

list.sort(word_store)
# Sort words by counts in descending order
# Create Bar Graph
# Include descriptive titles and labels
25/53:
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline


# Your code here

# Pseudo-code outline
astericks = macbeth.replace('*','')
backslashr = astericks.replace('\r','')
backslashn = backslashr.replace('\n','')
period = backslashn.replace('.','')
colon = period.replace('"/"',"")

# Split the transcript into words
# Create a dictionary
# Iterate through the text of Macbeth
list_macbeth = [index.strip() for index in colon.split(' ')] #remove whitespace and separate words by comma


# Update word counts
word_store = {}
for index in list_macbeth:
    word_store[index] = word_store.get(index, 0) + 1 #Counts each word in the dictionary, and adds the word (key) and value (number/count) to the empty dictionary word_store
    

word_store

sorted[word_store]
# Sort words by counts in descending order
# Create Bar Graph
# Include descriptive titles and labels
25/54:
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline


# Your code here

# Pseudo-code outline
astericks = macbeth.replace('*','')
backslashr = astericks.replace('\r','')
backslashn = backslashr.replace('\n','')
period = backslashn.replace('.','')
colon = period.replace('"/"',"")

# Split the transcript into words
# Create a dictionary
# Iterate through the text of Macbeth
list_macbeth = [index.strip() for index in colon.split(' ')] #remove whitespace and separate words by comma


# Update word counts
word_store = {}
for index in list_macbeth:
    word_store[index] = word_store.get(index, 0) + 1 #Counts each word in the dictionary, and adds the word (key) and value (number/count) to the empty dictionary word_store
    
sorted[word_store]
word_store
# Sort words by counts in descending order
# Create Bar Graph
# Include descriptive titles and labels
25/55:
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline


# Your code here

# Pseudo-code outline
astericks = macbeth.replace('*','')
backslashr = astericks.replace('\r','')
backslashn = backslashr.replace('\n','')
period = backslashn.replace('.','')
colon = period.replace('"/"',"")

# Split the transcript into words
# Create a dictionary
# Iterate through the text of Macbeth
list_macbeth = [index.strip() for index in colon.split(' ')] #remove whitespace and separate words by comma


# Update word counts
word_store = {}
for index in list_macbeth:
    word_store[index] = word_store.get(index, 0) + 1 #Counts each word in the dictionary, and adds the word (key) and value (number/count) to the empty dictionary word_store
    
sorted[word_store, key=lambda index: index[1]]
word_store
# Sort words by counts in descending order
# Create Bar Graph
# Include descriptive titles and labels
25/56:
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline


# Your code here

# Pseudo-code outline
astericks = macbeth.replace('*','')
backslashr = astericks.replace('\r','')
backslashn = backslashr.replace('\n','')
period = backslashn.replace('.','')
colon = period.replace('"/"',"")

# Split the transcript into words
# Create a dictionary
# Iterate through the text of Macbeth
list_macbeth = [index.strip() for index in colon.split(' ')] #remove whitespace and separate words by comma


# Update word counts
word_store = {}
for index in list_macbeth:
    word_store[index] = word_store.get(index, 0) + 1 #Counts each word in the dictionary, and adds the word (key) and value (number/count) to the empty dictionary word_store
    
sorted_tups = sorted(word_store.items(), key=lambda X: x[1])

# Sort words by counts in descending order
# Create Bar Graph
# Include descriptive titles and labels
25/57:
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline


# Your code here

# Pseudo-code outline
astericks = macbeth.replace('*','')
backslashr = astericks.replace('\r','')
backslashn = backslashr.replace('\n','')
period = backslashn.replace('.','')
colon = period.replace('"/"',"")

# Split the transcript into words
# Create a dictionary
# Iterate through the text of Macbeth
list_macbeth = [index.strip() for index in colon.split(' ')] #remove whitespace and separate words by comma


# Update word counts
word_store = {}
for index in list_macbeth:
    word_store[index] = word_store.get(index, 0) + 1 #Counts each word in the dictionary, and adds the word (key) and value (number/count) to the empty dictionary word_store
    
sorted_tups = sorted(word_store.items(), key=lambda word_store: word_store[1])

# Sort words by counts in descending order
# Create Bar Graph
# Include descriptive titles and labels
25/58:
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline


# Your code here

# Pseudo-code outline
astericks = macbeth.replace('*','')
backslashr = astericks.replace('\r','')
backslashn = backslashr.replace('\n','')
period = backslashn.replace('.','')
colon = period.replace('"/"',"")

# Split the transcript into words
# Create a dictionary
# Iterate through the text of Macbeth
list_macbeth = [index.strip() for index in colon.split(' ')] #remove whitespace and separate words by comma


# Update word counts
word_store = {}
for index in list_macbeth:
    word_store[index] = word_store.get(index, 0) + 1 #Counts each word in the dictionary, and adds the word (key) and value (number/count) to the empty dictionary word_store
    
sorted_tups = sorted(word_store.items(), key=lambda word_store: word_store[1])
sorted_tups

# Sort words by counts in descending order
# Create Bar Graph
# Include descriptive titles and labels
25/59:
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline


# Your code here

# Pseudo-code outline
astericks = macbeth.replace('*','')
backslashr = astericks.replace('\r','')
backslashn = backslashr.replace('\n','')
period = backslashn.replace('.','')
colon = period.replace('"/"',"")

# Split the transcript into words
# Create a dictionary
# Iterate through the text of Macbeth
list_macbeth = [index.strip() for index in colon.split(' ')] #remove whitespace and separate words by comma


# Update word counts
word_store = {}
for index in list_macbeth:
    word_store[index] = word_store.get(index, 0) + 1 #Counts each word in the dictionary, and adds the word (key) and value (number/count) to the empty dictionary word_store

word_store
#sorted_tups = sorted(word_store.items(), key=lambda word_store: word_store[1])
#sorted_tups

# Sort words by counts in descending order
# Create Bar Graph
# Include descriptive titles and labels
25/60:
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline


# Your code here

# Pseudo-code outline
astericks = macbeth.replace('*','')
backslashr = astericks.replace('\r','')
backslashn = backslashr.replace('\n','')
period = backslashn.replace('.','')
colon = period.replace('"/"',"")

# Split the transcript into words
# Create a dictionary
# Iterate through the text of Macbeth
list_macbeth = [index.strip() for index in colon.split(' ')] #remove whitespace and separate words by comma


# Update word counts
word_store = {}
for index in list_macbeth:
    word_store[index] = word_store.get(index, 0) + 1 #Counts each word in the dictionary, and adds the word (key) and value (number/count) to the empty dictionary word_store

word_store
sorted_tups = sorted(word_store.items(), key=lambda word_store: word_store[1])
sorted_tups

# Sort words by counts in descending order
# Create Bar Graph
# Include descriptive titles and labels
25/61:
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline


# Your code here

# Pseudo-code outline
astericks = macbeth.replace('*','')
backslashr = astericks.replace('\r','')
backslashn = backslashr.replace('\n','')
period = backslashn.replace('.','')
colon = period.replace('"/"',"")

# Split the transcript into words
# Create a dictionary
# Iterate through the text of Macbeth
list_macbeth = [index.strip() for index in colon.split(' ')] #remove whitespace and separate words by comma


# Update word counts
word_store = {}
for index in list_macbeth:
    word_store[index] = word_store.get(index, 0) + 1 #Counts each word in the dictionary, and adds the word (key) and value (number/count) to the empty dictionary word_store

    sorted_tups = sorted(word_store.items(), key=lambda word_store: word_store[1])
sorted_tups

# Sort words by counts in descending order
# Create Bar Graph
# Include descriptive titles and labels
25/62:
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline


# Your code here

# Pseudo-code outline
astericks = macbeth.replace('*','')
backslashr = astericks.replace('\r','')
backslashn = backslashr.replace('\n','')
period = backslashn.replace('.','')
colon = period.replace('"/"',"")

# Split the transcript into words
# Create a dictionary
# Iterate through the text of Macbeth
list_macbeth = [index.strip() for index in colon.split(' ')] #remove whitespace and separate words by comma


# Update word counts
word_store = {}
for index in list_macbeth:
    word_store[index] = word_store.get(index, 0) + 1 #Counts each word in the dictionary, and adds the word (key) and value (number/count) to the empty dictionary word_store

    sorted_tups = sorted(word_store.items(), key=lambda word_store: word_store[1])
sorted_tups

# Sort words by counts in descending order
# Create Bar Graph
# Include descriptive titles and labels
25/63:
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline


# Your code here

# Pseudo-code outline
astericks = macbeth.replace('*','')
backslashr = astericks.replace('\r','')
backslashn = backslashr.replace('\n','')
period = backslashn.replace('.','')
colon = period.replace('"/"',"")

# Split the transcript into words
# Create a dictionary
# Iterate through the text of Macbeth
list_macbeth = [index.strip() for index in colon.split(' ')] #remove whitespace and separate words by comma


# Update word counts
word_store = {}
for index in list_macbeth:
    word_store[index] = word_store.get(index, 0) + 1 #Counts each word in the dictionary, and adds the word (key) and value (number/count) to the empty dictionary word_store

    sorted_tups = sorted(word_store.items(), key=lambda word_store: word_store[1])
print(sorted_tups)

# Sort words by counts in descending order
# Create Bar Graph
# Include descriptive titles and labels
25/64:
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline


# Your code here

# Pseudo-code outline
astericks = macbeth.replace('*','')
backslashr = astericks.replace('\r','')
backslashn = backslashr.replace('\n','')
period = backslashn.replace('.','')
colon = period.replace('"/"',"")

# Split the transcript into words
# Create a dictionary
# Iterate through the text of Macbeth
list_macbeth = [index.strip() for index in colon.split(' ')] #remove whitespace and separate words by comma


# Update word counts
word_store = {}
for index in list_macbeth:
    word_store[index] = word_store.get(index, 0) + 1 #Counts each word in the dictionary, and adds the word (key) and value (number/count) to the empty dictionary word_store

sorted_tups = sorted(word_store.items(), key=lambda word_store: word_store[1])
print(sorted_tups)

# Sort words by counts in descending order
# Create Bar Graph
# Include descriptive titles and labels
25/65:
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline


# Your code here

# Pseudo-code outline
astericks = macbeth.replace('*','')
backslashr = astericks.replace('\r','')
backslashn = backslashr.replace('\n','')
period = backslashn.replace('.','')
colon = period.replace('"/"',"")

# Split the transcript into words
# Create a dictionary
# Iterate through the text of Macbeth
list_macbeth = [index.strip() for index in colon.split(' ')] #remove whitespace and separate words by comma


# Update word counts
word_store = {}
for index in list_macbeth:
    word_store[index] = word_store.get(index, 0) + 1 #Counts each word in the dictionary, and adds the word (key) and value (number/count) to the empty dictionary word_store

sorted_tups = sorted(word_store.items(), key=lambda word_store: word_store[1])
print(sorted_tups)

# Sort words by counts in descending order
# Create Bar Graph
# Include descriptive titles and labels
25/66:
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline


# Your code here

# Pseudo-code outline
astericks = macbeth.replace('*','')
backslashr = astericks.replace('\r','')
backslashn = backslashr.replace('\n','')
period = backslashn.replace('.','')
colon = period.replace('"/"',"")

# Split the transcript into words
# Create a dictionary
# Iterate through the text of Macbeth
list_macbeth = [index.strip() for index in colon.split(' ')] #remove whitespace and separate words by comma


# Update word counts
word_store = {}
for index in list_macbeth:
    word_store[index] = word_store.get(index, 0) + 1 #Counts each word in the dictionary, and adds the word (key) and value (number/count) to the empty dictionary word_store

sorted_tups = sorted(word_store.items(), key=lambda word_store: word_store[1])
sorted_tups

# Sort words by counts in descending order
# Create Bar Graph
# Include descriptive titles and labels
25/67:
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline


# Your code here

# Pseudo-code outline
astericks = macbeth.replace('*','')
backslashr = astericks.replace('\r','')
backslashn = backslashr.replace('\n','')
period = backslashn.replace('.','')
colon = period.replace('"/"',"")

# Split the transcript into words
# Create a dictionary
# Iterate through the text of Macbeth
list_macbeth = [index.strip() for index in colon.split(' ')] #remove whitespace and separate words by comma


# Update word counts
word_store = {}
for index in list_macbeth:
    word_store[index] = word_store.get(index, 0) + 1 #Counts each word in the dictionary, and adds the word (key) and value (number/count) to the empty dictionary word_store


# Sort words by counts in descending order
sorted_tups = sorted(word_store.items(), key=lambda word_store: word_store[-1])
sorted_tups
# Create Bar Graph
# Include descriptive titles and labels
25/68:
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline


# Your code here

# Pseudo-code outline
astericks = macbeth.replace('*','')
backslashr = astericks.replace('\r','')
backslashn = backslashr.replace('\n','')
period = backslashn.replace('.','')
colon = period.replace('"/"',"")

# Split the transcript into words
# Create a dictionary
# Iterate through the text of Macbeth
list_macbeth = [index.strip() for index in colon.split(' ')] #remove whitespace and separate words by comma


# Update word counts
word_store = {}
for index in list_macbeth:
    word_store[index] = word_store.get(index, 0) + 1 #Counts each word in the dictionary, and adds the word (key) and value (number/count) to the empty dictionary word_store


# Sort words by counts in descending order
    sorted_tups = sorted(word_store.items(), key=lambda word_store: word_store[-1])
sorted_tups
# Create Bar Graph
# Include descriptive titles and labels
25/69:
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline


# Your code here

# Pseudo-code outline
astericks = macbeth.replace('*','')
backslashr = astericks.replace('\r','')
backslashn = backslashr.replace('\n','')
period = backslashn.replace('.','')
colon = period.replace('"/"',"")

# Split the transcript into words
# Create a dictionary
# Iterate through the text of Macbeth
list_macbeth = [index.strip() for index in colon.split(' ')] #remove whitespace and separate words by comma

# Update word counts
word_store = {}
for index in list_macbeth:
    word_store[index] = word_store.get(index, 0) + 1 #Counts each word in the dictionary, and adds the word (key) and value (number/count) to the empty dictionary word_store


# Sort words by counts in descending order
sorted_tups = sorted((value, key) for (key,value) in word_store.items())
sorted_tups
# Create Bar Graph
# Include descriptive titles and labels
25/70:
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline


# Your code here

# Pseudo-code outline
astericks = macbeth.replace('*','')
backslashr = astericks.replace('\r','')
backslashn = backslashr.replace('\n','')
period = backslashn.replace('.','')
colon = period.replace('"/"',"")

# Split the transcript into words
# Create a dictionary
# Iterate through the text of Macbeth
list_macbeth = [index.strip() for index in colon.split(' ')] #remove whitespace and separate words by comma

# Update word counts
word_store = {}
for index in list_macbeth:
    word_store[index] = word_store.get(index, 0) + 1 #Counts each word in the dictionary, and adds the word (key) and value (number/count) to the empty dictionary word_store


# Sort words by counts in descending order
word_list = list(word_store)
word_list
#sorted_tups = sorted((value, key) for (key,value) in word_store.items())
#sorted_tups[-25]

# Create Bar Graph
# Include descriptive titles and labels
25/71:
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline


# Your code here

# Pseudo-code outline
astericks = macbeth.replace('*','')
backslashr = astericks.replace('\r','')
backslashn = backslashr.replace('\n','')
period = backslashn.replace('.','')
colon = period.replace('"/"',"")

# Split the transcript into words
# Create a dictionary
# Iterate through the text of Macbeth
list_macbeth = [index.strip() for index in colon.split(' ')] #remove whitespace and separate words by comma

# Update word counts
word_store = {}
for index in list_macbeth:
    word_store[index] = word_store.get(index, 0) + 1 #Counts each word in the dictionary, and adds the word (key) and value (number/count) to the empty dictionary word_store


# Sort words by counts in descending order
word_list = list(word_store.items())
word_list
#sorted_tups = sorted((value, key) for (key,value) in word_store.items())
#sorted_tups[-25]

# Create Bar Graph
# Include descriptive titles and labels
25/72:
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline


# Your code here

# Pseudo-code outline
astericks = macbeth.replace('*','')
backslashr = astericks.replace('\r','')
backslashn = backslashr.replace('\n','')
period = backslashn.replace('.','')
colon = period.replace('"/"',"")

# Split the transcript into words
# Create a dictionary
# Iterate through the text of Macbeth
list_macbeth = [index.strip() for index in colon.split(' ')] #remove whitespace and separate words by comma

# Update word counts
word_store = {}
for index in list_macbeth:
    word_store[index] = word_store.get(index, 0) + 1 #Counts each word in the dictionary, and adds the word (key) and value (number/count) to the empty dictionary word_store


# Sort words by counts in descending order
word_list = list(word_store.items())
word_list.sort(reverse=True)
word_list
#sorted_tups = sorted((value, key) for (key,value) in word_store.items())
#sorted_tups[-25]

# Create Bar Graph
# Include descriptive titles and labels
25/73:
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline


# Your code here

# Pseudo-code outline
astericks = macbeth.replace('*','')
backslashr = astericks.replace('\r','')
backslashn = backslashr.replace('\n','')
period = backslashn.replace('.','')
colon = period.replace('"/"',"")

# Split the transcript into words
# Create a dictionary
# Iterate through the text of Macbeth
list_macbeth = [index.strip() for index in colon.split(' ')] #remove whitespace and separate words by comma

# Update word counts
word_store = {}
for index in list_macbeth:
    word_store[index] = word_store.get(index, 0) + 1 #Counts each word in the dictionary, and adds the word (key) and value (number/count) to the empty dictionary word_store


# Sort words by counts in descending order
word_list = list(word_store.items())
word_list.sort(reverse=True)
#sorted_tups = sorted((value, key) for (key,value) in word_store.items())
#sorted_tups[-25]

# Create Bar Graph
# Include descriptive titles and labels
25/74:
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline


# Your code here

# Pseudo-code outline
astericks = macbeth.replace('*','')
backslashr = astericks.replace('\r','')
backslashn = backslashr.replace('\n','')
period = backslashn.replace('.','')
colon = period.replace('"/"',"")

# Split the transcript into words
# Create a dictionary
# Iterate through the text of Macbeth
list_macbeth = [index.strip() for index in colon.split(' ')] #remove whitespace and separate words by comma

# Update word counts
word_store = {}
for index in list_macbeth:
    word_store[index] = word_store.get(index, 0) + 1 #Counts each word in the dictionary, and adds the word (key) and value (number/count) to the empty dictionary word_store


# Sort words by counts in descending order
word_list = list(word_store.items())
sorted_list = word_list.sort(reverse=True)
sorted_list
#sorted_tups = sorted((value, key) for (key,value) in word_store.items())
#sorted_tups[-25]

# Create Bar Graph
# Include descriptive titles and labels
25/75:
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline


# Your code here

# Pseudo-code outline
astericks = macbeth.replace('*','')
backslashr = astericks.replace('\r','')
backslashn = backslashr.replace('\n','')
period = backslashn.replace('.','')
colon = period.replace('"/"',"")

# Split the transcript into words
# Create a dictionary
# Iterate through the text of Macbeth
list_macbeth = [index.strip() for index in colon.split(' ')] #remove whitespace and separate words by comma

# Update word counts
word_store = {}
for index in list_macbeth:
    word_store[index] = word_store.get(index, 0) + 1 #Counts each word in the dictionary, and adds the word (key) and value (number/count) to the empty dictionary word_store


# Sort words by counts in descending order
word_list = list(word_store.items())
sorted_list = word_list.sort(reverse=True)
sorted_list
#sorted_tups = sorted((value, key) for (key,value) in word_store.items())
#sorted_tups[-25]

# Create Bar Graph
# Include descriptive titles and labels
25/76:
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline


# Your code here

# Pseudo-code outline
astericks = macbeth.replace('*','')
backslashr = astericks.replace('\r','')
backslashn = backslashr.replace('\n','')
period = backslashn.replace('.','')
colon = period.replace('"/"',"")

# Split the transcript into words
# Create a dictionary
# Iterate through the text of Macbeth
list_macbeth = [index.strip() for index in colon.split(' ')] #remove whitespace and separate words by comma

# Update word counts
word_store = {}
for index in list_macbeth:
    word_store[index] = word_store.get(index, 0) + 1 #Counts each word in the dictionary, and adds the word (key) and value (number/count) to the empty dictionary word_store


# Sort words by counts in descending order
word_list = list(word_store.items())
word_list.sort(reverse=True)
#sorted_tups = sorted((value, key) for (key,value) in word_store.items())
#sorted_tups[-25]

# Create Bar Graph
# Include descriptive titles and labels
25/77:
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline


# Your code here

# Pseudo-code outline
astericks = macbeth.replace('*','')
backslashr = astericks.replace('\r','')
backslashn = backslashr.replace('\n','')
period = backslashn.replace('.','')
colon = period.replace('"/"',"")

# Split the transcript into words
# Create a dictionary
# Iterate through the text of Macbeth
list_macbeth = [index.strip() for index in colon.split(' ')] #remove whitespace and separate words by comma

# Update word counts
word_store = {}
for index in list_macbeth:
    word_store[index] = word_store.get(index, 0) + 1 #Counts each word in the dictionary, and adds the word (key) and value (number/count) to the empty dictionary word_store


# Sort words by counts in descending order
word_list = list(word_store.items()) #convert dict to list
word_list.sort(reverse=True) #sort list in descending order
print(word_list)


# Create Bar Graph
# Include descriptive titles and labels
25/78:
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline


# Your code here

# Pseudo-code outline
astericks = macbeth.replace('*','')
backslashr = astericks.replace('\r','')
backslashn = backslashr.replace('\n','')
period = backslashn.replace('.','')
colon = period.replace('"/"',"")

# Split the transcript into words
# Create a dictionary
# Iterate through the text of Macbeth
list_macbeth = [index.strip() for index in colon.split(' ')] #remove whitespace and separate words by comma

# Update word counts
word_store = {}
for index in list_macbeth:
    word_store[index] = word_store.get(index, 0) + 1 #Counts each word in the dictionary, and adds the word (key) and value (number/count) to the empty dictionary word_store


# Sort words by counts in descending order
word_list = list(word_store.items()) #convert dict to list
word_list[1].sort(reverse=True) #sort list in descending order
print(word_list)


# Create Bar Graph
# Include descriptive titles and labels
25/79:
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline


# Your code here

# Pseudo-code outline
astericks = macbeth.replace('*','')
backslashr = astericks.replace('\r','')
backslashn = backslashr.replace('\n','')
period = backslashn.replace('.','')
colon = period.replace('"/"',"")

# Split the transcript into words
# Create a dictionary
# Iterate through the text of Macbeth
list_macbeth = [index.strip() for index in colon.split(' ')] #remove whitespace and separate words by comma

# Update word counts
word_store = {}
for index in list_macbeth:
    word_store[index] = word_store.get(index, 0) + 1 #Counts each word in the dictionary, and adds the word (key) and value (number/count) to the empty dictionary word_store


# Sort words by counts in descending order
word_list = list(word_store.items()) #convert dict to list
word_list.sort(reverse=True) #sort list in descending order
print(word_list)


# Create Bar Graph
# Include descriptive titles and labels
25/80:
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline


# Your code here

# Pseudo-code outline
astericks = macbeth.replace('*','')
backslashr = astericks.replace('\r','')
backslashn = backslashr.replace('\n','')
period = backslashn.replace('.','')
colon = period.replace('"/"',"")

# Split the transcript into words
# Create a dictionary
# Iterate through the text of Macbeth
list_macbeth = [index.strip() for index in colon.split(' ')] #remove whitespace and separate words by comma

# Update word counts
word_store = {}
for index in list_macbeth:
    word_store[index] = word_store.get(index, 0) + 1 #Counts each word in the dictionary, and adds the word (key) and value (number/count) to the empty dictionary word_store


# Sort words by counts in descending order
word_list = list(word_store.items()) #convert dict to list



# Create Bar Graph
# Include descriptive titles and labels
25/81:
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline


# Your code here

# Pseudo-code outline
astericks = macbeth.replace('*','')
backslashr = astericks.replace('\r','')
backslashn = backslashr.replace('\n','')
period = backslashn.replace('.','')
colon = period.replace('"/"',"")

# Split the transcript into words
# Create a dictionary
# Iterate through the text of Macbeth
list_macbeth = [index.strip() for index in colon.split(' ')] #remove whitespace and separate words by comma

# Update word counts
word_store = {}
for index in list_macbeth:
    word_store[index] = word_store.get(index, 0) + 1 #Counts each word in the dictionary, and adds the word (key) and value (number/count) to the empty dictionary word_store


# Sort words by counts in descending order
word_list = list(word_store.items())
word_list #convert dict to list



# Create Bar Graph
# Include descriptive titles and labels
25/82:
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline


# Your code here

# Pseudo-code outline
astericks = macbeth.replace('*','')
backslashr = astericks.replace('\r','')
backslashn = backslashr.replace('\n','')
period = backslashn.replace('.','')
colon = period.replace('"/"',"")

# Split the transcript into words
# Create a dictionary
# Iterate through the text of Macbeth
list_macbeth = [index.strip() for index in colon.split(' ')] #remove whitespace and separate words by comma

# Update word counts
word_store = {}
for index in list_macbeth:
    word_store[index] = word_store.get(index, 0) + 1 #Counts each word in the dictionary, and adds the word (key) and value (number/count) to the empty dictionary word_store


# Sort words by counts in descending order
word_list = list(word_store.items())
word_list #convert dict to list
word_list.sort() #sort list in descending order
print(word_list)


# Create Bar Graph
# Include descriptive titles and labels
25/83:
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline


# Your code here

# Pseudo-code outline
astericks = macbeth.replace('*','')
backslashr = astericks.replace('\r','')
backslashn = backslashr.replace('\n','')
period = backslashn.replace('.','')
colon = period.replace('"/"',"")

# Split the transcript into words
# Create a dictionary
# Iterate through the text of Macbeth
list_macbeth = [index.strip() for index in colon.split(' ')] #remove whitespace and separate words by comma

# Update word counts
word_store = {}
for index in list_macbeth:
    word_store[index] = word_store.get(index, 0) + 1 #Counts each word in the dictionary, and adds the word (key) and value (number/count) to the empty dictionary word_store


# Sort words by counts in descending order
word_list = list(word_store.items()) #convert dict to list
word_list.sort() #sort list in descending order
print(word_list)


# Create Bar Graph
# Include descriptive titles and labels
25/84:
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline


# Your code here

# Pseudo-code outline
astericks = macbeth.replace('*','')
backslashr = astericks.replace('\r','')
backslashn = backslashr.replace('\n','')
period = backslashn.replace('.','')
colon = period.replace('"/"',"")

# Split the transcript into words
# Create a dictionary
# Iterate through the text of Macbeth
list_macbeth = [index.strip() for index in colon.split(' ')] #remove whitespace and separate words by comma

# Update word counts
word_store = {}
for index in list_macbeth:
    word_store[index] = word_store.get(index, 0) + 1 #Counts each word in the dictionary, and adds the word (key) and value (number/count) to the empty dictionary word_store


# Sort words by counts in descending order
word_list = list(word_store.items()) #convert dict to list
word_list[1].sort() #sort list in descending order
print(word_list)


# Create Bar Graph
# Include descriptive titles and labels
25/85:
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline


# Your code here

# Pseudo-code outline
astericks = macbeth.replace('*','')
backslashr = astericks.replace('\r','')
backslashn = backslashr.replace('\n','')
period = backslashn.replace('.','')
colon = period.replace('"/"',"")

# Split the transcript into words
# Create a dictionary
# Iterate through the text of Macbeth
list_macbeth = [index.strip() for index in colon.split(' ')] #remove whitespace and separate words by comma

# Update word counts
word_store = {}
for index in list_macbeth:
    word_store[index] = word_store.get(index, 0) + 1 #Counts each word in the dictionary, and adds the word (key) and value (number/count) to the empty dictionary word_store


# Sort words by counts in descending order
sorted_word = dict(sorted(word_store.items(), key = operator.itemgetter(1), reverse=True))
#word_list = list(word_store.items()) #convert dict to list
#word_list.sort() #sort list in descending order
#print(word_list)


# Create Bar Graph
# Include descriptive titles and labels
25/86:
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline


# Your code here

# Pseudo-code outline
astericks = macbeth.replace('*','')
backslashr = astericks.replace('\r','')
backslashn = backslashr.replace('\n','')
period = backslashn.replace('.','')
colon = period.replace('"/"',"")

# Split the transcript into words
# Create a dictionary
# Iterate through the text of Macbeth
list_macbeth = [index.strip() for index in colon.split(' ')] #remove whitespace and separate words by comma

# Update word counts
word_store = {}
for index in list_macbeth:
    word_store[index] = word_store.get(index, 0) + 1 #Counts each word in the dictionary, and adds the word (key) and value (number/count) to the empty dictionary word_store


# Sort words by counts in descending order
import operator
sorted_word = dict(sorted(word_store.items(), key = operator.itemgetter(1), reverse=True))
#word_list = list(word_store.items()) #convert dict to list
#word_list.sort() #sort list in descending order
#print(word_list)


# Create Bar Graph
# Include descriptive titles and labels
25/87:
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline


# Your code here

# Pseudo-code outline
astericks = macbeth.replace('*','')
backslashr = astericks.replace('\r','')
backslashn = backslashr.replace('\n','')
period = backslashn.replace('.','')
colon = period.replace('"/"',"")

# Split the transcript into words
# Create a dictionary
# Iterate through the text of Macbeth
list_macbeth = [index.strip() for index in colon.split(' ')] #remove whitespace and separate words by comma

# Update word counts
word_store = {}
for index in list_macbeth:
    word_store[index] = word_store.get(index, 0) + 1 #Counts each word in the dictionary, and adds the word (key) and value (number/count) to the empty dictionary word_store


# Sort words by counts in descending order
import operator
sorted_word = dict(sorted(word_store.items(), key = operator.itemgetter(1), reverse=True))
print(sorted_word)
#word_list = list(word_store.items()) #convert dict to list
#word_list.sort() #sort list in descending order
#print(word_list)


# Create Bar Graph
# Include descriptive titles and labels
25/88:
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline


# Your code here

# Pseudo-code outline
astericks = macbeth.replace('*','')
backslashr = astericks.replace('\r','')
backslashn = backslashr.replace('\n','')
period = backslashn.replace('.','')
colon = period.replace('"/"',"")

# Split the transcript into words
# Create a dictionary
# Iterate through the text of Macbeth
list_macbeth = [index.strip() for index in colon.split(' ')] #remove whitespace and separate words by comma

# Update word counts
word_store = {}
for index in list_macbeth:
    word_store[index] = word_store.get(index, 0) + 1 #Counts each word in the dictionary, and adds the word (key) and value (number/count) to the empty dictionary word_store


# Sort words by counts in descending order
import operator
sorted_word = dict(sorted(word_store.items(), key = operator.itemgetter(1), reverse=True))
final_count = sorted_word[0:26]


# Create Bar Graph
# Include descriptive titles and labels
25/89:
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline


# Your code here

# Pseudo-code outline
astericks = macbeth.replace('*','')
backslashr = astericks.replace('\r','')
backslashn = backslashr.replace('\n','')
period = backslashn.replace('.','')
colon = period.replace('"/"',"")

# Split the transcript into words
# Create a dictionary
# Iterate through the text of Macbeth
list_macbeth = [index.strip() for index in colon.split(' ')] #remove whitespace and separate words by comma

# Update word counts
word_store = {}
for index in list_macbeth:
    word_store[index] = word_store.get(index, 0) + 1 #Counts each word in the dictionary, and adds the word (key) and value (number/count) to the empty dictionary word_store


# Sort words by counts in descending order
import operator
sorted_word = dict(sorted(word_store.items(), key = operator.itemgetter(1), reverse=True))
final_count = sorted_word{0:26}


# Create Bar Graph
# Include descriptive titles and labels
25/90:
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline


# Your code here

# Pseudo-code outline
astericks = macbeth.replace('*','')
backslashr = astericks.replace('\r','')
backslashn = backslashr.replace('\n','')
period = backslashn.replace('.','')
colon = period.replace('"/"',"")

# Split the transcript into words
# Create a dictionary
# Iterate through the text of Macbeth
list_macbeth = [index.strip() for index in colon.split(' ')] #remove whitespace and separate words by comma

# Update word counts
word_store = {}
for index in list_macbeth:
    word_store[index] = word_store.get(index, 0) + 1 #Counts each word in the dictionary, and adds the word (key) and value (number/count) to the empty dictionary word_store


# Sort words by counts in descending order
import operator
sorted_word = dict(sorted(word_store.items(), key = operator.itemgetter(1), reverse=True))
final_count = sorted_word(0:26)


# Create Bar Graph
# Include descriptive titles and labels
25/91:
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline


# Your code here

# Pseudo-code outline
astericks = macbeth.replace('*','')
backslashr = astericks.replace('\r','')
backslashn = backslashr.replace('\n','')
period = backslashn.replace('.','')
colon = period.replace('"/"',"")

# Split the transcript into words
# Create a dictionary
# Iterate through the text of Macbeth
list_macbeth = [index.strip() for index in colon.split(' ')] #remove whitespace and separate words by comma

# Update word counts
word_store = {}
for index in list_macbeth:
    word_store[index] = word_store.get(index, 0) + 1 #Counts each word in the dictionary, and adds the word (key) and value (number/count) to the empty dictionary word_store


# Sort words by counts in descending order
import operator
sorted_word = dict(sorted(word_store.items(), key = operator.itemgetter(1), reverse=True)) #sorts the dictionary in ascending order by value
final_count = sorted_word[25]


# Create Bar Graph
# Include descriptive titles and labels
25/92:
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline


# Your code here

# Pseudo-code outline
astericks = macbeth.replace('*','')
backslashr = astericks.replace('\r','')
backslashn = backslashr.replace('\n','')
period = backslashn.replace('.','')
colon = period.replace('"/"',"")

# Split the transcript into words
# Create a dictionary
# Iterate through the text of Macbeth
list_macbeth = [index.strip() for index in colon.split(' ')] #remove whitespace and separate words by comma

# Update word counts
word_store = {}
for index in list_macbeth:
    word_store[index] = word_store.get(index, 0) + 1 #Counts each word in the dictionary, and adds the word (key) and value (number/count) to the empty dictionary word_store


# Sort words by counts in descending order
import operator
sorted_word = dict(sorted(word_store.items(), key = operator.itemgetter(1), reverse=True)) #sorts the dictionary in ascending order by value
final_count = dict(list(sorted_word.items())[0:26])
print(final_count)


# Create Bar Graph
# Include descriptive titles and labels
25/93:
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline


# Your code here

# Pseudo-code outline
astericks = macbeth.replace('*','')
backslashr = astericks.replace('\r','')
backslashn = backslashr.replace('\n','')
period = backslashn.replace('.','')
colon = period.replace('"/"',"")

# Split the transcript into words
# Create a dictionary
# Iterate through the text of Macbeth
list_macbeth = [index.strip() for index in colon.split(' ')] #remove whitespace and separate words by comma

# Update word counts
word_store = {}
for index in list_macbeth:
    word_store[index] = word_store.get(index, 0) + 1 #Counts each word in the dictionary, and adds the word (key) and value (number/count) to the empty dictionary word_store


# Sort words by counts in descending order
import operator
sorted_word = dict(sorted(word_store.items(), key = operator.itemgetter(1), reverse=True)) #sorts the dictionary in ascending order by value
final_count = dict(list(sorted_word.items())[1:27]) #gets the first 25 elements of the dictionary
print(final_count)

# Create Bar Graph
x = final_count[1]
# Include descriptive titles and labels
25/94:
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline


# Your code here

# Pseudo-code outline
astericks = macbeth.replace('*','')
backslashr = astericks.replace('\r','')
backslashn = backslashr.replace('\n','')
period = backslashn.replace('.','')
colon = period.replace('"/"',"")

# Split the transcript into words
# Create a dictionary
# Iterate through the text of Macbeth
list_macbeth = [index.strip() for index in colon.split(' ')] #remove whitespace and separate words by comma

# Update word counts
word_store = {}
for index in list_macbeth:
    word_store[index] = word_store.get(index, 0) + 1 #Counts each word in the dictionary, and adds the word (key) and value (number/count) to the empty dictionary word_store


# Sort words by counts in descending order
import operator
sorted_word = dict(sorted(word_store.items(), key = operator.itemgetter(1), reverse=True)) #sorts the dictionary in ascending order by value
final_count = dict(list(sorted_word.items())[1:27]) #gets the first 25 elements of the dictionary
print(final_count)

# Create Bar Graph

# Include descriptive titles and labels
25/95:
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline


# Your code here

# Pseudo-code outline
astericks = macbeth.replace('*','')
backslashr = astericks.replace('\r','')
backslashn = backslashr.replace('\n','')
period = backslashn.replace('.','')
colon = period.replace('"/"',"")

# Split the transcript into words
# Create a dictionary
# Iterate through the text of Macbeth
list_macbeth = [index.strip() for index in colon.split(' ')] #remove whitespace and separate words by comma

# Update word counts
word_store = {}
for index in list_macbeth:
    word_store[index] = word_store.get(index, 0) + 1 #Counts each word in the dictionary, and adds the word (key) and value (number/count) to the empty dictionary word_store


# Sort words by counts in descending order
import operator
sorted_word = dict(sorted(word_store.items(), key = operator.itemgetter(1), reverse=True)) #sorts the dictionary in ascending order by value
final_count = dict(list(sorted_word.items())[1:27]) #gets the first 25 elements of the dictionary
#print(final_count)

# Create Bar Graph
for i in final_count:
    
    x = final_count[i]
# Include descriptive titles and labels
25/96:
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline


# Your code here

# Pseudo-code outline
astericks = macbeth.replace('*','')
backslashr = astericks.replace('\r','')
backslashn = backslashr.replace('\n','')
period = backslashn.replace('.','')
colon = period.replace('"/"',"")

# Split the transcript into words
# Create a dictionary
# Iterate through the text of Macbeth
list_macbeth = [index.strip() for index in colon.split(' ')] #remove whitespace and separate words by comma

# Update word counts
word_store = {}
for index in list_macbeth:
    word_store[index] = word_store.get(index, 0) + 1 #Counts each word in the dictionary, and adds the word (key) and value (number/count) to the empty dictionary word_store


# Sort words by counts in descending order
import operator
sorted_word = dict(sorted(word_store.items(), key = operator.itemgetter(1), reverse=True)) #sorts the dictionary in ascending order by value
final_count = dict(list(sorted_word.items())[1:27]) #gets the first 25 elements of the dictionary
#print(final_count)

# Create Bar Graph
for i in final_count:
    
    x = final_count[i]
    x
# Include descriptive titles and labels
25/97:
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline


# Your code here

# Pseudo-code outline
astericks = macbeth.replace('*','')
backslashr = astericks.replace('\r','')
backslashn = backslashr.replace('\n','')
period = backslashn.replace('.','')
colon = period.replace('"/"',"")

# Split the transcript into words
# Create a dictionary
# Iterate through the text of Macbeth
list_macbeth = [index.strip() for index in colon.split(' ')] #remove whitespace and separate words by comma

# Update word counts
word_store = {}
for index in list_macbeth:
    word_store[index] = word_store.get(index, 0) + 1 #Counts each word in the dictionary, and adds the word (key) and value (number/count) to the empty dictionary word_store


# Sort words by counts in descending order
import operator
sorted_word = dict(sorted(word_store.items(), key = operator.itemgetter(1), reverse=True)) #sorts the dictionary in ascending order by value
final_count = dict(list(sorted_word.items())[1:27]) #gets the first 25 elements of the dictionary
#print(final_count)

# Create Bar Graph
for i in final_count:
    
    x = final_count[i]
print(x)
# Include descriptive titles and labels
25/98:
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline


# Your code here

# Pseudo-code outline
astericks = macbeth.replace('*','')
backslashr = astericks.replace('\r','')
backslashn = backslashr.replace('\n','')
period = backslashn.replace('.','')
colon = period.replace('"/"',"")

# Split the transcript into words
# Create a dictionary
# Iterate through the text of Macbeth
list_macbeth = [index.strip() for index in colon.split(' ')] #remove whitespace and separate words by comma

# Update word counts
word_store = {}
for index in list_macbeth:
    word_store[index] = word_store.get(index, 0) + 1 #Counts each word in the dictionary, and adds the word (key) and value (number/count) to the empty dictionary word_store


# Sort words by counts in descending order
import operator
sorted_word = dict(sorted(word_store.items(), key = operator.itemgetter(1), reverse=True)) #sorts the dictionary in ascending order by value
final_count = dict(list(sorted_word.items())[1:27]) #gets the first 25 elements of the dictionary
#print(final_count)

# Create Bar Graph
x=[]
for i in final_count:
    
    x.append(final_count[i])

# Include descriptive titles and labels
25/99:
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline


# Your code here

# Pseudo-code outline
astericks = macbeth.replace('*','')
backslashr = astericks.replace('\r','')
backslashn = backslashr.replace('\n','')
period = backslashn.replace('.','')
colon = period.replace('"/"',"")

# Split the transcript into words
# Create a dictionary
# Iterate through the text of Macbeth
list_macbeth = [index.strip() for index in colon.split(' ')] #remove whitespace and separate words by comma

# Update word counts
word_store = {}
for index in list_macbeth:
    word_store[index] = word_store.get(index, 0) + 1 #Counts each word in the dictionary, and adds the word (key) and value (number/count) to the empty dictionary word_store


# Sort words by counts in descending order
import operator
sorted_word = dict(sorted(word_store.items(), key = operator.itemgetter(1), reverse=True)) #sorts the dictionary in ascending order by value
final_count = dict(list(sorted_word.items())[1:27]) #gets the first 25 elements of the dictionary
#print(final_count)

# Create Bar Graph
x=[]
for i in final_count:
    
    x.append(final_count[i])
x

# Include descriptive titles and labels
25/100:
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline


# Your code here

# Pseudo-code outline
astericks = macbeth.replace('*','')
backslashr = astericks.replace('\r','')
backslashn = backslashr.replace('\n','')
period = backslashn.replace('.','')
colon = period.replace('"/"',"")

# Split the transcript into words
# Create a dictionary
# Iterate through the text of Macbeth
list_macbeth = [index.strip() for index in colon.split(' ')] #remove whitespace and separate words by comma

# Update word counts
word_store = {}
for index in list_macbeth:
    word_store[index] = word_store.get(index, 0) + 1 #Counts each word in the dictionary, and adds the word (key) and value (number/count) to the empty dictionary word_store


# Sort words by counts in descending order
import operator
sorted_word = dict(sorted(word_store.items(), key = operator.itemgetter(1), reverse=True)) #sorts the dictionary in ascending order by value
final_count = dict(list(sorted_word.items())[1:27]) #gets the first 25 elements of the dictionary
#print(final_count)

# Create Bar Graph
x=[]
for i in final_count:
    
    x.append(final_count[i][0])
x



# Include descriptive titles and labels
25/101:
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline


# Your code here

# Pseudo-code outline
astericks = macbeth.replace('*','')
backslashr = astericks.replace('\r','')
backslashn = backslashr.replace('\n','')
period = backslashn.replace('.','')
colon = period.replace('"/"',"")

# Split the transcript into words
# Create a dictionary
# Iterate through the text of Macbeth
list_macbeth = [index.strip() for index in colon.split(' ')] #remove whitespace and separate words by comma

# Update word counts
word_store = {}
for index in list_macbeth:
    word_store[index] = word_store.get(index, 0) + 1 #Counts each word in the dictionary, and adds the word (key) and value (number/count) to the empty dictionary word_store


# Sort words by counts in descending order
import operator
sorted_word = dict(sorted(word_store.items(), key = operator.itemgetter(1), reverse=True)) #sorts the dictionary in ascending order by value
final_count = dict(list(sorted_word.items())[1:27]) #gets the first 25 elements of the dictionary
#print(final_count)

# Create Bar Graph
x=[]
for i in final_count:
    
    x.append(final_count[i][1])
x



# Include descriptive titles and labels
25/102:
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline


# Your code here

# Pseudo-code outline
astericks = macbeth.replace('*','')
backslashr = astericks.replace('\r','')
backslashn = backslashr.replace('\n','')
period = backslashn.replace('.','')
colon = period.replace('"/"',"")

# Split the transcript into words
# Create a dictionary
# Iterate through the text of Macbeth
list_macbeth = [index.strip() for index in colon.split(' ')] #remove whitespace and separate words by comma

# Update word counts
word_store = {}
for index in list_macbeth:
    word_store[index] = word_store.get(index, 0) + 1 #Counts each word in the dictionary, and adds the word (key) and value (number/count) to the empty dictionary word_store


# Sort words by counts in descending order
import operator
sorted_word = dict(sorted(word_store.items(), key = operator.itemgetter(1), reverse=True)) #sorts the dictionary in ascending order by value
final_count = dict(list(sorted_word.items())[1:27]) #gets the first 25 elements of the dictionary
#print(final_count)

# Create Bar Graph
#x=[]



# Include descriptive titles and labels
25/103:
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline


# Your code here

# Pseudo-code outline
astericks = macbeth.replace('*','')
backslashr = astericks.replace('\r','')
backslashn = backslashr.replace('\n','')
period = backslashn.replace('.','')
colon = period.replace('"/"',"")

# Split the transcript into words
# Create a dictionary
# Iterate through the text of Macbeth
list_macbeth = [index.strip() for index in colon.split(' ')] #remove whitespace and separate words by comma

# Update word counts
word_store = {}
for index in list_macbeth:
    word_store[index] = word_store.get(index, 0) + 1 #Counts each word in the dictionary, and adds the word (key) and value (number/count) to the empty dictionary word_store


# Sort words by counts in descending order
import operator
sorted_word = dict(sorted(word_store.items(), key = operator.itemgetter(1), reverse=True)) #sorts the dictionary in ascending order by value
final_count = dict(list(sorted_word.items())[1:27]) #gets the first 25 elements of the dictionary
print(final_count)

# Create Bar Graph
#x=[]



# Include descriptive titles and labels
25/104:
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline


# Your code here

# Pseudo-code outline
astericks = macbeth.replace('*','')
backslashr = astericks.replace('\r','')
backslashn = backslashr.replace('\n','')
period = backslashn.replace('.','')
colon = period.replace('"/"',"")

# Split the transcript into words
# Create a dictionary
# Iterate through the text of Macbeth
list_macbeth = [index.strip() for index in colon.split(' ')] #remove whitespace and separate words by comma

# Update word counts
word_store = {}
for index in list_macbeth:
    word_store[index] = word_store.get(index, 0) + 1 #Counts each word in the dictionary, and adds the word (key) and value (number/count) to the empty dictionary word_store


# Sort words by counts in descending order
import operator
sorted_word = dict(sorted(word_store.items(), key = operator.itemgetter(1), reverse=True)) #sorts the dictionary in ascending order by value
final_count = dict(list(sorted_word.items())[1:27]) #gets the first 25 elements of the dictionary
print(final_count)

# Create Bar Graph
x = ['the','and','of', 'to', 'I', 'a', 'you','in', 'is', 'my', 'that', "not","with",'Macb', 'be', 'it', 'his', 'your', 'our', 'haue', 'this', 'for', 'me', 'he', 'will', 'are'] ]
y = [604, 412, 388, 359, 263, 244, 189, 186, 184, 168, 147, 143, 139, 137, 129, 129, 128, 122, 115, 106, 103, 96, 75, 72, 67, 66]

plt.figure(figsize=(10,6))
plt.bar(x,y,label = 'words vs counts')
plt.xlabel('Most Common Words')
plt.ylabel('Word Quantity')
plt.title('25 Most Common Words in MacBeth')
plt.legend()
plt.show()



# Include descriptive titles and labels
25/105:
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline


# Your code here

# Pseudo-code outline
astericks = macbeth.replace('*','')
backslashr = astericks.replace('\r','')
backslashn = backslashr.replace('\n','')
period = backslashn.replace('.','')
colon = period.replace('"/"',"")

# Split the transcript into words
# Create a dictionary
# Iterate through the text of Macbeth
list_macbeth = [index.strip() for index in colon.split(' ')] #remove whitespace and separate words by comma

# Update word counts
word_store = {}
for index in list_macbeth:
    word_store[index] = word_store.get(index, 0) + 1 #Counts each word in the dictionary, and adds the word (key) and value (number/count) to the empty dictionary word_store


# Sort words by counts in descending order
import operator
sorted_word = dict(sorted(word_store.items(), key = operator.itemgetter(1), reverse=True)) #sorts the dictionary in ascending order by value
final_count = dict(list(sorted_word.items())[1:27]) #gets the first 25 elements of the dictionary
print(final_count)

# Create Bar Graph
x = ['the','and','of', 'to', 'I', 'a', 'you','in', 'is', 'my', 'that', 'not','with','Macb', 'be', 'it', 'his', 'your', 'our', 'haue', 'this', 'for', 'me', 'he', 'will', 'are'] ]
y = [604, 412, 388, 359, 263, 244, 189, 186, 184, 168, 147, 143, 139, 137, 129, 129, 128, 122, 115, 106, 103, 96, 75, 72, 67, 66]

plt.figure(figsize=(10,6))
plt.bar(x,y,label = 'words vs counts')
plt.xlabel('Most Common Words')
plt.ylabel('Word Quantity')
plt.title('25 Most Common Words in MacBeth')
plt.legend()
plt.show()



# Include descriptive titles and labels
25/106:
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline


# Your code here

# Pseudo-code outline
astericks = macbeth.replace('*','')
backslashr = astericks.replace('\r','')
backslashn = backslashr.replace('\n','')
period = backslashn.replace('.','')
colon = period.replace('"/"',"")

# Split the transcript into words
# Create a dictionary
# Iterate through the text of Macbeth
list_macbeth = [index.strip() for index in colon.split(' ')] #remove whitespace and separate words by comma

# Update word counts
word_store = {}
for index in list_macbeth:
    word_store[index] = word_store.get(index, 0) + 1 #Counts each word in the dictionary, and adds the word (key) and value (number/count) to the empty dictionary word_store


# Sort words by counts in descending order
import operator
sorted_word = dict(sorted(word_store.items(), key = operator.itemgetter(1), reverse=True)) #sorts the dictionary in ascending order by value
final_count = dict(list(sorted_word.items())[1:27]) #gets the first 25 elements of the dictionary
print(final_count)

# Create Bar Graph
x = ['the','and','of', 'to', 'I', 'a', 'you','in', 'is', 'my', 'that', 'not','with','Macb', 'be', 'it', 'his', 'your', 'our', 'haue', 'this', 'for', 'me', 'he', 'will', 'are']
y = [604, 412, 388, 359, 263, 244, 189, 186, 184, 168, 147, 143, 139, 137, 129, 129, 128, 122, 115, 106, 103, 96, 75, 72, 67, 66]

plt.figure(figsize=(10,6))
plt.bar(x,y,label = 'words vs counts')
plt.xlabel('Most Common Words')
plt.ylabel('Word Quantity')
plt.title('25 Most Common Words in MacBeth')
plt.legend()
plt.show()



# Include descriptive titles and labels
31/1:
# Desired output: "HELLO, THERE"
yell_hello = "hello, there" 
yell_hello.upper()
31/2:
# Desired output: "psst, hey"
whisper_hey = "PSST, HEY" 
whisper_hey.lower.()
31/3:
# Desired output: "psst, hey"
whisper_hey = "PSST, HEY" 
whisper_hey.lower()
31/4:
# Desired output: "Learn. Love. Code"
flatiron_mantra = "LEARN. LOVE. CODE." 
flatiron_mantra.title()
31/5:
# Desired output: str
type_string = "i'm a string" 
type(type_string)
31/6:
# Desired output: list
type_list = ["i'm", "a", "list"] 
list(type_list)
31/7:
# Desired output: list
type_list = ["i'm", "a", "list"] 
type(type_list)
31/8:
# Desired output: 3
length_of_list = ["i'm", "a", "list"] 
len(length_of_list)
31/9:
# Desired output: "list"
longest_word_in_list = ["i'm", "a", "list"]
type(longest_word_in_list)
31/10:
# Desired output: 11
sum_of_numbers = [1, 2, 3, 5]
sum(sum_of_numbers)
31/11:
boolean_compare = True != True # False
boolean_compare2 = False == True # False
print(boolean_compare, boolean_compare2)
31/12:
number_compare = 10 == 10 # True
number_compare2 = -20 != 30 # True
number_compare3 = 4 == 5 # False
print(number_compare, number_compare2, number_compare3)
31/13:
string_compare = "stacy" == "STACY" # True
string_compare2 = "hey i love python!" == "hi love python" # False
string_compare3 = "this string is bigger than the other" != "that is true" # True
print(string_compare, string_compare2, string_compare3)
31/14:
string_compare = "stacy" != "STACY" # True
string_compare2 = "hey i love python!" == "hi love python" # False
string_compare3 = "this string is bigger than the other" != "that is true" # True
print(string_compare, string_compare2, string_compare3)
31/15:
list_compare = [0, 0, 0, 0] > [0, 0, 0] # True
list_compare2 = [1, 0, 0] >= [0, 0, 0] # True
list_compare3 = [0, 0, 0] <= [0, 0, 3] # False
list_compare4 = [0, 0, 3, 0] > [0, 0, 3] # True
list_compare5 = [0, 0, 4, 0] > [0, 0, 3] # False
print(list_compare, list_compare2, list_compare3, list_compare4, list_compare5)
31/16:
list_compare = [0, 0, 0, 0] > [0, 0, 0] # True
list_compare2 = [1, 0, 0] >= [0, 0, 0] # True
list_compare3 = [0, 0, 0] =< [0, 0, 3] # False
list_compare4 = [0, 0, 3, 0] > [0, 0, 3] # True
list_compare5 = [0, 0, 4, 0] > [0, 0, 3] # False
print(list_compare, list_compare2, list_compare3, list_compare4, list_compare5)
31/17:
list_compare = [0, 0, 0, 0] > [0, 0, 0] # True
list_compare2 = [1, 0, 0] >= [0, 0, 0] # True
list_compare3 = [0, 0, 0] >= [0, 0, 3] # False
list_compare4 = [0, 0, 3, 0] > [0, 0, 3] # True
list_compare5 = [0, 0, 4, 0] > [0, 0, 3] # False
print(list_compare, list_compare2, list_compare3, list_compare4, list_compare5)
31/18:
list_compare = [0, 0, 0, 0] > [0, 0, 0] # True
list_compare2 = [1, 0, 0] >= [0, 0, 0] # True
list_compare3 = [0, 0, 0] >= [0, 0, 3] # False
list_compare4 = [0, 0, 3, 0] > [0, 0, 3] # True
list_compare5 = [0, 0, 4, 0] < [0, 0, 3] # False
print(list_compare, list_compare2, list_compare3, list_compare4, list_compare5)
31/19:
logical_compare = 2 and [] # []
logical_compare2 = not [] # True
logical_compare3 = 0 and [] # 0
logical_compare4 = True and 2 # 2
logical_compare5 = 2 or 3 # 2
logical_compare6 = not True # False
logical_compare7 = False and 2 # False
print(logical_compare, logical_compare2, logical_compare3, logical_compare4,
      logical_compare5, logical_compare6, logical_compare7)
31/20:
a = []
b = a
identity_compare = {} is not {} # False
identity_compare2 = a is not b # True
identity_compare3 = b is not [] # True
identity_compare4 = 9 is 10 # True
identity_compare5 = "Same" is not "Same" # False
identity_compare6 = [1,3,4] is not [1,2,3] # False
print(identity_compare, identity_compare2, identity_compare3,
      identity_compare4, identity_compare5, identity_compare6)
31/21:
a = []
b = a
identity_compare = {} is {} # False
identity_compare2 = a is not b # True
identity_compare3 = b is not [] # True
identity_compare4 = 9 is 10 # True
identity_compare5 = "Same" is not "Same" # False
identity_compare6 = [1,3,4] is not [1,2,3] # False
print(identity_compare, identity_compare2, identity_compare3,
      identity_compare4, identity_compare5, identity_compare6)
31/22:
a = []
b = a
identity_compare = {} is {} # False
identity_compare2 = a is not b # True
identity_compare3 = b is not [] # True
identity_compare4 = 9 is 10 # True
identity_compare5 = "Same" is not "Same" # False
identity_compare6 = [1,3,4] is [1,2,3] # False
print(identity_compare, identity_compare2, identity_compare3,
      identity_compare4, identity_compare5, identity_compare6)
31/23:
a = []
b = a
identity_compare = {} is {} # False
identity_compare2 = a is not b # True
identity_compare3 = b is not [] # True
identity_compare4 = 9 is not 10 # True
identity_compare5 = "Same" is not "Same" # False
identity_compare6 = [1,3,4] is [1,2,3] # False
print(identity_compare, identity_compare2, identity_compare3,
      identity_compare4, identity_compare5, identity_compare6)
31/24:
a = []
b = a
identity_compare = {} is {} # False
identity_compare2 = a is b # True
identity_compare3 = b is not [] # True
identity_compare4 = 9 is not 10 # True
identity_compare5 = "Same" is not "Same" # False
identity_compare6 = [1,3,4] is [1,2,3] # False
print(identity_compare, identity_compare2, identity_compare3,
      identity_compare4, identity_compare5, identity_compare6)
32/1:
slices_of_pie = 6
slices_eaten = 0

while slices_eaten >= 6
#for slice in range(slices_of_pie):
    print('Another slice eaten!')
    slices_eaten += 1
    print('Now eaten {} slices!'.format(slices_eaten))
32/2:
slices_of_pie = 6
slices_eaten = 0

while slices_eaten >= 6:
#for slice in range(slices_of_pie):
    print('Another slice eaten!')
    slices_eaten += 1
    print('Now eaten {} slices!'.format(slices_eaten))
32/3:
slices_of_pie = 6
slices_eaten = 0

while slices_eaten >= 6:
#for slice in range(slices_of_pie):
    slices_of_pie -= 1
    print('Another slice eaten!')
    slices_eaten += 1
    print('Now eaten {} slices!'.format(slices_eaten))
32/4:
slices_of_pie = 6
slices_eaten = 0

while slices_eaten > 6:
#for slice in range(slices_of_pie):
    slices_of_pie -= 1
    print('Another slice eaten!')
    slices_eaten += 1
    print('Now eaten {} slices!'.format(slices_eaten))
32/5:
slices_of_pie = 6
slices_eaten = 0

while slices_eaten > 6 and slices_of_pie < 1:
#for slice in range(slices_of_pie):
    slices_of_pie -= 1
    print('Another slice eaten!')
    slices_eaten += 1
    print('Now eaten {} slices!'.format(slices_eaten))
32/6:
slices_of_pie = 6
slices_eaten = 0

while slices_eaten > 6 and slices_of_pie < 1:
#for slice in range(slices_of_pie):
    slices_of_pie -= 1
    print('Another slice eaten!')
    slices_eaten += 1
    print('Now eaten {} slices!'.format(slices_eaten))
32/7:
slices_of_pie = 6
slices_eaten = 0

for slice in range(slices_of_pie):
    print('Another slice eaten!')
    slices_eaten += 1
    print('Now eaten {} slices!'.format(slices_eaten))
32/8:
slices_of_pie = 6
slices_eaten = 0

while slices_eaten > 6 and slices_of_pie < 1:
    slices_of_pie -= 1
    print('Another slice eaten!')
    slices_eaten += 1
    print('Now eaten {} slices!'.format(slices_eaten))

# add your while loop here that achieves the same results as the for loop above
32/9:
slices_of_pie = 6
slices_eaten = 0

while slices_eaten < slices_of_pie:
#slices_eaten > 6 and slices_of_pie < 1:
    slices_of_pie -= 1
    print('Another slice eaten!')
    slices_eaten += 1
    print('Now eaten {} slices!'.format(slices_eaten))

# add your while loop here that achieves the same results as the for loop above
32/10:
slices_of_pie = 6
slices_eaten = 0

while slices_eaten < slices_of_pie:
    print('Another slice eaten!')
    slices_eaten += 1
    print('Now eaten {} slices!'.format(slices_eaten))

# add your while loop here that achieves the same results as the for loop above
32/11:
time_for_breakfast = 1468 # in seconds
number_of_cooked_pancakes = 0

# write your while loop here
while number_of_cooked_pancakes < 5:
    number_of_cooked_pancakes +=1
    seconds_to_eat = time_for_breakfast - 27+15
    print('Agnes has', seconds_to_eat, 'seconds to eat')
# use a while loop to make 5 pancakes for breakfast
# each pancake takes 27 seconds to cook on each side
# it takes an average of 5 seconds to flip a pancake, add or remove a pancake from the pan.
# you must decrease the time_for_breakfast each time you 
# add a pancake to the skillet (frying pan) or flip a pancake (i.e. 2 times per pancake)
# there is only room for one pancake at a time



# print out how much time is remaining
32/12:
time_for_breakfast = 1468 # in seconds
number_of_cooked_pancakes = 0

# write your while loop here
while number_of_cooked_pancakes < 5:
    number_of_cooked_pancakes +=1
    seconds_to_eat = time_for_breakfast - 27+15
print('Agnes has', seconds_to_eat, 'seconds to eat')
# use a while loop to make 5 pancakes for breakfast
# each pancake takes 27 seconds to cook on each side
# it takes an average of 5 seconds to flip a pancake, add or remove a pancake from the pan.
# you must decrease the time_for_breakfast each time you 
# add a pancake to the skillet (frying pan) or flip a pancake (i.e. 2 times per pancake)
# there is only room for one pancake at a time



# print out how much time is remaining
32/13:
time_for_breakfast = 1468 # in seconds
number_of_cooked_pancakes = 0

# write your while loop here
while number_of_cooked_pancakes < 5:
    number_of_cooked_pancakes +=1
    seconds_to_eat = time_for_breakfast - 27+15 * number_of_cooked_pancakes
print('Agnes has', seconds_to_eat, 'seconds to eat')
# use a while loop to make 5 pancakes for breakfast
# each pancake takes 27 seconds to cook on each side
# it takes an average of 5 seconds to flip a pancake, add or remove a pancake from the pan.
# you must decrease the time_for_breakfast each time you 
# add a pancake to the skillet (frying pan) or flip a pancake (i.e. 2 times per pancake)
# there is only room for one pancake at a time



# print out how much time is remaining
32/14:
time_for_breakfast = 1468 # in seconds
number_of_cooked_pancakes = 0

# write your while loop here
while number_of_cooked_pancakes < 5:
    number_of_cooked_pancakes +=1
    seconds_to_eat = time_for_breakfast - 42*number_of_cooked_pancakes
print('Agnes has', seconds_to_eat, 'seconds to eat')
# use a while loop to make 5 pancakes for breakfast
# each pancake takes 27 seconds to cook on each side
# it takes an average of 5 seconds to flip a pancake, add or remove a pancake from the pan.
# you must decrease the time_for_breakfast each time you 
# add a pancake to the skillet (frying pan) or flip a pancake (i.e. 2 times per pancake)
# there is only room for one pancake at a time



# print out how much time is remaining
32/15:
time_for_breakfast = 1468 # in seconds
number_of_cooked_pancakes = 0

# write your while loop here
while number_of_cooked_pancakes < 5:
    number_of_cooked_pancakes +=1
    seconds_to_eat = time_for_breakfast - 69*number_of_cooked_pancakes
print('Agnes has', seconds_to_eat, 'seconds to eat')
# use a while loop to make 5 pancakes for breakfast
# each pancake takes 27 seconds to cook on each side
# it takes an average of 5 seconds to flip a pancake, add or remove a pancake from the pan.
# you must decrease the time_for_breakfast each time you 
# add a pancake to the skillet (frying pan) or flip a pancake (i.e. 2 times per pancake)
# there is only room for one pancake at a time



# print out how much time is remaining
32/16:
line_of_hungry_patrons = list(range(0,30))
fed_patrons = []
# use a for or while loop to feed the hungry patrons who have an even number
# add the patrons with an even number to the fed_patrons list
# then remove the even numbered patrons from the line_of_hungry_patrons
# each list should contain 15 elements
for num in line_of_hungry_patrons:
    if num % 2 == 0:
        fed_patrons.append(num) 
        line_of_hungry_patrons.remove(num)
    elif num % 2 != 0:
        print(line_of_hungry_patrons)
        
    print(fed_patrons)
32/17:
line_of_hungry_patrons = list(range(0,30))
fed_patrons = []
# use a for or while loop to feed the hungry patrons who have an even number
# add the patrons with an even number to the fed_patrons list
# then remove the even numbered patrons from the line_of_hungry_patrons
# each list should contain 15 elements
for num in line_of_hungry_patrons:
    if num % 2 == 0:
        fed_patrons.append(num) 
        line_of_hungry_patrons.remove(num)
    elif num % 2 != 0:
        print(line_of_hungry_patrons)
        
print(fed_patrons)
32/18:
line_of_hungry_patrons = list(range(0,30))
fed_patrons = []
# use a for or while loop to feed the hungry patrons who have an even number
# add the patrons with an even number to the fed_patrons list
# then remove the even numbered patrons from the line_of_hungry_patrons
# each list should contain 15 elements
for num in line_of_hungry_patrons:
    if num % 2 == 0:
        fed_patrons.append(num) 
        line_of_hungry_patrons.remove(num)
    elif num % 2 != 0:
    print(line_of_hungry_patrons)
        
print(fed_patrons)
32/19:
line_of_hungry_patrons = list(range(0,30))
fed_patrons = []
# use a for or while loop to feed the hungry patrons who have an even number
# add the patrons with an even number to the fed_patrons list
# then remove the even numbered patrons from the line_of_hungry_patrons
# each list should contain 15 elements
for num in line_of_hungry_patrons:
    if num % 2 == 0:
        fed_patrons.append(num) 
        line_of_hungry_patrons.remove(num)
    #elif num % 2 != 0:
print(line_of_hungry_patrons)
        
print(fed_patrons)
34/1:
arr1 = [1,2,3]
arr2 = [4,5,6]
34/2:
def array_plus_array(arr1,arr2):
    return lambda arr1, arr2: arr1 + arr2
34/3: arr1, arr2: arr1 + arr2
34/4:

lambda arr1, arr2: arr1 + arr2
34/5:
def array_plus_array(arr1,arr2):
    output = sum(arr1) + sum(arr2)
    return output
34/6:
def array_plus_array(arr1,arr2):
    output = sum(arr1) + sum(arr2)
return output
34/7:
def array_plus_array(arr1,arr2):
    output = sum(arr1) + sum(arr2)
    return output
34/8: array_plus_array([1,2,3],[4,5,6])
33/1:
people = [
    {'name': "Daniel", 'age': 29, 'job': "Engineer", 'pet': "Cat", 'pet_name': "Gato"}, 
    {'name': "Katie", 'age': 30, 'job': "Teacher", 'pet': "Dog", 'pet_name': "Frank"},
    {'name': "Owen", 'age': 26, 'job': "Sales person", 'pet': "Cat", 'pet_name': "Cosmo"},
    {'name': "Josh", 'age': 22, 'job': "Student", 'pet': "Cat", 'pet_name': "Chat"},
    {'name': "Estelle", 'age': 35, 'job': "French Diplomat", 'pet': "Dog", 'pet_name': "Gabby"},
    {'name': "Gustav", 'age': 24, 'job': "Brewer", 'pet': "Dog", 'pet_name': "Helen"}
]
33/2:
first_dog_person = None
iteration_count = 0
for person in people:
    iteration_count += 1
    if people['pet'] = 'Dog':
        first_dog_person = people[person]['name'][0]
        print(first_dog_person, 'has a dog! Had to check', iteration_count,'of records to find a dog owner.')
        break
    elif people['pet'] = 'Cat':
        continue
        print('There are no dog lovers')
    
    # Continue writing code here
33/3:
first_dog_person = None
iteration_count = 0
for person in people:
    iteration_count += 1
    if people['pet'] = "Dog":
        first_dog_person = people[person]['name'][0]
        print(first_dog_person, 'has a dog! Had to check', iteration_count,'of records to find a dog owner.')
        break
    elif people['pet'] = "Cat":
        continue
        print('There are no dog lovers')
    
    # Continue writing code here
33/4:
first_dog_person = None
iteration_count = 0
for person in people:
    iteration_count += 1
    if people['pet'] == "Dog":
        first_dog_person = people[person]['name'][0]
        print(first_dog_person, 'has a dog! Had to check', iteration_count,'of records to find a dog owner.')
        break
    elif people['pet'] == "Cat":
        continue
        print('There are no dog lovers')
    
    # Continue writing code here
33/5:
first_dog_person = None
iteration_count = 0
for person in people:
    iteration_count += 1
    if people['pet'] = "Dog":
        first_dog_person = people[person]['name'][0]
        print(first_dog_person, 'has a dog! Had to check', iteration_count,'of records to find a dog owner.')
        break
    elif people['pet'] = "Cat":
        continue
        print('There are no dog lovers')
    
    # Continue writing code here
33/6:
first_dog_person = None
iteration_count = 0
for person in people:
    iteration_count += 1
    if people['pet'] is "Dog":
        first_dog_person = people[person]['name'][0]
        print(first_dog_person, 'has a dog! Had to check', iteration_count,'of records to find a dog owner.')
        break
    elif people['pet'] is not "Cat":
        continue
        print('There are no dog lovers')
    
    # Continue writing code here
33/7:
first_dog_person = None
iteration_count = 0
for person in people:
    iteration_count += 1
    if people['pet'] = "Dog":
        first_dog_person = people[person]['name'][0]
        print(first_dog_person, 'has a dog! Had to check', iteration_count,'of records to find a dog owner.')
        break
    elif people['pet'] = "Cat":
        continue
        print('There are no dog lovers')
    
    # Continue writing code here
33/8:
first_dog_person = None
iteration_count = 0
for person in people:
    iteration_count += 1
    if people['pet'] = "Dog":
        first_dog_person = people[person]['name'][0]
        print(first_dog_person, 'has a dog! Had to check', iteration_count,'of records to find a dog owner.')
        break
    elif people['pet'] != "Dog":
        continue
        print('There are no dog lovers')
    
    # Continue writing code here
33/9:
first_dog_person = None
iteration_count = 0
for person in people:
    iteration_count += 1
    people['pet'] = "Dog"
    if True:
        first_dog_person = people[person]['name'][0]
        print(first_dog_person, 'has a dog! Had to check', iteration_count,'of records to find a dog owner.')
        break
    elif False:
    #people['pet'] != "Dog":
        continue
        print('There are no dog lovers')
    
    # Continue writing code here
33/10:
first_dog_person = None
iteration_count = 0
for person in people:
    iteration_count += 1
    if people['pet'] = "Dog":
        first_dog_person = people[person]['name'][0]
        print(first_dog_person, 'has a dog! Had to check', iteration_count,'of records to find a dog owner.')
        break
    elif people['pet'] != "Dog":
        continue
        print('There are no dog lovers')
    
    # Continue writing code here
33/11:
first_dog_person = None
iteration_count = 0
for person in people:
    iteration_count += 1
    if people.values('Dog'):
        first_dog_person = people[person]['name'][0]
        print(first_dog_person, 'has a dog! Had to check', iteration_count,'of records to find a dog owner.')
        break
    elif people.values('Cat'):
        continue
        print('There are no dog lovers')
    
    # Continue writing code here
33/12:
first_dog_person = None
iteration_count = 0
for person in people:
    iteration_count += 1
    people_list = people.values():
    #    if 
     #   first_dog_person = people[person]['name'][0]
        print(first_dog_person, 'has a dog! Had to check', iteration_count,'of records to find a dog owner.')
    #    break
   # elif people.values('Cat'):
     #   continue
      #  print('There are no dog lovers')
    
    # Continue writing code here
33/13:
#first_dog_person = None
#iteration_count = 0
#for person in people:
   # iteration_count += 1
    people_list = people.values():
    #    if 
     #   first_dog_person = people[person]['name'][0]
        print(first_dog_person, 'has a dog! Had to check', iteration_count,'of records to find a dog owner.')
    #    break
   # elif people.values('Cat'):
     #   continue
      #  print('There are no dog lovers')
    
    # Continue writing code here
33/14:
#first_dog_person = None
#iteration_count = 0
#for person in people:
   # iteration_count += 1
people_list = people.values():
    #    if 
     #   first_dog_person = people[person]['name'][0]
        print(first_dog_person, 'has a dog! Had to check', iteration_count,'of records to find a dog owner.')
    #    break
   # elif people.values('Cat'):
     #   continue
      #  print('There are no dog lovers')
    
    # Continue writing code here
33/15:
#first_dog_person = None
#iteration_count = 0
#for person in people:
   # iteration_count += 1
people_list = people.values()
    #    if 
     #   first_dog_person = people[person]['name'][0]
        print(first_dog_person, 'has a dog! Had to check', iteration_count,'of records to find a dog owner.')
    #    break
   # elif people.values('Cat'):
     #   continue
      #  print('There are no dog lovers')
    
    # Continue writing code here
33/16:
#first_dog_person = None
#iteration_count = 0
#for person in people:
   # iteration_count += 1
people_list = people.values()
    #    if 
     #   first_dog_person = people[person]['name'][0]
       # print(first_dog_person, 'has a dog! Had to check', iteration_count,'of records to find a dog owner.')
    #    break
   # elif people.values('Cat'):
     #   continue
      #  print('There are no dog lovers')
    
    # Continue writing code here
33/17:
people = [
    {'name': "Daniel", 'age': 29, 'job': "Engineer", 'pet': "Cat", 'pet_name': "Gato"}, 
    {'name': "Katie", 'age': 30, 'job': "Teacher", 'pet': "Dog", 'pet_name': "Frank"},
    {'name': "Owen", 'age': 26, 'job': "Sales person", 'pet': "Cat", 'pet_name': "Cosmo"},
    {'name': "Josh", 'age': 22, 'job': "Student", 'pet': "Cat", 'pet_name': "Chat"},
    {'name': "Estelle", 'age': 35, 'job': "French Diplomat", 'pet': "Dog", 'pet_name': "Gabby"},
    {'name': "Gustav", 'age': 24, 'job': "Brewer", 'pet': "Dog", 'pet_name': "Helen"}
]
33/18:
#first_dog_person = None
#iteration_count = 0
#for person in people:
   # iteration_count += 1
people_list = people.values()
    #    if 
     #   first_dog_person = people[person]['name'][0]
       # print(first_dog_person, 'has a dog! Had to check', iteration_count,'of records to find a dog owner.')
    #    break
   # elif people.values('Cat'):
     #   continue
      #  print('There are no dog lovers')
    
    # Continue writing code here
33/19:
#first_dog_person = None
#iteration_count = 0
#for person in people:
   # iteration_count += 1
people_list = people.values('Dog')
    #    if 
     #   first_dog_person = people[person]['name'][0]
       # print(first_dog_person, 'has a dog! Had to check', iteration_count,'of records to find a dog owner.')
    #    break
   # elif people.values('Cat'):
     #   continue
      #  print('There are no dog lovers')
    
    # Continue writing code here
33/20:
first_dog_person = None
iteration_count = 0
for person in people:
    iteration_count += 1
    if people['pet'] = "Dog":
        first_dog_person = people[person]['name'][0]
        print(first_dog_person, 'has a dog! Had to check', iteration_count,'of records to find a dog owner.')
        break
    elif people['pet'] != "Dog":
        continue
        print('There are no dog lovers')
    
    # Continue writing code here
33/21:
first_dog_person = None
iteration_count = 0
for person in people:
    iteration_count += 1
    people_tup = people.items()
    if people_tup['pet'] = "Dog":
        first_dog_person = people[person]['name'][0]
        print(first_dog_person, 'has a dog! Had to check', iteration_count,'of records to find a dog owner.')
        break
    elif people_tup['pet'] != "Dog":
        continue
        print('There are no dog lovers')
    
    # Continue writing code here
34/9:
people = [
    {'name': "Daniel", 'age': 29, 'job': "Engineer", 'pet': "Cat", 'pet_name': "Gato"}, 
    {'name': "Katie", 'age': 30, 'job': "Teacher", 'pet': "Dog", 'pet_name': "Frank"},
    {'name': "Owen", 'age': 26, 'job': "Sales person", 'pet': "Cat", 'pet_name': "Cosmo"},
    {'name': "Josh", 'age': 22, 'job': "Student", 'pet': "Cat", 'pet_name': "Chat"},
    {'name': "Estelle", 'age': 35, 'job': "French Diplomat", 'pet': "Dog", 'pet_name': "Gabby"},
    {'name': "Gustav", 'age': 24, 'job': "Brewer", 'pet': "Dog", 'pet_name': "Helen"}
]
34/10:
people = [
    {'name': "Daniel", 'age': 29, 'job': "Engineer", 'pet': "Cat", 'pet_name': "Gato"}, 
    {'name': "Katie", 'age': 30, 'job': "Teacher", 'pet': "Dog", 'pet_name': "Frank"},
    {'name': "Owen", 'age': 26, 'job': "Sales person", 'pet': "Cat", 'pet_name': "Cosmo"},
    {'name': "Josh", 'age': 22, 'job': "Student", 'pet': "Cat", 'pet_name': "Chat"},
    {'name': "Estelle", 'age': 35, 'job': "French Diplomat", 'pet': "Dog", 'pet_name': "Gabby"},
    {'name': "Gustav", 'age': 24, 'job': "Brewer", 'pet': "Dog", 'pet_name': "Helen"}
]
people
34/11: people['pet']
34/12: people.items()
34/13: people['Dog']
34/14: people[1]
34/15: people[1][4]
34/16: people[1][5]
34/17: people[1](3)
34/18: people[1]
34/19: people(1)
34/20: people[1]
34/21: people[1]['pet']
33/22:
first_dog_person = None
iteration_count = 0
for person in people:
    iteration_count += 1
   # people_tup = people.items()
    if people[person]['pet'] = "Dog":
        first_dog_person = people[person]['name'][0]
        print(first_dog_person, 'has a dog! Had to check', iteration_count,'of records to find a dog owner.')
        break
    elif people[person]['pet'] = "Dog":
        continue
        print('There are no dog lovers')
    
    # Continue writing code here
33/23:
first_dog_person = None
iteration_count = 0
for person in people:
    iteration_count += 1
   # people_tup = people.items()
    if people[person]['pet'] == "Dog":
        first_dog_person = people[person]['name'][0]
        print(first_dog_person, 'has a dog! Had to check', iteration_count,'of records to find a dog owner.')
        break
    elif people[person]['pet'] == "Dog":
        continue
        print('There are no dog lovers')
    
    # Continue writing code here
33/24:
first_dog_person = None
iteration_count = 0
for person in people:
    iteration_count += 1
    if people[person]['pet'] == "Dog":
        first_dog_person = people[person]['name'][0]
        print(first_dog_person, 'has a dog! Had to check', iteration_count,'of records to find a dog owner.')
        break
    elif people[person]['pet'] == "Dog":
        continue
        print('There are no dog lovers')
    
    # Continue writing code here
33/25:
first_dog_person = None
iteration_count = 0
for person in people:
    iteration_count += 1
    pets = people[person]['pet']
    if pets = 'Dog':
        first_dog_person = people[person]['name'][0]
        print(first_dog_person, 'has a dog! Had to check', iteration_count,'of records to find a dog owner.')
        break
    elif people[person]['pet'] == "Dog":
        continue
        print('There are no dog lovers')
    
    # Continue writing code here
33/26:
first_dog_person = None
iteration_count = 0
for person in people:
    iteration_count += 1
    pets = people[person]['pet']
    if pets == 'Dog':
        first_dog_person = people[person]['name'][0]
        print(first_dog_person, 'has a dog! Had to check', iteration_count,'of records to find a dog owner.')
        break
    elif people[person]['pet'] == "Dog":
        continue
        print('There are no dog lovers')
    
    # Continue writing code here
33/27:
first_dog_person = None
iteration_count = 0
for person in people:
    iteration_count += 1
    pets = people[person]['pet']
    if pets = 'Dog':
        first_dog_person = people[person]['name'][0]
        print(first_dog_person, 'has a dog! Had to check', iteration_count,'of records to find a dog owner.')
        break
    elif people[person]['pet'] == "Dog":
        continue
        print('There are no dog lovers')
    
    # Continue writing code here
33/28:
first_dog_person = None
iteration_count = 0
for person in people:
    iteration_count += 1
    pets = people[person]['pet']
    if pets is 'Dog':
        first_dog_person = people[person]['name'][0]
        print(first_dog_person, 'has a dog! Had to check', iteration_count,'of records to find a dog owner.')
        break
    elif people[person]['pet'] == "Dog":
        continue
        print('There are no dog lovers')
    
    # Continue writing code here
33/29:
first_dog_person = None
iteration_count = 0
for person in people:
    iteration_count += 1
    pets = people[person]['pet']
   # if pets = 'Dog':
        first_dog_person = people[person]['name'][0]
        print(first_dog_person, 'has a dog! Had to check', iteration_count,'of records to find a dog owner.')
        break
    elif people[person]['pet'] == "Dog":
        continue
        print('There are no dog lovers')
    
    # Continue writing code here
33/30:
first_dog_person = None
iteration_count = 0
for person in people:
    iteration_count += 1
    pets = people[person]['pet']
    if pets = 'Dog':
        first_dog_person = people[person]['name'][0]
        print(first_dog_person, 'has a dog! Had to check', iteration_count,'of records to find a dog owner.')
        break
    elif people[person]['pet'] == "Dog":
        continue
        print('There are no dog lovers')
    
    # Continue writing code here
34/22: people[1]
34/23:
for person in people:
    dic = people[person]
    print(dic)
34/24:
for person in people.items():
    dic = people[person]
    print(dic)
34/25:
#for person in people:
res = list(map(itemgetter('pet'), people))
res
34/26:
#for person in people:
from operator import itemgetter
res = list(map(itemgetter('pet'), people))
res
34/27: res = [ person['gfg'] for person in people
34/28: res = [ person['gfg'] for person in people:
34/29: res = [ person['gfg'] for person in people
34/30: res = [ person['gfg'] for person in people]
34/31: res = [ person['name'] for person in people]
34/32:
res = [ person['name'] for person in people]
res
33/31:
line_of_hungry_patrons = list(range(0,30))
fed_patrons = []
# use a for or while loop to feed the hungry patrons who have an even number
# add the patrons with an even number to the fed_patrons list
# then remove the even numbered patrons from the line_of_hungry_patrons
# each list should contain 15 elements
for num in line_of_hungry_patrons:
    if num % 2 == 0:
        fed_patrons.append(num) 
        line_of_hungry_patrons.remove(num)
    
print('Hungry People:', line_of_hungry_patrons)
        
print('Fed people:', fed_patrons)
33/32:
first_dog_person = None
iteration_count = 0
for person in people:
    iteration_count += 1
    if     person['pet'] == "Dog"
        first_dog_person = [person]['name'][0]
        print(first_dog_person, 'has a dog! Had to check', iteration_count,'of records to find a dog owner.')
        break
    elif [person]['pet'] == "Cat":
        continue
        print('There are no dog lovers')
    
    # Continue writing code here
33/33:
first_dog_person = None
iteration_count = 0
for person in people:
    iteration_count += 1
    if     person['pet'] == "Dog":
        first_dog_person = [person]['name'][0]
        print(first_dog_person, 'has a dog! Had to check', iteration_count,'of records to find a dog owner.')
        break
    elif [person]['pet'] == "Cat":
        continue
        print('There are no dog lovers')
    
    # Continue writing code here
33/34:
first_dog_person = None
iteration_count = 0
for person in people:
    iteration_count += 1
    if  person['pet'] == "Dog":
        first_dog_person = [person]['name'][0]
        print(first_dog_person, 'has a dog! Had to check', iteration_count,'of records to find a dog owner.')
        break
    elif #[person]['pet'] == "Cat":
        continue
        print('There are no dog lovers')
    
    # Continue writing code here
33/35:
first_dog_person = None
iteration_count = 0
for person in people:
    iteration_count += 1
    if  person['pet'] == "Dog":
        first_dog_person = [person]['name'][0]
        print(first_dog_person, 'has a dog! Had to check', iteration_count,'of records to find a dog owner.')
        break
    
    # Continue writing code here
33/36:
first_dog_person = None
iteration_count = 0
for person in people:
    iteration_count += 1
    if  person['pet'] == "Dog":
        first_dog_person = [person]['name']
        print(first_dog_person, 'has a dog! Had to check', iteration_count,'of records to find a dog owner.')
        break
    
    # Continue writing code here
33/37:
first_dog_person = None
iteration_count = 0
for person in people:
    iteration_count += 1
    if  person['pet'] == "Dog":
        first_dog_person = person['name']
        print(first_dog_person, 'has a dog! Had to check', iteration_count,'of records to find a dog owner.')
        break
    
    # Continue writing code here
33/38:
cat_owners = None
# for loop goes here
for young in people:
    if young['pet'] == 'Cat':
        cat_owners.append(young['name'])
        break
    elif young['age'] >= 28:
        young['name'].pop()
        print(cat_owners)
33/39:
cat_owners = None
# for loop goes here
for young in people:
    if young['pet'] == 'Cat':
        cat_peeps = young['name']
        cat_owners.append(cat_peeps)
        break
    elif young['age'] >= 28:
        young['name'].pop()
        print(cat_owners)
33/40:
cat_owners = []
# for loop goes here
for young in people:
    if young['pet'] == 'Cat':
        cat_peeps = young['name']
        cat_owners.append(cat_peeps)
        break
    elif young['age'] >= 28:
        young['name'].pop()
        print(cat_owners)
33/41:
cat_owners = []
# for loop goes here
for young in people:
    if young['pet'] == 'Cat':
        cat_peeps = young['name']
        cat_owners.append(cat_peeps)
        break
    elif young['age'] >= 28:
        cat_owners.remove(young['name'])
        print(cat_owners)
34/33:
for young in people:
    if young['pet'] == 'Cat':
        cat_peeps = young['name']
34/34:
for young in people:
    if young['pet'] == 'Cat':
        cat_peeps = young['name']
        cat_owners.append(cat_peeps)
        print(cat_owners)
34/35:
cat_owners = []
for young in people:
    if young['pet'] == 'Cat':
        cat_peeps = young['name']
        cat_owners.append(cat_peeps)
        print(cat_owners)
34/36:
cat_owners = []
for young in people:
    if young['pet'] == 'Cat':
        cat_peeps = young['name']
        cat_owners.append(cat_peeps)
        print(cat_owners)
        break
    elif young['age'] >= 28:
        cat_owners.remove(young['name'])
        print(cat_owners)
34/37:
cat_owners = []
for young in people:
    if young['pet'] == 'Cat':
        cat_peeps = young['name']
        cat_owners.append(cat_peeps)
        print(cat_owners)
34/38:
cat_owners = []
for young in people:
    if young['pet'] == 'Cat':
        cat_peeps = young['name']
        cat_owners.append(cat_peeps)
        print(cat_owners)
        break
    elif young['age'] <= 28:
        cat_owners.remove(young['name'])
        print(cat_owners)
34/39:
cat_owners = []
for young in people:
    if young['pet'] == 'Cat':
        cat_peeps = young['name']
        cat_owners.append(cat_peeps)
        print(cat_owners)
        break
    elif young['age'] >= 28:
        cat_owners.remove(young['name'])
        print(cat_owners)
34/40:
cat_owners = []
for young in people:
    if young['pet'] == 'Cat':
        cat_peeps = young['name']
        cat_owners.append(cat_peeps)
        print(cat_owners)
        break
    elif young['age'] < 28:
        cat_owners.remove(young['name'])
        print(cat_owners)
34/41:
cat_owners = []
for young in people:
    if young['pet'] == 'Cat':
        cat_peeps = young['name']
        cat_owners.append(cat_peeps)
        print(cat_owners)
        break
    elif young['age'] > 28:
        cat_owners.remove(young['name'])
        print(cat_owners)
34/42:
cat_owners = []
for young in people:
    if young['pet'] == 'Cat':
        cat_peeps = young['name']
        cat_owners.append(cat_peeps)
        print(cat_owners)
        break
    elif young['age'] > 28:
        young_peeps = cat_owners.remove(young['name'])
        print(young_peeps)
33/42:
cat_owners = []
# for loop goes here
for young in people:
    if young['pet'] == 'Cat'and young['age'] < 28:
        cat_peeps = young['name']
        cat_owners.append(cat_peeps)
        print(cat_owners)
33/43:
cat_owners = []
# for loop goes here
for young in people:
    if young['pet'] == 'Cat'and young['age'] < 28:
        cat_owners.append(young)
        print(cat_owners)
33/44:
thirty_something_yr_old = None
# for loop goes here
for young in people:
    if young['pet'] == 'Cat'and young['age'] > 28:
        cat_owners.append(young)
        print(cat_owners)
34/43:
for young in people:
    if young['pet'] == 'Cat'and young['age'] < 28:
        cat_owners.append(young)
        print(cat_owners)
34/44:
thirty_something_yr_old = []
for young in people:
    if young['pet'] == 'Cat':
        cat_owners.append(cat_peeps)
        print(cat_owners)
        break
    elif young['age'] > 28:
         thirty_something_yr_old = cat_owners.remove(young)
        print(thirty_something_yr_old)
34/46:
thirty_something_yr_old = []
for young in people:
    if young['pet'] == 'Cat':
        cat_owners.append(cat_peeps)
        print(cat_owners)
        break
    elif young['age'] > 28:
         thirty_something_yr_old = cat_owners.remove(young)
         print(thirty_something_yr_old)
33/45:
thirty_something_yr_old = []
for young in people:
    if young['pet'] == 'Cat':
        cat_owners.append(cat_peeps)
        print(cat_owners)
        break
    elif young['age'] > 28:
         thirty_something_yr_old = cat_owners.remove(young)
         print(thirty_something_yr_old)
34/47:
thirty_something_yr_old = []
for young in people:
    if young['pet'] == 'Cat':
        cat_owners.append(cat_peeps)
        break
    elif young['age'] > 28:
         thirty_something_yr_old = cat_owners.remove(young)
         print(thirty_something_yr_old)
34/48:
thirty_something_yr_old = []
for young in people:
    if young['pet'] == 'Cat':
        cat_owners.append(cat_peeps)
        print(cat_owners)
        break
    elif young['age'] > 28:
         thirty_something_yr_old = cat_owners.remove(young)
         print(thirty_something_yr_old)
34/49:
thirty_something_yr_old = []
for person in people:
    if person['age'] > 29:
        thirty_something_yr_old.append(person)
        yr_old = thirty_something_yr_old['age']
        print(thirty_something_yr_old)
        print(yr_old)
34/50:
thirty_something_yr_old = []
for person in people:
    if person['age'] > 29:
        thirty_something_yr_old.append(person)
        print(thirty_something_yr_old)
        print(thirty_something_yr_old['age'])
34/51:
thirty_something_yr_old = []
for person in people:
    if person['age'] > 29:
        thirty_something_yr_old.append(person)
        print(thirty_something_yr_old)
34/52:
thirty_something_yr_old = []
for person in people:
    if person['age'] > 29:
        thirty_something_yr_old.append(person)
        print(thirty_something_yr_old[0])
34/53:
thirty_something_yr_old = []
for person in people:
    if person['age'] > 29:
        thirty_something_yr_old.append(person)
        print(thirty_something_yr_old)
34/54:
thirty_something_yr_old = []
for person in people:
    if person['age'] > 29:
        thirty_something_yr_old.append(person)
        print(thirty_something_yr_old[0])
        break
34/55:
thirty_something_yr_old = []
for person in people:
    if person['age'] > 29:
        thirty_something_yr_old.append(person)
        print(thirty_something_yr_old[0])
        break
    thirty_something_yr_old['age']
34/56:
thirty_something_yr_old = []
for person in people:
    if person['age'] > 29:
        thirty_something_yr_old.append(person)
        print(thirty_something_yr_old[0])
        break
    person['age']
34/57:
thirty_something_yr_old = []
for person in people:
    if person['age'] > 29:
        thirty_something_yr_old.append(person)
        print(thirty_something_yr_old[0])
        break
    yr_old = person['age']
    print(yr_old)
34/58:
thirty_something_yr_old = []
for person in people:
    if person['age'] > 29:
        thirty_something_yr_old.append(person)
        print(thirty_something_yr_old[0])
        break
    thirty_something_yr_old['age']
    #print(yr_old)
34/59:
thirty_something_yr_old = []
for person in people:
    if person['age'] > 29:
        thirty_something_yr_old.append(person)
        print(thirty_something_yr_old[0])
        break
    thirty_something_yr_old[0]['age']
    #print(yr_old)
34/60:
thirty_something_yr_old = []
for person in people:
    if person['age'] > 29:
        thirty_something_yr_old.append(person)
        print(thirty_something_yr_old[0])
        break
    thirty_something_yr_old[person]['age']
    #print(yr_old)
34/61:
thirty_something_yr_old = []
for person in people:
    if person['age'] > 29:
        thirty_something_yr_old.append(person)
        old = thirty_something_yr_old[0]
        print(old)
        break
    #thirty_something_yr_old[person]['age']
    #print(yr_old)
34/62:
thirty_something_yr_old = []
for person in people:
    if person['age'] > 29:
        thirty_something_yr_old.append(person)
        old = thirty_something_yr_old[0]
        print(old)
        break
    person[old]
    #thirty_something_yr_old[person]['age']
    #print(yr_old)
34/63:
thirty_something_yr_old = []
for person in people:
    if person['age'] > 29:
        thirty_something_yr_old.append(person)
        thirty_something_yr_old[0]
        print(old)
        break
34/64:
thirty_something_yr_old = []
for person in people:
    if person['age'] > 29:
        thirty_something_yr_old.append(person[name])
        print(thirty_something_yr_old)
        break
34/65:
thirty_something_yr_old = []
for person in people:
    if person['age'] > 29:
        thirty_something_yr_old.append(person['name'])
        print(thirty_something_yr_old)
        break
34/66:
thirty_something_yr_old = None
for person in people:
    if person['age'] > 29:
        thirty_something_yr_old.append(person['name'])
        print(thirty_something_yr_old)
        break
34/67:
thirty_something_yr_old = 0
for person in people:
    if person['age'] > 29:
        thirty_something_yr_old.append(person['name'])
        print(thirty_something_yr_old)
        break
34/68:
thirty_something_yr_old = []
for person in people:
    if person['age'] > 29:
        thirty_something_yr_old.append(person['name'])
        print(thirty_something_yr_old)
        break
34/69:

for person in people:
    if person['age'] > 29:
        print(person['name'], 'is', person['age'])
        break
34/70:

for person in people:
    if person['age'] > 29:
        #print(person['name'], 'is', person['age'])
        break
34/71:

for person in people:
    if person['age'] > 29:
        print(person['name'], 'is', person['age'])
        break
33/46:
thirty_something_yr_old = None
# for loop goes here
for person in people:
    if person['age'] > 29:
        print(person['name'], 'is', person['age'])
        break
34/72:
dog_owner_names = []
dog_names = []

for person in people:
    if person['pet'] == 'Dog':
        dog_owner_names.append(person['name'])
        dog_names.append(person['pet_name'])
        break
    print(dog_owner_names)
    print(dog_names)
34/73:
dog_owner_names = []
dog_names = []

for person in people:
    if person['pet'] == 'Dog':
        dog_owner_names.append(person['name'])
        dog_names.append(person['pet_name'])
    print(dog_owner_names)
    print(dog_names)
34/74:
dog_owner_names = []
dog_names = []

for person in people:
    if person['pet'] == 'Dog':
        dog_owner_names.append(person['name'])
        dog_names.append(person['pet_name'])
    print(dog_owner_names)
    print(dog_names)
    break
34/75:
dog_owner_names = []
dog_names = []

for person in people:
    if person['pet'] == 'Dog':
        dog_owner_names.append(person['name'])
        dog_names.append(person['pet_name'])
        print(dog_owner_names)
        print(dog_names)
        break
34/76:
dog_owner_names = []
dog_names = []

for person in people:
    if person['pet'] == 'Dog':
        dog_owner_names.append(person['name'])
        dog_names.append(person['pet_name'])
        print(dog_owner_names)
        print(dog_names)
34/77:
dog_owner_names = []
dog_names = []

for person in people:
    if person['pet'] == 'Dog':
        dog_owner_names.append(person['name'])
        dog_names.append(person['pet_name'])
        print('These people own dogs:', dog_owner_names)
        print('Here are their dog names:', dog_names)
    break
34/78:
dog_owner_names = []
dog_names = []

for person in people:
    if person['pet'] == 'Dog':
        dog_owner_names.append(person['name'])
        dog_names.append(person['pet_name'])
        print('These people own dogs:', dog_owner_names)
        print('Here are their dog names:', dog_names)
break
34/79:
dog_owner_names = []
dog_names = []

for person in people:
    if person['pet'] == 'Dog':
        dog_owner_names.append(person['name'])
        dog_names.append(person['pet_name'])
        print('These people own dogs:', dog_owner_names)
        print('Here are their dog names:', dog_names)
34/80:
dog_owner_names = []
dog_names = []

for person in people:
    if person['pet'] == 'Dog':
        dog_owner_names.append(person['name'])
        dog_names.append(person['pet_name'])
        break
        print('These people own dogs:', dog_owner_names)
        print('Here are their dog names:', dog_names)
34/81:
dog_owner_names = []
dog_names = []

for person in people:
    if person['pet'] == 'Dog':
        dog_owner_names.append(person['name'])
        dog_names.append(person['pet_name'])
        break
    print('These people own dogs:', dog_owner_names)
    print('Here are their dog names:', dog_names)
34/82:
dog_owner_names = []
dog_names = []

for person in people:
    if person['pet'] == 'Dog':
        dog_owner_names.append(person['name'])
        dog_names.append(person['pet_name'])
    print('These people own dogs:', dog_owner_names)
    print('Here are their dog names:', dog_names)
34/83:
dog_owner_names = []
dog_names = []

for person in people:
    if person['pet'] == 'Dog':
        dog_owner_names.append(person['name'])
        dog_names.append(person['pet_name'])
    print('These people own dogs:', dog_owner_names)
    print('Here are their dog names:', dog_names)
    break
34/84:
dog_owner_names = []
dog_names = []

for person in people:
    if person['pet'] == 'Dog':
        dog_owner_names.append(person['name'])
        dog_names.append(person['pet_name'])
    print('These people own dogs:', dog_owner_names)
    print('Here are their dog names:', dog_names)
34/85:
dog_owner_names = []
dog_names = []

for person in people:
    if person['pet'] == 'Dog':
        dog_owner_names.append(person['name'])
        dog_names.append(person['pet_name'])
        print('These people own dogs:', dog_owner_names)
        print('Here are their dog names:', dog_names)
34/86:
dog_owner_names = []
dog_names = []

for person in people:
    if person['pet'] == 'Dog':
        dog_owner_names.append(person['name'])
        dog_names.append(person['pet_name'])
    print('These people own dogs:', dog_owner_names)
    print('Here are their dog names:', dog_names)
34/87:
dog_owner_names = []
dog_names = []

for person in people:
    if person['pet'] == 'Dog':
        dog_owner_names.append(person['name'])
        dog_names.append(person['pet_name'])
        print('These people own dogs:', dog_owner_names)
        print('Here are their dog names:', dog_names)
34/88:
dog_owner_names = []
dog_names = []

for person in people:
    if person['pet'] == 'Dog':
        dog_owner_names.append(person['name'])
        dog_names.append(person['pet_name'])
        print('These people own dogs:', dog_owner_names)
        print('Here are their dog names:', dog_names)
    else:
        continue
34/89:
for person in people:
    if person['pet'] == 'Dog':
        dog_owner_names.append(person['name'])
        dog_names.append(person['pet_name'])
    else:
        continue
34/90:
dog_owner_names = []
dog_names = []

for person in people:
    if person['pet'] == 'Dog':
        dog_owner_names.append(person['name'])
        dog_names.append(person['pet_name'])
    else:
        continue
34/91:
dog_owner_names = []
dog_names = []

for person in people:
    if person['pet'] == 'Dog':
        dog_owner_names.append(person['name'])
        dog_names.append(person['pet_name'])
        print('These people own dogs:', dog_owner_names)
        print('Here are their dog names:', dog_names)
    else:
        continue
34/92:
dog_owner_names = []
dog_names = []

for person in people:
    if person['pet'] == 'Dog':
        dog_owner_names.append(person['name'])
        dog_names.append(person['pet_name'])
    else:
        continue
    print('These people own dogs:', dog_owner_names)
    print('Here are their dog names:', dog_names)
33/47:
dog_owner_names = []
dog_names = []
# for loop goes here
for person in people:
    if person['pet'] == 'Dog':
        dog_owner_names.append(person['name'])
        dog_names.append(person['pet_name'])
    else:
        continue
    print('These people own dogs:', dog_owner_names)
    print('Here are their dog names:', dog_names)
34/93:
list_of_numbers = list(range(0, 100))
list_of_odd_numbers_plus_ten = []

for number in list_of_numbers:
    if number % 2 != 0:
        number += 10
        list_of_odd_numbers_plus_ten.append(number)
    if len(list_of_odd_numbers_plus_ten) = 35:
        break
    else:
        continue
34/94:
list_of_numbers = list(range(0, 100))
list_of_odd_numbers_plus_ten = []

for number in list_of_numbers:
    if number % 2 != 0:
        number += 10
        list_of_odd_numbers_plus_ten.append(number)
    if len(list_of_odd_numbers_plus_ten) == 35:
        break
    else:
        continue
34/95:
list_of_numbers = list(range(0, 100))
list_of_odd_numbers_plus_ten = []

for number in list_of_numbers:
    if number % 2 != 0:
        number += 10
        list_of_odd_numbers_plus_ten.append(number)
    if len(list_of_odd_numbers_plus_ten) == 35:
        break
    else:
        continue
    print(list_of_odd_numbers_plus_ten)
34/96:
list_of_numbers = list(range(0, 100))
list_of_odd_numbers_plus_ten = []

for number in list_of_numbers:
    if number % 2 != 0:
        number += 10
        list_of_odd_numbers_plus_ten.append(number)
    if len(list_of_odd_numbers_plus_ten) == 35:
        print(list_of_odd_numbers_plus_ten)
        break
    else:
        continue
33/48:
list_of_numbers = list(range(0, 100))
list_of_odd_numbers_plus_ten = []

# use a for loop to create a list of odd numbers from the list of numbers from 0 to 100
# each time there is an odd number, add 10 to it and append it to the list_of_odd_numbers_plus_ten
# stop adding numbers to the list when there are 35 numbers
# use break and continue statements in your code
for number in list_of_numbers:
    if number % 2 != 0:
        number += 10
        list_of_odd_numbers_plus_ten.append(number)
    if len(list_of_odd_numbers_plus_ten) == 35:
        print(list_of_odd_numbers_plus_ten)
        break
    else:
        continue
    # Continue writing code here
35/1:
soccer_match = [
  { "home_team": True,
    "away_team": False,
    "country": "France",
    "num_passes": 484,
    "passes_completed": 423,
    "fouls_committed": 16,
    "colors": ["blue", "white", "red"],
    "players": [
      {
        "name": "Hugo LLORIS",
        "captain": True,
        "shirt_number": 1,
        "position": "Goalie"
      },
      {
        "name": "Benjamin PAVARD",
        "captain": False,
        "shirt_number": 2,
        "position": "Defender"
      },
      {
        "name": "Raphael VARANE",
        "captain": False,
        "shirt_number": 4,
        "position": "Defender"
      },
      {
        "name": "Samuel UMTITI",
        "captain": False,
        "shirt_number": 5,
        "position": "Defender"
      },
      {
        "name": "Paul POGBA",
        "captain": False,
        "shirt_number": 6,
        "position": "Midfield"
      },
      {
        "name": "Antoine GRIEZMANN",
        "captain": False,
        "shirt_number": 7,
        "position": "Forward"
      },
      {
        "name": "Kylian MBAPPE",
        "captain": False,
        "shirt_number": 10,
        "position": "Forward"
      },
      {
        "name": "Ousmane DEMBELE",
        "captain": False,
        "shirt_number": 11,
        "position": "Forward"
      },
      {
        "name": "Corentin TOLISSO",
        "captain": False,
        "shirt_number": 12,
        "position": "Midfield"
      },
      {
        "name": "Ngolo KANTE",
        "captain": False,
        "shirt_number": 13,
        "position": "Midfield"
      },
      {
        "name": "Lucas HERNANDEZ",
        "captain": False,
        "shirt_number": 21,
        "position": "Defender"
      }
    ],
  },
  { "home_team": False,
    "away_team": True,
    "country": "Australia",
    "num_passes": 390,
    "passes_completed": 332,
    "fouls_committed": 19,
    "colors": ["green", "gold"],
    "players": [
      {
        "name": "Mathew RYAN",
        "captain": False,
        "shirt_number": 1,
        "position": "Goalie"
      },
      {
        "name": "Mark MILLIGAN",
        "captain": False,
        "shirt_number": 5,
        "position": "Defender"
      },
      {
        "name": "Mathew LECKIE",
        "captain": False,
        "shirt_number": 7,
        "position": "Forward"
      },
      {
        "name": "Robbie KRUSE",
        "captain": False,
        "shirt_number": 10,
        "position": "Forward"
      },
      {
        "name": "Andrew NABBOUT",
        "captain": False,
        "shirt_number": 11,
        "position": "Forward"
      },
      {
        "name": "Aaron MOOY",
        "captain": False,
        "shirt_number": 13,
        "position": "Midfield"
      },
      {
        "name": "Mile JEDINAK",
        "captain": True,
        "shirt_number": 15,
        "position": "Midfield"
      },
      {
        "name": "Aziz BEHICH",
        "captain": False,
        "shirt_number": 16,
        "position": "Defender"
      },
      {
        "name": "Joshua RISDON",
        "captain": False,
        "shirt_number": 19,
        "position": "Defender"
      },
      {
        "name": "Trent SAINSBURY",
        "captain": False,
        "shirt_number": 20,
        "position": "Defender"
      },
      {
        "name": "Tom ROGIC",
        "captain": False,
        "shirt_number": 23,
        "position": "Midfield"
      }
    ]
  }
]
35/2:
# iterate over the soccer_match list to create a new list with the name of the country for each team
countries = []
# code goes here
for index in soccer_match:
    for country in index['country']:
        countries.append(index['country'])
    print(countries)
35/3:
# iterate over the soccer_match list to create a new list with the name of the country for each team
countries = []
# code goes here
for index in soccer_match:
    for country in index['country']:
        countries.append(index['country'])
print(countries)
35/4:
# iterate over the soccer_match list to create a new list with the name of the country for each team
countries = []
# code goes here
for index in soccer_match:
    for country in index['country']:
        countries.append(country['country'])
print(countries)
35/5:
# iterate over the soccer_match list to create a new list with the name of the country for each team
countries = []
# code goes here
for index in soccer_match:
    for country in index['country']:
        countries.append(index['country'])
print(countries)
35/6:
# iterate over the soccer_match list to create a new list with the name of the country for each team
countries = []
# code goes here
for index in soccer_match:
    for country in index['country']:
        countries.append(index['country'])
        print(countries)
35/7:
# iterate over the soccer_match list to create a new list with the name of the country for each team
countries = []
# code goes here
for index in soccer_match:
    for country in index['country']:
        countries.append(index['country'])
    print(countries)
35/8:
# iterate over the soccer_match list to create a new list with the name of the country for each team
countries = []
# code goes here
for index in soccer_match:
    for country in index['country']:
        countries.append(index['country'])
print(countries)
35/9:
# iterate over the soccer_match list to create a new list with the name of the country for each team
countries = []
# code goes here
for index in soccer_match:
    for country in index['country']:
        countries.append(country[index])
print(countries)
35/10:
# iterate over the soccer_match list to create a new list with the name of the country for each team
countries = []
# code goes here
for index in soccer_match:
    for country in index['country']:
        countries.append(country['country'])
print(countries)
35/11:
# iterate over the soccer_match list to create a new list with the name of the country for each team
countries = []
# code goes here
for index in soccer_match:
    for country in index['country']:
        
        countries.append(index['country'])
        print(countries)
35/12:
# iterate over the soccer_match list to create a new list with the name of the country for each team
countries = []
# code goes here
for index in soccer_match:
    for country in index['country']:
        
        countries.append(index['country'])
print(countries)
35/13:
# iterate over the soccer_match list to create a new list with the name of the country for each team
countries = []
# code goes here
for index in soccer_match:
    countries.append(index['country'])
print(countries)
35/14:
# iterate over the soccer_match list to create a new list with the colors for each team
# this should be only one list containing strings for each of the country's colors
colors = []
# code goes here
for index in soccer_match:
    for col in index['colors']:
        colors.append(col['colors'])
        print(colors)
35/15:
# iterate over the soccer_match list to create a new list with the colors for each team
# this should be only one list containing strings for each of the country's colors
colors = []
# code goes here
for index in soccer_match:
    for col in index['colors']:
        colors.append(index['colors'])
        print(colors)
35/16:
# iterate over the soccer_match list to create a new list with the colors for each team
# this should be only one list containing strings for each of the country's colors
colors = []
# code goes here
for index in soccer_match:
    for col in index['colors']:
        colors.append(index['colors'])
    print(colors)
35/17:
# iterate over the soccer_match list to create a new list with the colors for each team
# this should be only one list containing strings for each of the country's colors
colors = []
# code goes here
for index in soccer_match:
    for col in index['colors']:
        colors.append(index['colors'])
print(colors)
35/18:
# iterate over the soccer_match list to create a new list with the colors for each team
# this should be only one list containing strings for each of the country's colors
colors = []
# code goes here
for index in soccer_match:
    colors.append(index['colors'])
print(colors)
35/19:
# iterate over the soccer_match list to create a new list with the colors for each team
# this should be only one list containing strings for each of the country's colors
colors = []
# code goes here
for index in soccer_match:
    colors.append(index['colors'])
    both = colors[0] + colors[1]
    
print(colors)
35/20:
# iterate over the soccer_match list to create a new list with the colors for each team
# this should be only one list containing strings for each of the country's colors
colors = []
# code goes here
for index in soccer_match:
    colors.append(index['colors'])
    colors[0] + colors[1]
    
print(colors)
35/21:
# iterate over the soccer_match list to create a new list with the colors for each team
# this should be only one list containing strings for each of the country's colors
colors = []
# code goes here
for index in soccer_match:
    colors.append(index['colors'])
    colors(0) + colors(1)
    
print(colors)
35/22:
# iterate over the soccer_match list to create a new list with the colors for each team
# this should be only one list containing strings for each of the country's colors
colors = []
# code goes here
for index in soccer_match:
    colors.append(index['colors'])
    colo = colors(0) + colors(1)
    
print(colo)
35/23:
# iterate over the soccer_match list to create a new list with the colors for each team
# this should be only one list containing strings for each of the country's colors
colors = []
# code goes here
for index in soccer_match:
    colors.append(index['colors'])
    colors.extend(index)
    
    
print(colors)
35/24:
# iterate over the soccer_match list to create a new list with the colors for each team
# this should be only one list containing strings for each of the country's colors
colors = []
# code goes here
for index in soccer_match:
    colors.append(index['colors'])
    
    
    
print(colors)
35/25:
# iterate over the soccer_match list to create a new list with the colors for each team
# this should be only one list containing strings for each of the country's colors
colors = []
# code goes here
for index in soccer_match:
    colors.append(index['colors'])
    merge = zip(colors)
    
    
    
print(merge)
35/26:
# iterate over the soccer_match list to create a new list with the colors for each team
# this should be only one list containing strings for each of the country's colors
colors = []
# code goes here
for index in soccer_match:
    colors.append(index['colors'])
    
print(colors)
35/27:
# iterate over the soccer_match list to create a new list with the colors for each team
# this should be only one list containing strings for each of the country's colors
colors = []
# code goes here
for index in soccer_match:
    for col in index['colors']
    colors.append(col)
    
print(colors)
35/28:
# iterate over the soccer_match list to create a new list with the colors for each team
# this should be only one list containing strings for each of the country's colors
colors = []
# code goes here
for index in soccer_match:
    for col in index['colors']:
    colors.append(col)
    
print(colors)
35/29:
# iterate over the soccer_match list to create a new list with the colors for each team
# this should be only one list containing strings for each of the country's colors
colors = []
# code goes here
for index in soccer_match:
    for col in index['colors']:
        colors.append(col)
    
print(colors)
35/30:
players = []
# code goes here
for index in soccer_match:
    for player in index['players']:
        players.append(index['players'])
print(players)
35/31:
players = []
# code goes here
for index in soccer_match:
    for player in index['players']:
        players.append(index['players'])
    print(players)
35/32:
players = []
# code goes here
for index in soccer_match:
    for player in index['players']:
        players.append(player)
print(players)
35/33:
players = []
# code goes here
for index in soccer_match:
    for player in index['players']:
        players.append(player)
    print(players)
35/34:
players = []
# code goes here
for index in soccer_match:
    for player in index['players']:
        players.append(player)
        print(players)
35/35:
players = []
# code goes here
for index in soccer_match:
    for player in index['players']:
        players.append(player)
    print(players)
35/36:
players = []
# code goes here
for index in soccer_match:
    for player in index['players']:
        players.append(player)
print(players)
35/37:
captains = []
# code goes here
for index in soccer_match:
    for cap in index['players']:
        if index['captain'] = True:
            captains.append(cap)
print(captains)
35/38:
captains = []
# code goes here
for index in soccer_match:
    for cap in index['players']:
        if index['captain'] == True:
            captains.append(cap)
print(captains)
35/39:
captains = []
# code goes here
for index in soccer_match:
    for cap in index['players']:
        if cap['captain'] == True:
            captains.append(cap)
print(captains)
35/40:
home_team_players = []
# code goes here
for index in soccer_match:
    for home in index['home_team']:
        if index['home_team'] == True:
            
        home_team_players.append(index['players']) 
print(home_team_players)
35/41:
home_team_players = []
# code goes here
for index in soccer_match:
    for home in index['home_team']:
        if index['home_team'] == True:  
            home_team_players.append(index['players']) 
print(home_team_players)
35/42:
home_team_players = []
# code goes here
for index in soccer_match:
    for home in index['home_team']:
        if home['home_team'] == True:  
            home_team_players.append(index['players']) 
print(home_team_players)
35/43:
home_team_players = []
# code goes here
for index in soccer_match:
    for home in index['home_team']:
        if home['home_team'] == True:  
            home_team_players.append(home) 
print(home_team_players)
35/44:
home_team_players = []

for index in soccer_match:
    if index['home_team'] == True:
        #homies = index['home_team']
        for home in index['players']:
            home_team_players.append(home)
print(home_team_players)
35/45:
away_team_forwards = []
# code goes here
for in index soccer_match:
    if index['home_team'] == False:
        for forward in index['players']:
            if index['position'] = 'Forward':
                away_team_forwards.append(forward)
print(away_team_forwards)
35/46:
away_team_forwards = []
# code goes here
for index in soccer_match:
    if index['home_team'] == False:
        for forward in index['players']:
            if index['position'] = 'Forward':
                away_team_forwards.append(forward)
print(away_team_forwards)
35/47:
away_team_forwards = []
# code goes here
for index in soccer_match:
    if index['home_team'] == False:
        for forward in index['players']:
            if index['position'] == 'Forward':
                away_team_forwards.append(forward)
print(away_team_forwards)
35/48:
away_team_forwards = []
# code goes here
for index in soccer_match:
    if index['home_team'] == False:
        for forward in index['players']:
            if forward['position'] == 'Forward':
                away_team_forwards.append(forward)
print(away_team_forwards)
35/49:
player_with_highest_num = 
# code goes here
for index in soccer_match:
    shirt_nums = []
    for player in index['players']:
        shirt_nums.append(player['shirt_number'])
        highest = max(shirt_nums)
        if player['shirt_number'] == highest:
35/50:
player_with_highest_num = 0
# code goes here
for index in soccer_match:
    shirt_nums = []
    for player in index['players']:
        shirt_nums.append(player['shirt_number'])
        highest = max(shirt_nums)
        if player['shirt_number'] == highest:
35/51:
player_with_highest_num = 0
# code goes here
for index in soccer_match:
    shirt_nums = []
    for player in index['players']:
        shirt_nums.append(player['shirt_number'])
        highest = max(shirt_nums)
        #if player['shirt_number'] == highest:
35/52:
player_with_highest_num = 0
# code goes here
for index in soccer_match:
    shirt_nums = []
    for player in index['players']:
        shirt_nums.append(player['shirt_number'])
        highest = max(shirt_nums)
        #if player['shirt_number'] == highest:
print(highest)
35/53:
player_with_highest_num = 0
# code goes here
for index in soccer_match:
    shirt_nums = []
    for player in index['players']:
        shirt_nums.append(player['shirt_number'])
        highest = max(shirt_nums)
        #if player['shirt_number'] == highest:
        if player['shirt_number'] == highest:
            player_with_highest_num = index[highest]

        
print(highest)
35/54:
player_with_highest_num = 0
# code goes here
for index in soccer_match:
    shirt_nums = []
    for player in index['players']:
        shirt_nums.append(player['shirt_number'])
        highest = max(shirt_nums)
        #if player['shirt_number'] == highest:
        if player['shirt_number'] == highest:
            player_with_highest_num = player[highest]

        
print(highest)
35/55:
player_with_highest_num = 0
# code goes here
for index in soccer_match:
    shirt_nums = []
    for player in index['players']:
        shirt_nums.append(player['shirt_number'])
        highest = max(shirt_nums)
        #if player['shirt_number'] == highest:
        if player['shirt_number'] == highest:
            player_with_highest_num = player['players']

        
print(highest)
35/56:
player_with_highest_num = 0
# code goes here
for index in soccer_match:
    shirt_nums = []
    for player in index['players']:
        shirt_nums.append(player['shirt_number'])
        highest = max(shirt_nums)
        #if player['shirt_number'] == highest:
        

        
print(highest)
35/57:
player_names = []
# code goes here
for index in soccer_match:
    for players in index['players']:
        player_names = players['name']
print(player_names)
35/58:
player_names = []
# code goes here
for index in soccer_match:
    for players in index['players']:
        player_names = players['name'].title()
print(player_names)
35/59:
player_names = []
# code goes here
for index in soccer_match:
    for players in index['players']:
        player_names = index['name'].title()
print(player_names)
35/60:
player_names = []
# code goes here
for index in soccer_match:
    for players in index['players']:
        player_names = players['name'].title()
print(player_names)
35/61:
soccer_match = [
  { "home_team": True,
    "away_team": False,
    "country": "France",
    "num_passes": 484,
    "passes_completed": 423,
    "fouls_committed": 16,
    "colors": ["blue", "white", "red"],
    "players": [
      {
        "name": "Hugo LLORIS",
        "captain": True,
        "shirt_number": 1,
        "position": "Goalie"
      },
      {
        "name": "Benjamin PAVARD",
        "captain": False,
        "shirt_number": 2,
        "position": "Defender"
      },
      {
        "name": "Raphael VARANE",
        "captain": False,
        "shirt_number": 4,
        "position": "Defender"
      },
      {
        "name": "Samuel UMTITI",
        "captain": False,
        "shirt_number": 5,
        "position": "Defender"
      },
      {
        "name": "Paul POGBA",
        "captain": False,
        "shirt_number": 6,
        "position": "Midfield"
      },
      {
        "name": "Antoine GRIEZMANN",
        "captain": False,
        "shirt_number": 7,
        "position": "Forward"
      },
      {
        "name": "Kylian MBAPPE",
        "captain": False,
        "shirt_number": 10,
        "position": "Forward"
      },
      {
        "name": "Ousmane DEMBELE",
        "captain": False,
        "shirt_number": 11,
        "position": "Forward"
      },
      {
        "name": "Corentin TOLISSO",
        "captain": False,
        "shirt_number": 12,
        "position": "Midfield"
      },
      {
        "name": "Ngolo KANTE",
        "captain": False,
        "shirt_number": 13,
        "position": "Midfield"
      },
      {
        "name": "Lucas HERNANDEZ",
        "captain": False,
        "shirt_number": 21,
        "position": "Defender"
      }
    ],
  },
  { "home_team": False,
    "away_team": True,
    "country": "Australia",
    "num_passes": 390,
    "passes_completed": 332,
    "fouls_committed": 19,
    "colors": ["green", "gold"],
    "players": [
      {
        "name": "Mathew RYAN",
        "captain": False,
        "shirt_number": 1,
        "position": "Goalie"
      },
      {
        "name": "Mark MILLIGAN",
        "captain": False,
        "shirt_number": 5,
        "position": "Defender"
      },
      {
        "name": "Mathew LECKIE",
        "captain": False,
        "shirt_number": 7,
        "position": "Forward"
      },
      {
        "name": "Robbie KRUSE",
        "captain": False,
        "shirt_number": 10,
        "position": "Forward"
      },
      {
        "name": "Andrew NABBOUT",
        "captain": False,
        "shirt_number": 11,
        "position": "Forward"
      },
      {
        "name": "Aaron MOOY",
        "captain": False,
        "shirt_number": 13,
        "position": "Midfield"
      },
      {
        "name": "Mile JEDINAK",
        "captain": True,
        "shirt_number": 15,
        "position": "Midfield"
      },
      {
        "name": "Aziz BEHICH",
        "captain": False,
        "shirt_number": 16,
        "position": "Defender"
      },
      {
        "name": "Joshua RISDON",
        "captain": False,
        "shirt_number": 19,
        "position": "Defender"
      },
      {
        "name": "Trent SAINSBURY",
        "captain": False,
        "shirt_number": 20,
        "position": "Defender"
      },
      {
        "name": "Tom ROGIC",
        "captain": False,
        "shirt_number": 23,
        "position": "Midfield"
      }
    ]
  }
]
35/62:
player_names = []
# code goes here
for index in soccer_match:
    for players in index['players']:
        player_names = players['name'].title()
print(player_names)
35/63:
player_names = []
# code goes here
for index in soccer_match:
    for players in index['players']:
        names = players['name'].title()
        player_names.append(names)
print(player_names)
37/1:
travel_destinations = ['argentina', 'mexico', 'italy', 'finland', 'canada', 'croatia']
# define function here
37/2:
travel_destinations = ['argentina', 'mexico', 'italy', 'finland', 'canada', 'croatia']
# define function here
def number_of_destinations():
    num = len(travel_destinations)
    return num
37/3:  number_of_destinations() # Expected output: 6
37/4:
# define function here
def next_up():
    first = travel_destinations(0)
    return first
37/5:
list_of_destinations = ['argentina', 'canada', 'croatia']
# Your code here 
next_up()
# Expected output:'argentina'
37/6:
# define function here
def next_up():
    first = travel_destinations[0]
    return first
37/7:
list_of_destinations = ['argentina', 'canada', 'croatia']
# Your code here 
next_up()
# Expected output:'argentina'
37/8:
# define function here
def favorite_destination():
    favplace = 'madagascar'
    return favplace
37/9: favorite_destination()
37/10:
favorite_destination()
# Expected output:'madagascar'
37/11:
favorite_destinations = ['argentina', 'mexico', 'italy', 'finland', 'canada', 'croatia']

    
# Your code here 
def add_favorite_destination():
    favorite_destinations.append('madagascar')
    return favorite_destinations
    #favorite_destinations[-1]
37/12:
# define function here
def add_favorite_destination():
    favorite_destinations.append('madagascar')
    return favorite_destinations
37/13:
favorite_destinations = ['argentina', 'mexico', 'italy', 'finland', 'canada', 'croatia']

    
# Your code here 
add_favorite_destination()
favorite_destinations[-1]
37/14:
capitalized_destinations = ['argentina', 'mexico', 'italy', 'finland', 'canada', 'croatia']
# define function here
def captialize_countries():
    for index in capitalized_destinations:
        formatted = index.title()
    return formatted
37/15:
# Your code here 
captialize_countries()
#['Argentina', 'Mexico', 'Italy', 'Finland', 'Canada', 'Croatia']
37/16:
capitalized_destinations = ['argentina', 'mexico', 'italy', 'finland', 'canada', 'croatia']
# define function here
def captialize_countries():
    for index in capitalized_destinations:
        formatted = index.title()
        return formatted
37/17:
# Your code here 
captialize_countries()
#['Argentina', 'Mexico', 'Italy', 'Finland', 'Canada', 'Croatia']
37/18:
capitalized_destinations = ['argentina', 'mexico', 'italy', 'finland', 'canada', 'croatia']
# define function here
def captialize_countries():
    for index in capitalized_destinations:
        formatted = capitalized_destinations.title()
        return formatted
37/19:
# Your code here 
captialize_countries()
#['Argentina', 'Mexico', 'Italy', 'Finland', 'Canada', 'Croatia']
37/20:
capitalized_destinations = ['argentina', 'mexico', 'italy', 'finland', 'canada', 'croatia']
# define function here
def captialize_countries():
    for index in capitalized_destinations:
        formatted = capitalized_destinations(index).title()
        return formatted
37/21:
# Your code here 
captialize_countries()
#['Argentina', 'Mexico', 'Italy', 'Finland', 'Canada', 'Croatia']
37/22:
capitalized_destinations = ['argentina', 'mexico', 'italy', 'finland', 'canada', 'croatia']
# define function here
def captialize_countries():
    cap = []
    for index in capitalized_destinations:
        formatted = index.title()
        cap.append(formatted)
        return cap
37/23:
# Your code here 
captialize_countries()
#['Argentina', 'Mexico', 'Italy', 'Finland', 'Canada', 'Croatia']
37/24:
capitalized_destinations = ['argentina', 'mexico', 'italy', 'finland', 'canada', 'croatia']
# define function here
def captialize_countries():
    captialized_destinations.title()
    return capitalized_destinations
37/25:
# Your code here 
captialize_countries()
#['Argentina', 'Mexico', 'Italy', 'Finland', 'Canada', 'Croatia']
37/26:
capitalized_destinations = ['argentina', 'mexico', 'italy', 'finland', 'canada', 'croatia']
# define function here
def captialize_countries():
    capitalized_destinations.title()
    return capitalized_destinations
37/27:
# Your code here 
captialize_countries()
#['Argentina', 'Mexico', 'Italy', 'Finland', 'Canada', 'Croatia']
37/28:
capitalized_destinations = ['argentina', 'mexico', 'italy', 'finland', 'canada', 'croatia']
# define function here
def captialize_countries():
    cap = []
    for index in capitalized_destinations:
        formatted = index.title()
        cap.append(formatted)
        return cap
37/29:
# Your code here 
captialize_countries()
#['Argentina', 'Mexico', 'Italy', 'Finland', 'Canada', 'Croatia']
37/30:
capitalized_destinations = ['argentina', 'mexico', 'italy', 'finland', 'canada', 'croatia']
# define function here
def captialize_countries():
    cap = []
    for index in capitalized_destinations:
        formatted = index.title()
        cap.append(formatted)
    return cap
37/31:
# Your code here 
captialize_countries()
#['Argentina', 'Mexico', 'Italy', 'Finland', 'Canada', 'Croatia']
38/1:
fork_fig = {'categories': [{'alias': 'burgers', 'title': 'Burgers'},
  {'alias': 'sandwiches', 'title': 'Sandwiches'},
  {'alias': 'salad', 'title': 'Salad'}],
 'coordinates': {'latitude': 35.10871, 'longitude': -106.56739},
 'display_phone': '(505) 881-5293',
 'distance': 3571.724649307866,
 'id': 'fork-and-fig-albuquerque',
 'image_url': 'https://s3-media1.fl.yelpcdn.com/bphoto/_-DpXKfS3jv6DyA47g6Fxg/o.jpg',
 'is_closed': False,
 'location': {'address1': '6904 Menaul Blvd NE',
  'address2': 'Ste C',
  'address3': '',
  'city': 'Albuquerque',
  'country': 'US',
  'display_address': ['6904 Menaul Blvd NE', 'Ste C', 'Albuquerque, NM 87110'],
  'state': 'NM',
  'zip_code': '87110'},
 'name': 'Fork & Fig',
 'phone': '+15058815293',
 'price': '$$',
 'rating': 4.5,
 'review_count': 604,
 'transactions': [],
 'url': 'https://www.yelp.com/biz/fork-and-fig-albuquerque?adjust_creative=SYc8R4Gowqru5h4SBKZXsQ&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=SYc8R4Gowqru5h4SBKZXsQ'}
38/2:
frontier_restaurant = {'categories': [{'alias': 'mexican', 'title': 'Mexican'},
  {'alias': 'diners', 'title': 'Diners'},
  {'alias': 'tradamerican', 'title': 'American (Traditional)'}],
 'coordinates': {'latitude': 35.0808088832532, 'longitude': -106.619402244687},
 'display_phone': '(505) 266-0550',
 'distance': 4033.6583235266075,
 'id': 'frontier-restaurant-albuquerque-2',
 'image_url': 'https://s3-media4.fl.yelpcdn.com/bphoto/M9L2z6-G0NobuDJ6YTh6VA/o.jpg',
 'is_closed': False,
 'location': {'address1': '2400 Central Ave SE',
  'address2': '',
  'address3': '',
  'city': 'Albuquerque',
  'country': 'US',
  'display_address': ['2400 Central Ave SE', 'Albuquerque, NM 87106'],
  'state': 'NM',
  'zip_code': '87106'},
 'name': 'Frontier Restaurant',
 'phone': '+15052660550',
 'price': '$',
 'rating': 4.0,
 'review_count': 1369,
 'transactions': [],
 'url': 'https://www.yelp.com/biz/frontier-restaurant-albuquerque-2?adjust_creative=SYc8R4Gowqru5h4SBKZXsQ&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=SYc8R4Gowqru5h4SBKZXsQ'}
38/3: fork_fig.keys()
38/4: frontier_restaurant.keys()
38/5: fork_fig.keys() == frontier_restaurant.keys()
38/6:
def restaurant_name(restaurant):
    res_name = []
    for index in restuarant:
        res_name = index['name']
        res_name.append(index)
        return res_name
38/7: restaurant_name(frontier_restaurant) # 'Frontier Restaurant'
38/8:
def restaurant_name(restaurant):
    res_name = []
    #for index in restuarant:
    res_name = index['name']
    res_name.append(index)
    return res_name
38/9: restaurant_name(frontier_restaurant) # 'Frontier Restaurant'
38/10:
def restaurant_name(restaurant):
    res_name = []
    for index in restaurant:
        res_name = index['name']
        res_name.append(index)
        return res_name
38/11: restaurant_name(frontier_restaurant) # 'Frontier Restaurant'
38/12:
def restaurant_name(restaurant):
    res_name = []
    for index in restaurant:
        for name in index['name']:
            res_name.append(index)
            return res_name
38/13: restaurant_name(frontier_restaurant) # 'Frontier Restaurant'
38/14:
def restaurant_name(restaurant):
    res_name = []
    for index in restaurant:
        for name in index['name']:
            res_name.append(name)
            return res_name
38/15: restaurant_name(frontier_restaurant) # 'Frontier Restaurant'
38/16:
def restaurant_name(restaurant):
    return restaurant['name']
38/17: restaurant_name(frontier_restaurant) # 'Frontier Restaurant'
38/18: restaurant_name(fork_fig)# 'Fork & Fig'
38/19:
def restaurant_rating(restaurant):
    return restaurant['rating']
38/20: restaurant_rating(frontier_restaurant) # 4.0
38/21: restaurant_rating(fork_fig) # 4.5
38/22:
def is_better(restaurant, alternative):
    first = restaurant['rating']
    second = alternative['rating']
    if first > second:
        print(first)
    elif:
        print(second)
    else:
        print("The ratings are the same.")
    return
38/23:
def is_better(restaurant, alternative):
    first = restaurant['rating']
    second = alternative['rating']
    if first > second:
        print(first)
    elif: first < second
        print(second)
    else:
        print("The ratings are the same.")
    return
38/24:
def is_better(restaurant, alternative):
    first = restaurant['rating']
    second = alternative['rating']
    if first > second:
        print(first)
    elif first < second:
        print(second)
    else:
        print("The ratings are the same.")
    return
38/25: is_better(frontier_restaurant, fork_fig) # False
38/26:
def is_better(restaurant, alternative):
    first = restaurant['rating']
    second = alternative['rating']
    if first > second:
        print(restaurant)
    elif first < second:
        print(alternative)
    else:
        print("The ratings are the same.")
    return
38/27: is_better(frontier_restaurant, fork_fig) # False
38/28:
def is_better(restaurant, alternative):
    first = restaurant['rating']
    second = alternative['rating']
    if first > second:
        print('True')
    else:
        print("False")
    return
38/29: is_better(frontier_restaurant, fork_fig) # False
38/30: is_better(fork_fig, frontier_restaurant) # True
38/31: is_better(fork_fig, fork_fig) # False
38/32:
def is_cheaper(restaurant, alternative):
    first = restaurant['price']
    second = alternative['price']
    first_price = len(first)
    second_price = len(second)
    if first_price < second_price:
        print('True')
    elif first_price > second_price:
        print('False')
    else:
        print("The prices are the same.")
    
    return
38/33: is_cheaper(fork_fig, frontier_restaurant) # False
38/34: is_cheaper(frontier_restaurant, fork_fig) # True
38/35: is_cheaper(fork_fig, fork_fig) # False
38/36:
def high_rating(restaurant, rating):
    res_rate = restuarnt['rating']
    if res_rate >= rating:
        print('True')
    else res_rate > rating:
    return
38/37:
def high_rating(restaurant, rating):
    res_rate = restuarnt['rating']
    if res_rate >= rating:
        print('True')
    else res_rate > rating:
        print('False')
    return
38/38:
def high_rating(restaurant, rating):
    res_rate = restuarnt['rating']
    if res_rate >= rating:
        print('True')
    elif res_rate > rating:
        print('False')
    return
38/39: high_rating(fork_fig, 4) # True
38/40:
def high_rating(restaurant, rating):
    res_rate = restaurant['rating']
    if res_rate >= rating:
        print('True')
    elif res_rate > rating:
        print('False')
    return
38/41: high_rating(fork_fig, 4) # True
38/42: high_rating(fork_fig, 5) # False
38/43: high_rating(fork_fig, 5) # False
38/44:
def high_rating(restaurant, rating):
    res_rate = restaurant['rating']
    if res_rate >= rating:
        print('True')
    elif res_rate < rating:
        print('False')
    return
38/45: high_rating(fork_fig, 5) # False
38/46: high_rating(fork_fig, 4) # True
38/47: high_rating(frontier_restaurant, 4) # True
38/48:
dennys = {'categories': [{'alias': 'breakfast', 'title': 'Breakfast'},
  {'alias': 'diners', 'title': 'Diners'},
  {'alias': 'tradamerican', 'title': 'American (Traditional)'}],
 'is_closed': False,
 'name': "Denny's",
 'price': '$',
 'rating': 3.0,
 'review_count': 1200}

ihop = {'categories': [{'alias': 'breakfast', 'title': 'Breakfast'},
  {'alias': 'diners', 'title': 'Diners'},
  {'alias': 'tradamerican', 'title': 'American (Traditional)'}],
 'is_closed': False,
 'name': "IHOP: International House of Pancakes",
 'price': '$',
 'rating': 3.45,
 'review_count': 1588}

mcdonalds = {'categories': [{'alias': 'breakfast', 'title': 'Breakfast'},
  {'alias': 'burgers', 'title': 'Burgers'},
  {'alias': 'fast food', 'title': 'Good Food Fast'}],
 'is_closed': False,
 'name': "McDonalds",
 'price': '$',
 'rating': 3.45,
 'review_count': 2455}

pearl_street_oyster_bar = {'categories': [{'alias': 'seafood', 'title': 'Seafood'},
  {'alias': 'gourmet', 'title': 'Gourmet'},
  {'alias': 'Shellfish', 'title': 'Shellfish'}],
 'is_closed': False,
 'name': "Pear Street Oyster Bar",
 'price': '$$$',
 'rating': 4.75,
 'review_count': 350}
38/49: restaurant_list = [pearl_street_oyster_bar, mcdonalds, ihop, dennys, fork_fig, frontier_restaurant]
38/50:
# code goes here
def mean_review_count(list_of_restaurants):
    reviews = list_of_restaurants['review_count']
    mean(reviews)
    return
38/51: mean_review_count(restaurant_list) #1261.0
38/52:
# code goes here
def mean_review_count(list_of_restaurants):
    reviews = list_of_restaurants['review_count']
    mean(reviews)
    return
38/53:
# code goes here
def mean_review_count(list_of_restaurants):
    for index in list_of_restaurants:
        reviews = index['review_count']
        mean(reviews)
        return
38/54:
# code goes here
def mean_review_count(list_of_restaurants):
    for index in list_of_restaurants:
        reviews = index['review_count']
        mean(reviews)
        return
38/55: restaurant_list = [pearl_street_oyster_bar, mcdonalds, ihop, dennys, fork_fig, frontier_restaurant]
38/56:
# code goes here
def mean_review_count(list_of_restaurants):
    for index in list_of_restaurants:
        reviews = index['review_count']
        mean(reviews)
        return
38/57: mean_review_count(restaurant_list) #1261.0
38/58:
# code goes here
def mean_review_count(list_of_restaurants):
    for index in list_of_restaurants:
        reviews = index['review_count']
        mean(reviews)
        return
38/59:
# code goes here
def mean_review_count(list_of_restaurants):
    for index in list_of_restaurants:
        reviews = index['review_count']
     
        return
38/60:
# code goes here
def mean_review_count(list_of_restaurants):
    for index in list_of_restaurants:
        reviews = index['review_count']
     
        return
38/61:
# code goes here
def mean_review_count(list_of_restaurants):
    for index in list_of_restaurants:
        reviews = index['review_count']
     
        return
38/62:
# code goes here
def mean_review_count(list_of_restaurants):
    reviews = []
    for index in list_of_restaurants:
        reviews.append(index['review_count'])
     
        return
39/1:
# code goes here
def mean_review_count(list_of_restaurants):
    reviews = []
    for index in list_of_restaurants:
        reviews.append(index['review_count'])
     
        return
39/2:
# code goes here
def mean_review_count(list_of_restaurants):
    reviews = []
    for index in list_of_restaurants:
        reviews.append(index['review_count'])
    mean = sum(reviews)/len(reviews)
    return mean
39/3: mean_review_count(restaurant_list) #1261.0
39/4: restaurant_list = [pearl_street_oyster_bar, mcdonalds, ihop, dennys, fork_fig, frontier_restaurant]
39/5:
dennys = {'categories': [{'alias': 'breakfast', 'title': 'Breakfast'},
  {'alias': 'diners', 'title': 'Diners'},
  {'alias': 'tradamerican', 'title': 'American (Traditional)'}],
 'is_closed': False,
 'name': "Denny's",
 'price': '$',
 'rating': 3.0,
 'review_count': 1200}

ihop = {'categories': [{'alias': 'breakfast', 'title': 'Breakfast'},
  {'alias': 'diners', 'title': 'Diners'},
  {'alias': 'tradamerican', 'title': 'American (Traditional)'}],
 'is_closed': False,
 'name': "IHOP: International House of Pancakes",
 'price': '$',
 'rating': 3.45,
 'review_count': 1588}

mcdonalds = {'categories': [{'alias': 'breakfast', 'title': 'Breakfast'},
  {'alias': 'burgers', 'title': 'Burgers'},
  {'alias': 'fast food', 'title': 'Good Food Fast'}],
 'is_closed': False,
 'name': "McDonalds",
 'price': '$',
 'rating': 3.45,
 'review_count': 2455}

pearl_street_oyster_bar = {'categories': [{'alias': 'seafood', 'title': 'Seafood'},
  {'alias': 'gourmet', 'title': 'Gourmet'},
  {'alias': 'Shellfish', 'title': 'Shellfish'}],
 'is_closed': False,
 'name': "Pear Street Oyster Bar",
 'price': '$$$',
 'rating': 4.75,
 'review_count': 350}
39/6: restaurant_list = [pearl_street_oyster_bar, mcdonalds, ihop, dennys, fork_fig, frontier_restaurant]
39/7:
# code goes here
def mean_review_count(list_of_restaurants):
    reviews = []
    for index in list_of_restaurants:
        reviews.append(index['review_count'])
    mean = sum(reviews)/len(reviews)
    return mean
39/8: mean_review_count(restaurant_list) #1261.0
39/9:
dennys = {'categories': [{'alias': 'breakfast', 'title': 'Breakfast'},
  {'alias': 'diners', 'title': 'Diners'},
  {'alias': 'tradamerican', 'title': 'American (Traditional)'}],
 'is_closed': False,
 'name': "Denny's",
 'price': '$',
 'rating': 3.0,
 'review_count': 1200}

ihop = {'categories': [{'alias': 'breakfast', 'title': 'Breakfast'},
  {'alias': 'diners', 'title': 'Diners'},
  {'alias': 'tradamerican', 'title': 'American (Traditional)'}],
 'is_closed': False,
 'name': "IHOP: International House of Pancakes",
 'price': '$',
 'rating': 3.45,
 'review_count': 1588}

mcdonalds = {'categories': [{'alias': 'breakfast', 'title': 'Breakfast'},
  {'alias': 'burgers', 'title': 'Burgers'},
  {'alias': 'fast food', 'title': 'Good Food Fast'}],
 'is_closed': False,
 'name': "McDonalds",
 'price': '$',
 'rating': 3.45,
 'review_count': 2455}

pearl_street_oyster_bar = {'categories': [{'alias': 'seafood', 'title': 'Seafood'},
  {'alias': 'gourmet', 'title': 'Gourmet'},
  {'alias': 'Shellfish', 'title': 'Shellfish'}],
 'is_closed': False,
 'name': "Pear Street Oyster Bar",
 'price': '$$$',
 'rating': 4.75,
 'review_count': 350}
39/10: restaurant_list = [pearl_street_oyster_bar, mcdonalds, ihop, dennys, fork_fig, frontier_restaurant]
39/11:
fork_fig = {'categories': [{'alias': 'burgers', 'title': 'Burgers'},
  {'alias': 'sandwiches', 'title': 'Sandwiches'},
  {'alias': 'salad', 'title': 'Salad'}],
 'coordinates': {'latitude': 35.10871, 'longitude': -106.56739},
 'display_phone': '(505) 881-5293',
 'distance': 3571.724649307866,
 'id': 'fork-and-fig-albuquerque',
 'image_url': 'https://s3-media1.fl.yelpcdn.com/bphoto/_-DpXKfS3jv6DyA47g6Fxg/o.jpg',
 'is_closed': False,
 'location': {'address1': '6904 Menaul Blvd NE',
  'address2': 'Ste C',
  'address3': '',
  'city': 'Albuquerque',
  'country': 'US',
  'display_address': ['6904 Menaul Blvd NE', 'Ste C', 'Albuquerque, NM 87110'],
  'state': 'NM',
  'zip_code': '87110'},
 'name': 'Fork & Fig',
 'phone': '+15058815293',
 'price': '$$',
 'rating': 4.5,
 'review_count': 604,
 'transactions': [],
 'url': 'https://www.yelp.com/biz/fork-and-fig-albuquerque?adjust_creative=SYc8R4Gowqru5h4SBKZXsQ&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=SYc8R4Gowqru5h4SBKZXsQ'}
39/12:
frontier_restaurant = {'categories': [{'alias': 'mexican', 'title': 'Mexican'},
  {'alias': 'diners', 'title': 'Diners'},
  {'alias': 'tradamerican', 'title': 'American (Traditional)'}],
 'coordinates': {'latitude': 35.0808088832532, 'longitude': -106.619402244687},
 'display_phone': '(505) 266-0550',
 'distance': 4033.6583235266075,
 'id': 'frontier-restaurant-albuquerque-2',
 'image_url': 'https://s3-media4.fl.yelpcdn.com/bphoto/M9L2z6-G0NobuDJ6YTh6VA/o.jpg',
 'is_closed': False,
 'location': {'address1': '2400 Central Ave SE',
  'address2': '',
  'address3': '',
  'city': 'Albuquerque',
  'country': 'US',
  'display_address': ['2400 Central Ave SE', 'Albuquerque, NM 87106'],
  'state': 'NM',
  'zip_code': '87106'},
 'name': 'Frontier Restaurant',
 'phone': '+15052660550',
 'price': '$',
 'rating': 4.0,
 'review_count': 1369,
 'transactions': [],
 'url': 'https://www.yelp.com/biz/frontier-restaurant-albuquerque-2?adjust_creative=SYc8R4Gowqru5h4SBKZXsQ&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=SYc8R4Gowqru5h4SBKZXsQ'}
39/13:
dennys = {'categories': [{'alias': 'breakfast', 'title': 'Breakfast'},
  {'alias': 'diners', 'title': 'Diners'},
  {'alias': 'tradamerican', 'title': 'American (Traditional)'}],
 'is_closed': False,
 'name': "Denny's",
 'price': '$',
 'rating': 3.0,
 'review_count': 1200}

ihop = {'categories': [{'alias': 'breakfast', 'title': 'Breakfast'},
  {'alias': 'diners', 'title': 'Diners'},
  {'alias': 'tradamerican', 'title': 'American (Traditional)'}],
 'is_closed': False,
 'name': "IHOP: International House of Pancakes",
 'price': '$',
 'rating': 3.45,
 'review_count': 1588}

mcdonalds = {'categories': [{'alias': 'breakfast', 'title': 'Breakfast'},
  {'alias': 'burgers', 'title': 'Burgers'},
  {'alias': 'fast food', 'title': 'Good Food Fast'}],
 'is_closed': False,
 'name': "McDonalds",
 'price': '$',
 'rating': 3.45,
 'review_count': 2455}

pearl_street_oyster_bar = {'categories': [{'alias': 'seafood', 'title': 'Seafood'},
  {'alias': 'gourmet', 'title': 'Gourmet'},
  {'alias': 'Shellfish', 'title': 'Shellfish'}],
 'is_closed': False,
 'name': "Pear Street Oyster Bar",
 'price': '$$$',
 'rating': 4.75,
 'review_count': 350}
39/14: restaurant_list = [pearl_street_oyster_bar, mcdonalds, ihop, dennys, fork_fig, frontier_restaurant]
39/15:
# code goes here
def mean_review_count(list_of_restaurants):
    reviews = []
    for index in list_of_restaurants:
        reviews.append(index['review_count'])
    mean = sum(reviews)/len(reviews)
    return mean
39/16: mean_review_count(restaurant_list) #1261.0
39/17:
# code goes here
def median_review_count(list_of_restaurants):
    reviews = []
    for index in list_of_restaurants:
        reviews.append(index['review_count'])
        length = len(reviews)
        median = reviews/reviews(length)
    return median
39/18: median_review_count(restaurant_list) #1284.5
39/19:
# code goes here
def median_review_count(list_of_restaurants):
    reviews = []
    for index in list_of_restaurants:
        reviews.append(index['review_count'])
        length = len(reviews)
        #median = reviews/reviews(length)
    return median
39/20: median_review_count(restaurant_list) #1284.5
39/21:
# code goes here
def median_review_count(list_of_restaurants):
    reviews = []
    for index in list_of_restaurants:
        reviews.append(index['review_count'])
        length = len(reviews)
        #median = reviews/reviews(length)
    return
39/22: median_review_count(restaurant_list) #1284.5
39/23:
# code goes here
def median_review_count(list_of_restaurants):
    reviews = []
    for index in list_of_restaurants:
        reviews.append(index['review_count'])
        length = len(reviews)
        if length % 2 = 0:
            mid = length/2
            median = reviews(mid)
            
        #median = reviews/reviews(length)
    return median
39/24:
# code goes here
def median_review_count(list_of_restaurants):
    reviews = []
    for index in list_of_restaurants:
        reviews.append(index['review_count'])
        length = len(reviews)
        if length % 2 == 0:
            mid = length/2
            median = reviews(mid)
            
        #median = reviews/reviews(length)
    return median
39/25:
# code goes here
def median_review_count(list_of_restaurants):
    reviews = []
    for index in list_of_restaurants:
        reviews.append(index['review_count'])
        length = len(reviews)
        if length % 2 == 0:
            mid = length/2
            median = reviews(mid)
        elif:
            mid = length // 2
            i = mid - 1
            median = reviews(i)
            
        #median = reviews/reviews(length)
    return median
39/26:
# code goes here
def median_review_count(list_of_restaurants):
    reviews = []
    for index in list_of_restaurants:
        reviews.append(index['review_count'])
        length = len(reviews)
        if length % 2 == 0:
            mid = length/2
            median = reviews(mid)
        elif
            mid = length // 2
            i = mid - 1
            median = reviews(i)
            
        #median = reviews/reviews(length)
    return median
39/27:
# code goes here
def median_review_count(list_of_restaurants):
    reviews = []
    for index in list_of_restaurants:
        reviews.append(index['review_count'])
        length = len(reviews)
        if length % 2 == 0:
            mid = length/2
            median = reviews(mid)
        else
            mid = length // 2
            i = mid - 1
            median = reviews(i)
            
        #median = reviews/reviews(length)
    return median
39/28:
# code goes here
def median_review_count(list_of_restaurants):
    reviews = []
    for index in list_of_restaurants:
        reviews.append(index['review_count'])
        length = len(reviews)
        if length % 2 == 0:
            mid = length/2
            median = reviews(mid)
        else:
            mid = length // 2
            i = mid - 1
            median = reviews(i)
            
        #median = reviews/reviews(length)
    return median
39/29: median_review_count(restaurant_list) #1284.5
39/30:
# code goes here
def median_review_count(list_of_restaurants):
    reviews = []
    length = len(reviews)
    sort_rev = sorted([index['review_count'] for index in list_of_restaurants]):
        if length % 2 == 0:
            mid = length/2
            median = reviews(mid)
        else:
            mid = length // 2
            i = mid - 1
            median = reviews(i)
            
        #median = reviews/reviews(length)
    return median
39/31:
# code goes here
def median_review_count(list_of_restaurants):
    reviews = []
    length = len(reviews)
    sort_rev = sorted([index['review_count'] for index in list_of_restaurants]):
        if length % 2 == 0:
            mid = length/2
            median = sort_rev(mid)
        else:
            mid = length // 2
            i = mid - 1
            median = sort_rev(i)
            
        #median = reviews/reviews(length)
    return median
39/32:
# code goes here
def median_review_count(list_of_restaurants):
    reviews = []
    length = len(reviews)
    sort_rev = sorted([index['review_count'] for index in list_of_restaurants])
    if length % 2 == 0:
        mid = length/2
        median = sort_rev(mid)
    else:
        mid = length // 2
        i = mid - 1
        median = sort_rev(i)
            
        #median = reviews/reviews(length)
    return median
39/33: median_review_count(restaurant_list) #1284.5
39/34:
# code goes here
def median_review_count(list_of_restaurants):
    reviews = []
    length = len(reviews)
    sort_rev = sorted([index['review_count'] for index in list_of_restaurants])
    if length % 2 == 0:
        mid = length/2
        median = sort_rev(mid)
        return median
    else:
        mid = length // 2
        i = mid - 1
        median = sort_rev(i)
        return median
39/35: median_review_count(restaurant_list) #1284.5
39/36:
# code goes here
def median_review_count(list_of_restaurants):
    reviews = []
    length = len(reviews)
    sort_rev = sorted([index['review_count'] for index in list_of_restaurants])
    if length % 2 == 0:
        mid = int(length/2)
        median = sort_rev(mid)
        return median
    else:
        mid = length // 2
        i = mid - 1
        median = sort_rev(i)
        return median
39/37: median_review_count(restaurant_list) #1284.5
39/38:
# code goes here
def median_review_count(list_of_restaurants):
    reviews = []
    length = len(reviews)
    sort_rev = sorted([index['review_count'] for index in list_of_restaurants])
    if length % 2 == 0:
        mid = int(length/2)
        median = sort_rev[mid] 
        return median
    else:
        mid = length // 2
        i = mid - 1
        median = sort_rev(i)
        return median
39/39: median_review_count(restaurant_list) #1284.5
39/40:
# code goes here
def median_review_count(list_of_restaurants):
    reviews = []
    length = len(reviews)
    sort_rev = sorted([index['review_count'] for index in list_of_restaurants])
    if length % 2 == 0:
        mid = int(length/2)
        median = (sort_rev[mid] + sort_rev[mid-1])/2
        return median
    else:
        mid = length // 2
        i = mid - 1
        median = sort_rev(i)
        return median
39/41: median_review_count(restaurant_list) #1284.5
39/42:
# code goes here
def median_review_count(list_of_restaurants):
    reviews = []
    length = len(reviews)
    sort_rev = sorted([index['review_count'] for index in list_of_restaurants])
    if length % 2 == 0:
        mid = int(length/2)
        median = (sort_rev[mid] + sort_rev[mid-1])/2
        return median
    else:
        mid = (length-1) // 2
        median = sort_rev(mid)
        return median
39/43: median_review_count(restaurant_list) #1284.5
39/44:
# code goes here
def median_review_count(list_of_restaurants):
    reviews = []
    length = len(reviews)
    sort_rev = sorted([index['review_count'] for index in list_of_restaurants])
    if length % 2 == 0:
        mid = int(length/2)
        median = (sort_rev[mid] + sort_rev[mid-1])/2
        return median
    else:
        mid = (length-1) / 2
        median = sort_rev(mid)
        return median
39/45: median_review_count(restaurant_list) #1284.5
39/46:
# code goes here
def median_review_count(list_of_restaurants):
    reviews = []
    length = len(reviews)
    sort_rev = sorted([index['review_count'] for index in list_of_restaurants])
    if length % 2 == 0:
        mid = int(length/2)
        median = (sort_rev[mid] + sort_rev[mid-1])/2
        return median
    else:
        mid = (length-1) / 2
        median = sort_rev[mid]
        return median
39/47: median_review_count(restaurant_list) #1284.5
39/48:
# code goes here
def median_review_count(list_of_restaurants):
    reviews = []
    length = len(reviews)
    sort_rev = sorted([index['review_count'] for index in list_of_restaurants])
    if length % 2 == 0:
        mid = int(length/2)
        median = (sort_rev[mid] + sort_rev[mid-1])/2
        return median
    else:
        mid = int(length-1) / 2
        median = sort_rev[mid]
        return median
39/49: median_review_count(restaurant_list) #1284.5
40/1:
home_team_players = []
# code goes here
for index in soccer_match:
    homies = index['home_team']
    if
    
    for home in index[homies]:
        if home['home_team'] == True:  
            home_team_players.append(home) 
print(home_team_players)
40/2: x = [4 4 4 9 5 0 5 1 5 3 5 7 5 8 6 2 6 6 6 6 6 8 7 1 7 5 7 7 8 0 8 5]
40/3: x = [4, 4, 4, 9, 5, 0, 5, 1, 5, 3, 5, 7, 5, 8, 6, 2, 6, 6, 6, 6, 6, 8, 7, 1, 7, 5, 7, 7, 8, 0, 8, 5]
40/4: x = sort(x)
40/5:
import numpy as np

np.percentile(x, 75) - np.percentile(x, 25)
41/1:
import pandas as pd
df = pd.read_csv('nhis.csv')
height = list(df['height'])
df.head()
41/2:
 # Expected Output: 4785
num_items = len(height)
first_ten = height[0:11]
 # Expected Output: [74, 70, 61, 68, 66, 98, 99, 70, 65, 64]
41/3:
 # Expected Output: 4785
num_items = len(height)
first_ten = height[0:11]

print(num_items)
print(first_ten)
 # Expected Output: [74, 70, 61, 68, 66, 98, 99, 70, 65, 64]
43/1:
# Import matplotlib and plot histogram for height data
import matplotlib.pyplot as plt
%matplotlib inline  
# ^^This is a 'magic command' built into jupyter notebooks. We use it so that the visualization displays 
# in the notebook directly, instead of in a separate window.
43/2:
# Expected output below
plt.hist(height, bins=8)
43/3:
 # Expected Output: 4785
num_items = len(height)
height = height[0:11]

print(num_items)
print(height)
 # Expected Output: [74, 70, 61, 68, 66, 98, 99, 70, 65, 64]
43/4:
import pandas as pd
df = pd.read_csv('nhis.csv')
height = list(df['height'])
df.head()
43/5:
 # Expected Output: 4785
num_items = len(height)
height = height[0:11]

print(num_items)
print(height)
 # Expected Output: [74, 70, 61, 68, 66, 98, 99, 70, 65, 64]
43/6:
# Import matplotlib and plot histogram for height data
import matplotlib.pyplot as plt
%matplotlib inline  
# ^^This is a 'magic command' built into jupyter notebooks. We use it so that the visualization displays 
# in the notebook directly, instead of in a separate window.
43/7:
# Expected output below
plt.hist(height, bins=8)
43/8:
def get_mean(data):

    mean = None
    
    return round(mean,2)

test1 = [5, 4, 1, 3, 2]
test2 = [4, 2, 3, 1]

print(get_mean(test1)) # 3
print(get_mean(test2)) # 2.5
43/9:
def get_mean(data):
    length = len(data)
    mean =sum(data)
    
    return round(mean,2)

test1 = [5, 4, 1, 3, 2]
test2 = [4, 2, 3, 1]

print(get_mean(test1)) # 3
print(get_mean(test2)) # 2.5
43/10:
# After creating the function, pass the height list to the function 
mean = get_mean(height)

print("Sample Mean:", mean)

# Sample Mean: 69.58
43/11:
def get_mean(data):
    length = len(data)
    sums =sum(data)
    mean = sums/length
    
    return round(mean,2)

test1 = [5, 4, 1, 3, 2]
test2 = [4, 2, 3, 1]

print(get_mean(test1)) # 3
print(get_mean(test2)) # 2.5
43/12:
# After creating the function, pass the height list to the function 
mean = get_mean(height)

print("Sample Mean:", mean)

# Sample Mean: 69.58
43/13:
def get_mean(data):
    
    count = 0
    for index in data:
        count += index
        mean = count / len(data)
    
    
    
    return round(mean,2)

test1 = [5, 4, 1, 3, 2]
test2 = [4, 2, 3, 1]

print(get_mean(test1)) # 3
print(get_mean(test2)) # 2.5
43/14:
# After creating the function, pass the height list to the function 
mean = get_mean(height)

print("Sample Mean:", mean)

# Sample Mean: 69.58
43/15:
def get_mean(data):
    
    count = 0
    for index in data:
        count += index
    mean = count / len(data)
    
    
    
    return round(mean,2)

test1 = [5, 4, 1, 3, 2]
test2 = [4, 2, 3, 1]

print(get_mean(test1)) # 3
print(get_mean(test2)) # 2.5
43/16:
# After creating the function, pass the height list to the function 
mean = get_mean(height)

print("Sample Mean:", mean)

# Sample Mean: 69.58
43/17:
def get_mean(data):
    
    count = 0
    for index in data:
        count += index
        mean = count / len(data)
    
    
    
    return round(mean,2)

test1 = [5, 4, 1, 3, 2]
test2 = [4, 2, 3, 1]

print(get_mean(test1)) # 3
print(get_mean(test2)) # 2.5
43/18:
# After creating the function, pass the height list to the function 
mean = get_mean(height)

print("Sample Mean:", mean)

# Sample Mean: 69.58
43/19:
def get_mean(data):
    
    count = 0
    for index in data:
        count += index
        #mean = count / len(data)
    
     mean = round(count / len(data), 2)
    
    return mean #round(mean,2)

test1 = [5, 4, 1, 3, 2]
test2 = [4, 2, 3, 1]

print(get_mean(test1)) # 3
print(get_mean(test2)) # 2.5
43/21:
def get_mean(data):
    
    count = 0
    for index in data:
        count += index
        #mean = count / len(data)
    mean = round(count / len(data), 2)
    
    return mean #round(mean,2)

test1 = [5, 4, 1, 3, 2]
test2 = [4, 2, 3, 1]

print(get_mean(test1)) # 3
print(get_mean(test2)) # 2.5
43/22:
# After creating the function, pass the height list to the function 
mean = get_mean(height)

print("Sample Mean:", mean)

# Sample Mean: 69.58
43/23:
def get_mean(data):
    
    count = 0
    for index in data:
        count += index
    mean = count / len(data)
    
    
    
    return round(mean,2)

test1 = [5, 4, 1, 3, 2]
test2 = [4, 2, 3, 1]

print(get_mean(test1)) # 3
print(get_mean(test2)) # 2.5
43/24:
# After creating the function, pass the height list to the function 
mean = get_mean(height)

print("Sample Mean:", mean)

# Sample Mean: 69.58
43/25:
 # Expected Output: 4785
num_items = len(height)
height = height[:10]

print(num_items)
print(height)
 # Expected Output: [74, 70, 61, 68, 66, 98, 99, 70, 65, 64]
43/26:
import pandas as pd
df = pd.read_csv('nhis.csv')
height = list(df['height'])
df.head()
43/27:
 # Expected Output: 4785
num_items = len(height)
height = height[:10]

print(num_items)
print(height)
 # Expected Output: [74, 70, 61, 68, 66, 98, 99, 70, 65, 64]
43/28:
# Import matplotlib and plot histogram for height data
import matplotlib.pyplot as plt
%matplotlib inline  
# ^^This is a 'magic command' built into jupyter notebooks. We use it so that the visualization displays 
# in the notebook directly, instead of in a separate window.
43/29:
# Expected output below
plt.hist(height, bins=8)
43/30:
def get_mean(data):
    
    count = 0
    for index in data:
        count += index
    mean = count / len(data)
    
    
    
    return round(mean,2)

test1 = [5, 4, 1, 3, 2]
test2 = [4, 2, 3, 1]

print(get_mean(test1)) # 3
print(get_mean(test2)) # 2.5
43/31:
# After creating the function, pass the height list to the function 
mean = get_mean(height)

print("Sample Mean:", mean)

# Sample Mean: 69.58
43/32:
def filter_list(listA):
    
    listB = []
    for index in listA:
        if height[index] < 80:
            listB.append(index)
    
    # Perform filtering here  in a for loop
    
    return listB

test = [60, 70, 80, 90]
filter_list(test) # [60, 70]
43/33:
def filter_list(listA):
    
    listB = []
    for index in listA:
        if index < 80:
            listB.append(index)
    
    # Perform filtering here  in a for loop
    
    return listB

test = [60, 70, 80, 90]
filter_list(test) # [60, 70]
43/34:
# Filter the height list using the above function
filter_list(height)
filtered_height = None
43/35:
# Filter the height list using the above function
def filter_list(height)
filtered_height
43/36:
# Filter the height list using the above function
filter_list(height)
43/37:
# Filter the height list using the above function
filter_list(height)
plt.hist(height, bins = 8)
43/38:
# Filter the height list using the above function
filter_list(height)
height
plt.hist(height, bins = 8)
43/39:
# Get the mean of the new filtered_height list using our get_mean() function
newlist = filter_list(height)

# 66.85
43/40:
# Get the mean of the new filtered_height list using our get_mean() function
newlist = filter_list(height)
get_mean(newlist)


# 66.85
43/41:
# Filter the height list using the above function
filter_list(height)
height
plt.hist(filtered_height, bins = 8)
43/42:
# Filter the height list using the above function
filter_list(height)
plt.hist(filtered_height, bins = 8)
43/43:
# Filter the height list using the above function
filtered_height = filter_list(height)
plt.hist(filtered_height, bins = 8)
43/44:
# Get the mean of the new filtered_height list using our get_mean() function
get_mean(filtered_height)


# 66.85
43/45:
# Calculate the median of our original height list
get_mean(filtered_height)

# 67
43/46:
# Get the mean of the new filtered_height list using our get_mean() function
get_mean(filtered_height)


# 66.85
43/47:
# Calculate the median of our original height list
get_mean(height)

# 67
43/48:
import pandas as pd
df = pd.read_csv('nhis.csv')
height = list(df['height'])
df.head()
43/49:
 # Expected Output: 4785
num_items = len(height)
height = height[:10]

print(num_items)
print(height)
 # Expected Output: [74, 70, 61, 68, 66, 98, 99, 70, 65, 64]
43/50:
# Import matplotlib and plot histogram for height data
import matplotlib.pyplot as plt
%matplotlib inline  
# ^^This is a 'magic command' built into jupyter notebooks. We use it so that the visualization displays 
# in the notebook directly, instead of in a separate window.
43/51:
# Expected output below
plt.hist(height, bins=8)
43/52:
def get_mean(data):
    
    count = 0
    for index in data:
        count += index
    mean = count / len(data)
    
    
    
    return round(mean,2)

test1 = [5, 4, 1, 3, 2]
test2 = [4, 2, 3, 1]

print(get_mean(test1)) # 3
print(get_mean(test2)) # 2.5
43/53:
# After creating the function, pass the height list to the function 
mean = get_mean(height)

print("Sample Mean:", mean)

# Sample Mean: 69.58
43/54:
def filter_list(listA):
    
    listB = []
    for index in listA:
        if index < 80:
            listB.append(index)
    
    # Perform filtering here  in a for loop
    
    return listB

test = [60, 70, 80, 90]
filter_list(test) # [60, 70]
43/55:
# Filter the height list using the above function
filtered_height = filter_list(height)
plt.hist(filtered_height, bins = 8)
43/56:
# Get the mean of the new filtered_height list using our get_mean() function
get_mean(filtered_height)


# 66.85
43/57:
def get_median(data):

    data_sorted = [sorted(index(data)) for index in data:
                   length = len(data_sorted)
                   if length % 2 == 0:
                       ind1 = length/2
                       ind2 = ind1 + 1
                       median = (index(ind1) + index(ind2))/2
                   elif length % 2 == 1:
                        ind = length(index)//2
                        median = index(ind)
                   return round(median,2)
    
    # Check for even/odd and perform calculations accordingly - use if-else 
   
    pass

test1 = [5, 4, 1, 3, 2]
test2 = [4, 2, 3, 1]

print(get_median(test1)) # 3
print(get_median(test2)) # 2.5
43/58:
def get_median(data):

    data_sorted = [sorted(index(data)) for index in data
                   length = len(data_sorted)
                   if length % 2 == 0:
                       ind1 = length/2
                       ind2 = ind1 + 1
                       median = (index(ind1) + index(ind2))/2
                   elif length % 2 == 1:
                        ind = length(index)//2
                        median = index(ind)
                   return round(median,2)
    
    # Check for even/odd and perform calculations accordingly - use if-else 
   
    pass

test1 = [5, 4, 1, 3, 2]
test2 = [4, 2, 3, 1]

print(get_median(test1)) # 3
print(get_median(test2)) # 2.5
43/59:
def get_median(data):

    data_sorted = [sorted(index(data)) for index in data
    length = len(data_sorted)
                   if length % 2 == 0:
                       ind1 = length/2
                       ind2 = ind1 + 1
                       median = (index(ind1) + index(ind2))/2
                   elif length % 2 == 1:
                        ind = length(index)//2
                        median = index(ind)
                   return round(median,2)
    
    # Check for even/odd and perform calculations accordingly - use if-else 
   
    pass

test1 = [5, 4, 1, 3, 2]
test2 = [4, 2, 3, 1]

print(get_median(test1)) # 3
print(get_median(test2)) # 2.5
43/60:
def get_median(data):

    data_sorted = [sorted(index(data)) for index in data
                                        length = len(data_sorted)
                   if length % 2 == 0:
                       ind1 = length/2
                       ind2 = ind1 + 1
                       median = (index(ind1) + index(ind2))/2
                   elif length % 2 == 1:
                        ind = length(index)//2
                        median = index(ind)
                   return round(median,2)
    
    # Check for even/odd and perform calculations accordingly - use if-else 

test1 = [5, 4, 1, 3, 2]
test2 = [4, 2, 3, 1]

print(get_median(test1)) # 3
print(get_median(test2)) # 2.5
43/61:
def get_median(data):

    data_sorted = [sorted(index(data)) for index in data:
                   length = len(data_sorted)
                   if length % 2 == 0:
                       ind1 = length/2
                       ind2 = ind1 + 1
                       median = (index(ind1) + index(ind2))/2
                   elif length % 2 == 1:
                        ind = length(index)//2
                        median = index(ind)
                   return round(median,2)
    
    # Check for even/odd and perform calculations accordingly - use if-else 

test1 = [5, 4, 1, 3, 2]
test2 = [4, 2, 3, 1]

print(get_median(test1)) # 3
print(get_median(test2)) # 2.5
43/62:
def get_median(data):

    data_sorted = [sorted(index(data)) for index in data
                   len(data_sorted)
                   if length % 2 == 0:
                       ind1 = length/2
                       ind2 = ind1 + 1
                       median = (index(ind1) + index(ind2))/2
                   elif length % 2 == 1:
                        ind = length(index)//2
                        median = index(ind)
                   return round(median,2)
    
    # Check for even/odd and perform calculations accordingly - use if-else 

test1 = [5, 4, 1, 3, 2]
test2 = [4, 2, 3, 1]

print(get_median(test1)) # 3
print(get_median(test2)) # 2.5
43/63:
def get_median(data):

    data_sorted = [sorted(index(data)) for index in data]
                   len(data_sorted)
                   if length % 2 == 0:
                       ind1 = length/2
                       ind2 = ind1 + 1
                       median = (index(ind1) + index(ind2))/2
                   elif length % 2 == 1:
                        ind = length(index)//2
                        median = index(ind)
                   return round(median,2)
    
    # Check for even/odd and perform calculations accordingly - use if-else 

test1 = [5, 4, 1, 3, 2]
test2 = [4, 2, 3, 1]

print(get_median(test1)) # 3
print(get_median(test2)) # 2.5
43/64:
def get_median(data):

    data_sorted = [sorted(index(data)) for index in data]
    length = len(data_sorted)
                   if length % 2 == 0:
                       ind1 = length/2
                       ind2 = ind1 + 1
                       median = (index(ind1) + index(ind2))/2
                   elif length % 2 == 1:
                        ind = length(index)//2
                        median = index(ind)
                   return round(median,2)
    
    # Check for even/odd and perform calculations accordingly - use if-else 

test1 = [5, 4, 1, 3, 2]
test2 = [4, 2, 3, 1]

print(get_median(test1)) # 3
print(get_median(test2)) # 2.5
43/65:
def get_median(data):

    data_sorted = [sorted(index(data)) for index in data]
    length = len(data_sorted)
    if length % 2 == 0:
        ind1 = length/2
        ind2 = ind1 + 1
        median = (index(ind1) + index(ind2))/2
    elif length % 2 == 1:
        ind = length(index)//2
        median = index(ind)
    return round(median,2)
    
    # Check for even/odd and perform calculations accordingly - use if-else 

test1 = [5, 4, 1, 3, 2]
test2 = [4, 2, 3, 1]

print(get_median(test1)) # 3
print(get_median(test2)) # 2.5
43/66:
def get_median(data):

    data_sorted = [sorted(index(data)) for index in data]
    length = len(data_sorted)
    if length % 2 == 0:
        ind1 = length/2
        ind2 = ind1 + 1
        median = (index(ind1) + index(ind2))/2
    elif length % 2 == 1:
        ind = length(index)//2
        median = index(ind)
    return round(median,2)
    
    # Check for even/odd and perform calculations accordingly - use if-else 

test1 = [5, 4, 1, 3, 2]
test2 = [4, 2, 3, 1]

#print(get_median(test1)) # 3
#print(get_median(test2)) # 2.5
43/67:
# Calculate the median of our original height list
get_median(height)

# 67
43/68:
def get_median(data):
    
    data2 = sorted(data)
    length = len(data2)
    
    if length % 2 == 0:
        ind1 = length/2
        ind2 = ind1 + 1
        median = (data2(ind1) + data2(ind2))/2
    elif length % 2 == 1:
        ind = length(data2)//2
        median = data2(ind)
    return round(median,2)
    
    # Check for even/odd and perform calculations accordingly - use if-else 

test1 = [5, 4, 1, 3, 2]
test2 = [4, 2, 3, 1]

#print(get_median(test1)) # 3
#print(get_median(test2)) # 2.5
43/69:
# Calculate the median of our original height list
get_median(height)

# 67
43/70:
def get_median(data):
    
    data2 = sorted(data)
    length = len(data2)
    
    if length % 2 == 0:
        ind1 = length/2
        ind2 = ind1 + 1
        median = (data2[ind1] + data2[ind2])/2
    elif length % 2 == 1:
        ind = length(data2)//2
        median = data2[ind]
    return round(median,2)
    
    # Check for even/odd and perform calculations accordingly - use if-else 

test1 = [5, 4, 1, 3, 2]
test2 = [4, 2, 3, 1]

#print(get_median(test1)) # 3
#print(get_median(test2)) # 2.5
43/71:
# Calculate the median of our original height list
get_median(height)

# 67
43/72:
def get_median(data):
    
    data2 = sorted(data)
    length = len(data2)
    
    if length % 2 == 0:
        ind1 = length/2
        ind2 = ind1 + 1
        median = (data2[ind1] + data2[ind2])//2
    elif length % 2 == 1:
        ind = length(data2)//2
        median = data2[ind]
    return round(median,2)
    
    # Check for even/odd and perform calculations accordingly - use if-else 

test1 = [5, 4, 1, 3, 2]
test2 = [4, 2, 3, 1]

#print(get_median(test1)) # 3
#print(get_median(test2)) # 2.5
43/73:
# Calculate the median of our original height list
get_median(height)

# 67
43/74:
def get_median(data):
    
    data2 = sorted(data)
    length = len(data2)
    
    if length % 2 == 0:
        ind1 = length//2
        ind2 = ind1 + 1
        median = (data2[ind1] + data2[ind2])//2
    elif length % 2 == 1:
        ind = length(data2)//2
        median = data2[ind]
    return round(median,2)
    
    # Check for even/odd and perform calculations accordingly - use if-else 

test1 = [5, 4, 1, 3, 2]
test2 = [4, 2, 3, 1]

#print(get_median(test1)) # 3
#print(get_median(test2)) # 2.5
43/75:
# Calculate the median of our original height list
get_median(height)

# 67
43/76:
def get_median(data):
    
    data2 = sorted(data)
    length = len(data2)
    
    if length % 2 == 0:
        ind1 = length//2
        ind2 = ind1 + 1
        median = (data2[ind1] + data2[ind2])//2
    elif length % 2 == 1:
        ind = length(data2)//2
        median = data2[ind]
    return round(median,2)
    
    # Check for even/odd and perform calculations accordingly - use if-else 

test1 = [5, 4, 1, 3, 2]
test2 = [4, 2, 3, 1]

print(get_median(test1)) # 3
print(get_median(test2)) # 2.5
43/77:
def get_median(data):
    
    data2 = sorted(data)
    length = len(data2)
    
    if length % 2 == 0:
        ind1 = length//2
        ind2 = ind1 + 1
        median = (data2[ind1] + data2[ind2])//2
    elif length % 2 == 1:
        ind = length//2
        median = data2[ind]
    return round(median,2)
    
    # Check for even/odd and perform calculations accordingly - use if-else 

test1 = [5, 4, 1, 3, 2]
test2 = [4, 2, 3, 1]

print(get_median(test1)) # 3
print(get_median(test2)) # 2.5
43/78:
def get_median(data):
    
    data2 = sorted(data)
    length = len(data2)
    
    if length % 2 == 0:
        ind1 = length/2
        ind2 = ind1 + 1
        median = (data2[ind1] + data2[ind2])//2
    elif length % 2 == 1:
        ind = length//2
        median = data2[ind]
    return round(median,2)
    
    # Check for even/odd and perform calculations accordingly - use if-else 

test1 = [5, 4, 1, 3, 2]
test2 = [4, 2, 3, 1]

print(get_median(test1)) # 3
print(get_median(test2)) # 2.5
43/79:
def get_median(data):
    
    data2 = sorted(data)
    length = len(data2)
    
    if length % 2 == 0:
        ind1 = length//2
        ind2 = ind1 + 1
        median = (data2[ind1] + data2[ind2])//2
    elif length % 2 == 1:
        ind = length//2
        median = data2[ind]
    return round(median,2)
    
    # Check for even/odd and perform calculations accordingly - use if-else 

test1 = [5, 4, 1, 3, 2]
test2 = [4, 2, 3, 1]

print(get_median(test1)) # 3
print(get_median(test2)) # 2.5
43/80:
def get_median(data):
    
    data2 = sorted(data)
    length = len(data2)
    
    if length % 2 == 0:
        ind1 = length//2
        ind2 = ind1 - 1
        median = (data2[ind1] + data2[ind2])//2
    elif length % 2 == 1:
        ind = length//2
        median = data2[ind]
    return round(median,2)
    
    # Check for even/odd and perform calculations accordingly - use if-else 

test1 = [5, 4, 1, 3, 2]
test2 = [4, 2, 3, 1]

print(get_median(test1)) # 3
print(get_median(test2)) # 2.5
43/81:
def get_median(data):
    
    data2 = sorted(data)
    length = len(data2)
    
    if length % 2 == 0:
        ind1 = length//2
        ind2 = ind1 - 1
        median = (data2[ind1] + data2[ind2])/2
    elif length % 2 == 1:
        ind = length//2
        median = data2[ind]
    return round(median,2)
    
    # Check for even/odd and perform calculations accordingly - use if-else 

test1 = [5, 4, 1, 3, 2]
test2 = [4, 2, 3, 1]

print(get_median(test1)) # 3
print(get_median(test2)) # 2.5
43/82:
# Calculate the median of our original height list
get_median(height)

# 67
43/83:
def get_mode(data):

    # Create and populate frequency distribution
    frequency_dict = {}
    
    # For all elements in the list:
    # If an element is not in the dictionary, add it with value 1
    # If an element is already in the dictionary, +1 the value
    for i in data:
        if i not in frequency_dict:
            frequency_dict[i] = 1
        else:
            frequency_dict[i] += 1
    
    # Create a list for mode values
    modes = []
    
    #from the dictionary, add element(s) to the modes list with max frequency
    highest_freq = max(frequency_dict.values())
    for key, val in frequency_dict.items():
        if val == highest_freq:
            modes.append(key)
    # Return the mode list 
    return modes

test1 = [1, 2, 3, 5, 5, 4]
test2 = [1, 1, 1, 2, 3, 4, 5, 5, 5]

print(get_mode(test1)) # [5]
print(get_mode(test2)) # [1, 5]
43/84:
# Calculate the mode of our original height list
get_mode(height)
43/85:
def get_variance(sample):

    # First, calculate the sample mean using get_mean()
    sample_mean = get_mean(sample)
    
    # Now, subtract the sample mean from each point and square the result 
    diff = []
    length = len(sample)
    for index in sample:
        diff_sq = (index - sample_mean)**2
        diff.append(diff_sq)
    # Divide the total by the number of items in the sample to calculate variance 
    variance = sum(diff)/length
    
    return variance

test1 = [1, 2, 3, 5, 5, 4]
test2 = [1, 1, 1, 2, 3, 4, 5, 5, 5]
print(get_variance(test1)) # 2.67
print(get_mean(test1)) # 3.33
print(get_variance(test2)) # 3.25
43/86:
def get_variance(sample):

    # First, calculate the sample mean using get_mean()
    sample_mean = get_mean(sample)
    
    # Now, subtract the sample mean from each point and square the result 
    diff = []
    length = len(sample)
    for index in sample:
        diff_sq = (index - sample_mean)**2
        diff.append(diff_sq)
    # Divide the total by the number of items in the sample to calculate variance 
    variance = sum(diff)/length
    
    return round(variance,2)

test1 = [1, 2, 3, 5, 5, 4]
test2 = [1, 1, 1, 2, 3, 4, 5, 5, 5]
print(get_variance(test1)) # 2.67
print(get_mean(test1)) # 3.33
print(get_variance(test2)) # 3.25
43/87:
def get_variance(sample):

    # First, calculate the sample mean using get_mean()
    sample_mean = get_mean(sample)
    
    # Now, subtract the sample mean from each point and square the result 
    diff = []
    length = len(sample)
    for index in sample:
        diff_sq = (index - sample_mean)**2
        diff.append(diff_sq)
    # Divide the total by the number of items in the sample to calculate variance 
    variance = sum(diff)/length-1
    
    return round(variance,2)

test1 = [1, 2, 3, 5, 5, 4]
test2 = [1, 1, 1, 2, 3, 4, 5, 5, 5]
print(get_variance(test1)) # 2.67
print(get_mean(test1)) # 3.33
print(get_variance(test2)) # 3.25
43/88:
def get_variance(sample):

    # First, calculate the sample mean using get_mean()
    sample_mean = get_mean(sample)
    
    # Now, subtract the sample mean from each point and square the result 
    diff = []
    length = len(sample)-1
    for index in sample:
        diff_sq = (index - sample_mean)**2
        diff.append(diff_sq)
    # Divide the total by the number of items in the sample to calculate variance 
    variance = sum(diff)/length
    
    return round(variance,2)

test1 = [1, 2, 3, 5, 5, 4]
test2 = [1, 1, 1, 2, 3, 4, 5, 5, 5]
print(get_variance(test1)) # 2.67
print(get_mean(test1)) # 3.33
print(get_variance(test2)) # 3.25
43/89:
# Calculate the variance of our original height list
get_variance(height)
# 87.74
43/90:
# Calculate the variance of our original height list
get_variance(filtered_height)
# 87.74
43/91:
# Calculate the variance of our original height list
get_variance(height)
# 87.74
43/92:
from math import sqrt

def get_stddev(list):

    mean = get_mean(list)
    
    stddev = sqrt(variance)
    
    return round(stddev, 2)

test = [120,112,131,211,312,90]

print (get_stddev(test))
# 84.03
43/93:
from math import sqrt

def get_stddev(list):

    mean = get_mean(list)
    variance = get_variance(sample)
    stddev = sqrt(variance)
    
    return round(stddev, 2)

test = [120,112,131,211,312,90]

print (get_stddev(test))
# 84.03
43/94:
from math import sqrt

def get_stddev(list):

    mean = get_mean(list)
    variance = get_variance(list)
    stddev = sqrt(list)
    
    return round(stddev, 2)

test = [120,112,131,211,312,90]

print (get_stddev(test))
# 84.03
43/95:
from math import sqrt

def get_stddev(list):

    mean = get_mean(list)
    variance = get_variance(list)
    stddev = sqrt(variance)
    
    return round(stddev, 2)

test = [120,112,131,211,312,90]

print (get_stddev(test))
# 84.03
43/96:
# Calculate the standard deviation of our original height list
get_stddev(list)
# 9.37
43/97:
# Calculate the standard deviation of our original height list
get_stddev(test)
# 9.37
43/98:
# Calculate the standard deviation of our original height list
get_stddev(height)
# 9.37
43/99:
# boxplot here
import matplotlib.pyplot as plt
%matplotlib inline

plt.style.use('ggplot')

x = height
plt.boxplot(x)
plt.title('Heights of Surveyed Individuals')
plt.show()
44/1:
# Run this cell
height = [68, 71, 61, 69, 71, 58, 72, 73, 58, 74, 
          61, 59, 69, 68, 64, 69, 72, 66, 65, 69]
weight = [165, 201, 140, 170, 192, 125, 195, 205, 
          115, 210, 135, 125, 172, 175, 145, 170, 
          200, 155, 150, 171]
45/1:
# Write a function to take in an iterable, calculate the mean and subtract the mean value
# from each element, creating and returning a new list. 

def mean_normalize(var):
    mean = sum[var]/len(var)
    mean.normal = []
    for index in var:
        sub = index - mean
        mean_normal.append(sub)
    return round(mean_normal,1)

mean_normalize([1, 2, 3, 4, 5]), mean_normalize([11, 22, 33, 44, 55])

# ([-2.0, -1.0, 0.0, 1.0, 2.0], [-22.0, -11.0, 0.0, 11.0, 22.0])
45/2:
# Write a function to take in an iterable, calculate the mean and subtract the mean value
# from each element, creating and returning a new list. 

def mean_normalize(var):
    mean = sum[var]/len(var)
    mean_normal = []
    for index in var:
        sub = index - mean
        mean_normal.append(sub)
    return round(mean_normal,1)

mean_normalize([1, 2, 3, 4, 5]), mean_normalize([11, 22, 33, 44, 55])

# ([-2.0, -1.0, 0.0, 1.0, 2.0], [-22.0, -11.0, 0.0, 11.0, 22.0])
45/3:
# Write a function to take in an iterable, calculate the mean and subtract the mean value
# from each element, creating and returning a new list. 

def mean_normalize(var):
    m = sum[var]/len(var)
    mean_normal = []
    for index in var:
        sub = index - mean
        mean_normal.append(sub)
    return round(mean_normal,1)

mean_normalize([1, 2, 3, 4, 5]), mean_normalize([11, 22, 33, 44, 55])

# ([-2.0, -1.0, 0.0, 1.0, 2.0], [-22.0, -11.0, 0.0, 11.0, 22.0])
45/4:
# Write a function to take in an iterable, calculate the mean and subtract the mean value
# from each element, creating and returning a new list. 

def mean_normalize(var):
    mean = sum(var)/len(var)
    mean_normal = []
    for index in var:
        sub = index - mean
        mean_normal.append(sub)
    return round(mean_normal,1)

mean_normalize([1, 2, 3, 4, 5]), mean_normalize([11, 22, 33, 44, 55])

# ([-2.0, -1.0, 0.0, 1.0, 2.0], [-22.0, -11.0, 0.0, 11.0, 22.0])
45/5:
# Write a function to take in an iterable, calculate the mean and subtract the mean value
# from each element, creating and returning a new list. 

def mean_normalize(var):
    mean = sum(var)/len(var)
    mean_normal = []
    for index in var:
        sub = index - mean
        mean_normal.append(sub)
    return mean_normal

mean_normalize([1, 2, 3, 4, 5]), mean_normalize([11, 22, 33, 44, 55])

# ([-2.0, -1.0, 0.0, 1.0, 2.0], [-22.0, -11.0, 0.0, 11.0, 22.0])
45/6:
# Mean normalize the height 
mean_normalize(height_normalized)
45/7:
# Mean normalize the height 
height_normalized = mean_normalize(height)
45/8:
# Run this cell
height = [68, 71, 61, 69, 71, 58, 72, 73, 58, 74, 
          61, 59, 69, 68, 64, 69, 72, 66, 65, 69]
weight = [165, 201, 140, 170, 192, 125, 195, 205, 
          115, 210, 135, 125, 172, 175, 145, 170, 
          200, 155, 150, 171]
45/9:
# Write a function to take in an iterable, calculate the mean and subtract the mean value
# from each element, creating and returning a new list. 

def mean_normalize(var):
    mean = sum(var)/len(var)
    mean_normal = []
    for index in var:
        sub = index - mean
        mean_normal.append(sub)
    return mean_normal

mean_normalize([1, 2, 3, 4, 5]), mean_normalize([11, 22, 33, 44, 55])

# ([-2.0, -1.0, 0.0, 1.0, 2.0], [-22.0, -11.0, 0.0, 11.0, 22.0])
45/10:
# Mean normalize the height 
height_normalized = mean_normalize(height)
45/11:
# Mean normalize the height 
height_normalized = mean_normalize(height)
height_normalized
45/12:
# Write a function to take in an iterable, calculate the mean and subtract the mean value
# from each element, creating and returning a new list. 

def mean_normalize(var):
    mean = sum(var)/len(var)
    mean_normal = []
    for index in var:
        sub = round(index - mean,2)
        mean_normal.append(sub)
    return mean_normal

mean_normalize([1, 2, 3, 4, 5]), mean_normalize([11, 22, 33, 44, 55])

# ([-2.0, -1.0, 0.0, 1.0, 2.0], [-22.0, -11.0, 0.0, 11.0, 22.0])
45/13:
# Mean normalize the height 
height_normalized = mean_normalize(height)
height_normalized
45/14:
# Visualize the height data distribution before and after mean normalization 
import matplotlib.pyplot as plt
import seaborn as sns
%matplotlib inline
sns.distplot(height_normalized)
sns.distplot(height);
45/15:
# Write a function to calculate the dot product of two iterables 

def dot_product(x, y):
    
    for index in x,y:
        sums = sum(x[index] * y[index])
    
    return round(sums,2)



a = [1, 2, 3]
b = [4, 5, 6]

dot_product(a,b)

#  32  calculated as (1*4 + 2*5 + 3*6)
45/16:
# Write a function to calculate the dot product of two iterables 

def dot_product(x, y):
    
    for index in x,y:
        sums = sum(x*y[index])
    
    return round(sums,2)



a = [1, 2, 3]
b = [4, 5, 6]

dot_product(a,b)

#  32  calculated as (1*4 + 2*5 + 3*6)
45/17:
# Write a function to calculate the dot product of two iterables 

def dot_product(x, y):
    
    for index in x,y:
        sums = sum(index[x] * index[y])
    
    return round(sums, 2)



a = [1, 2, 3]
b = [4, 5, 6]

dot_product(a,b)

#  32  calculated as (1*4 + 2*5 + 3*6)
45/18:
# Write a function to calculate the dot product of two iterables 

def dot_product(x, y):
    
    for index in x,y:
        sums = index[x] * index[y]
    
    return round(sums, 2)



a = [1, 2, 3]
b = [4, 5, 6]

dot_product(a,b)

#  32  calculated as (1*4 + 2*5 + 3*6)
45/19:
# Write a function to calculate the dot product of two iterables 

def dot_product(x, y):
    
    for index in x,y:
        sums = index * index
    
    return round(sums, 2)



a = [1, 2, 3]
b = [4, 5, 6]

dot_product(a,b)

#  32  calculated as (1*4 + 2*5 + 3*6)
45/20:
# Write a function to calculate the dot product of two iterables 

def dot_product(x, y):
    
    for i1, i2 in zip(x,y):
        dot_prod = sum(i1*i2)
    
    return round(dot_prod, 2)



a = [1, 2, 3]
b = [4, 5, 6]

dot_product(a,b)

#  32  calculated as (1*4 + 2*5 + 3*6)
45/21:
# Write a function to calculate the dot product of two iterables 

def dot_product(x, y):
    
    for i1, i2 in zip(x,y):
        dot_prod = sum(x[i1] + y[i2])
    
    return round(dot_prod, 2)



a = [1, 2, 3]
b = [4, 5, 6]

dot_product(a,b)

#  32  calculated as (1*4 + 2*5 + 3*6)
45/22:
# Write a function to calculate the dot product of two iterables 

def dot_product(x, y):
    
    for i in zip(x,y):
        dot_prod = sum(x[i] + y[i])
    
    return round(dot_prod, 2)



a = [1, 2, 3]
b = [4, 5, 6]

dot_product(a,b)

#  32  calculated as (1*4 + 2*5 + 3*6)
45/23:
# Write a function to calculate the dot product of two iterables 

def dot_product(x, y):
    
    for i in x,y:
        dot_prod = sum(x[i] + y[i])
    
    return round(dot_prod, 2)



a = [1, 2, 3]
b = [4, 5, 6]

dot_product(a,b)

#  32  calculated as (1*4 + 2*5 + 3*6)
45/24:
# Write a function to calculate the dot product of two iterables 

def dot_product(x, y):
    
    for i in x,y:
        dot_prod = sum(x[i] * y[i])
    
    return round(dot_prod, 2)



a = [1, 2, 3]
b = [4, 5, 6]

dot_product(a,b)

#  32  calculated as (1*4 + 2*5 + 3*6)
45/25:
# Write a function to calculate the dot product of two iterables 

def dot_product (x, y):
    mult_list = []
    for i in x,y:
        mult = x[i] * y[i]
        mult.list.append(mult)
        sums = sum(mult_list)
    
    return round(sums, 2)



a = [1, 2, 3]
b = [4, 5, 6]

dot_product(a,b)

#  32  calculated as (1*4 + 2*5 + 3*6)
45/26:
# Write a function to calculate the dot product of two iterables 

def dot_product len(x):
    mult_list = []
    for i in x,y:
        mult = x[i] * y[i]
        mult.list.append(mult)
        sums = sum(mult_list)
    
    return round(sums, 2)



a = [1, 2, 3]
b = [4, 5, 6]

dot_product(a,b)

#  32  calculated as (1*4 + 2*5 + 3*6)
45/27:
# Write a function to calculate the dot product of two iterables 

def dot_product random(len(x)):
    mult_list = []
    for i in x,y:
        mult = x[i] * y[i]
        mult.list.append(mult)
        sums = sum(mult_list)
    
    return round(sums, 2)



a = [1, 2, 3]
b = [4, 5, 6]

dot_product(a,b)

#  32  calculated as (1*4 + 2*5 + 3*6)
45/28:
# Write a function to calculate the dot product of two iterables 

def dot_product range(len(x)):
    mult_list = []
    for i in x,y:
        mult = x[i] * y[i]
        mult.list.append(mult)
        sums = sum(mult_list)
    
    return round(sums, 2)



a = [1, 2, 3]
b = [4, 5, 6]

dot_product(a,b)

#  32  calculated as (1*4 + 2*5 + 3*6)
45/29:
# Write a function to calculate the dot product of two iterables 

def dot_product(x, y):
    mult_list = []
    for i in range(len(x)):
        mult = x[i] * y[i]
        mult.list.append(mult)
        sums = sum(mult_list)
    
    return round(, 2)



a = [1, 2, 3]
b = [4, 5, 6]

dot_product(a,b)

#  32  calculated as (1*4 + 2*5 + 3*6)
45/30:
# Write a function to calculate the dot product of two iterables 

def dot_product(x, y):
    mult_list = []
    for i in range(len(x)):
        mult = x[i] * y[i]
        mult.list.append(mult)
        sums = sum(mult_list)
    
    return round(sums, 2)



a = [1, 2, 3]
b = [4, 5, 6]

dot_product(a,b)

#  32  calculated as (1*4 + 2*5 + 3*6)
45/31:
# Write a function to calculate the dot product of two iterables 

def dot_product(x, y):
    mult_list = []
    for i in range(len(x)):
        mult = x[i] * y[i]
        mult_list.append(mult)
        sums = sum(mult_list)
    
    return round(sums, 2)



a = [1, 2, 3]
b = [4, 5, 6]

dot_product(a,b)

#  32  calculated as (1*4 + 2*5 + 3*6)
45/32:
# Write a function to calculate the dot product of two iterables 

def dot_product(x, y):
    mult_list = []
    for i in x:
        mult = x[i] * y[i]
        mult_list.append(mult)
        sums = sum(mult_list)
    
    return round(sums, 2)



a = [1, 2, 3]
b = [4, 5, 6]

dot_product(a,b)

#  32  calculated as (1*4 + 2*5 + 3*6)
45/33:
# Write a function to calculate the dot product of two iterables 

def dot_product(x, y):
    mult_list = []
    for i in range(len(x)):
        mult = x[i] * y[i]
        mult_list.append(mult)
        sums = sum(mult_list)
    
    return round(sums, 2)



a = [1, 2, 3]
b = [4, 5, 6]

dot_product(a,b)

#  32  calculated as (1*4 + 2*5 + 3*6)
45/34:
# Write a function to calculate the dot product of two iterables 

def dot_product(x, y):
    mult_list = []
    for i in range(len(x)):
        mult = x[i] * y[i]
        mult_list.append(mult)
    sums = sum(mult_list)
    
    return round(sums, 2)



a = [1, 2, 3]
b = [4, 5, 6]

dot_product(a,b)

#  32  calculated as (1*4 + 2*5 + 3*6)
45/35:
# Calculate covariance using functions above

def covariance(var1, var2):

    mean1 = mean_normalize(var1)
    mean2 = mean_normalize(var2)
    numerator = dot_product(mean1,mean2)
    
    return numerator/(len(var1)-1)






# Uncomment below to check your function
# covariance(height, weight)

# 144.75789473684208
45/36:
# Calculate covariance using functions above

def covariance(var1, var2):

    mean1 = mean_normalize(var1)
    mean2 = mean_normalize(var2)
    numerator = dot_product(mean1,mean2)
    cov = numerator/(len(var1)-1)
    
    return cov






# Uncomment below to check your function
# covariance(height, weight)

# 144.75789473684208
45/37:
# Calculate covariance using functions above

def covariance(var1, var2):

    mean1 = mean_normalize(var1)
    mean2 = mean_normalize(var2)
    numerator = dot_product(mean1,mean2)
    cov = numerator/(len(var1)-1)
    
    return cov






# Uncomment below to check your function
covariance(height, weight)

144.75789473684208
45/38:
# Plot a scatter graph between height and weight to visually inspect the relationship 
plt.scatter(height, weight);
45/39:
# Calculate Correlation between two variables using formula above
import math
def correlation(var1, var2):
    mean1 = mean_normalize(var1)
    mean2 = mean_normalize(var2)
    numerator = dot_product(mean1,mean2)
    denom = sqrt(numerator**2)
    r = numerator/denom
    
    return r



correlation(height, weight)
0.98
45/40:
# Calculate Correlation between two variables using formula above
import math

def correlation(var1, var2):
    mean1 = mean_normalize(var1)
    mean2 = mean_normalize(var2)
    numerator = dot_product(mean1,mean2)
    denom = math.sqrt( numerator**2)
    r = numerator/denom
    
    return r



correlation(height, weight)
0.98
47/1:
# just run this cell
from importlib import reload
import solutions.solutions as sol
reload(sol)
47/2:
# this cell will just load and open the lyrics
# just run this cell
with open("data/lyrics.txt", "r") as f:
    lyrics = f.read()
lyrics
47/3:
# build your word_counter here
# Your code here

word_counter = None
lyrics.replace('/n', ' ').replace(',',''),replace('()','')
47/4:
# build your word_counter here
# Your code here

word_counter = None
lyrics = lyrics.replace('/n', ' ').replace(',',''),replace('()','')
47/5:
# build your word_counter here
# Your code here

word_counter = None
lyrics = lyrics.replace('/n', ' ').replace(',','').replace('()','')
47/6:
# build your word_counter here
# Your code here

word_counter = None
lyrics = lyrics.replace('/n', ' ').replace(',','').replace('()','')
lyrics
47/7:
# build your word_counter here
# Your code here

word_counter = None
no_punc = lyrics.replace('/n', ' ').replace(',','').replace('()','')
no_punc
47/8:
# build your word_counter here
# Your code here

word_counter = None
no_punc = lyrics.replace('\n', ' ').replace(',','').replace('()','')
no_punc
47/9:
# build your word_counter here
# Your code here

word_counter = None
no_punc = lyrics.replace('\n', ' ').replace(',','').replace('(','').replace(')','')
no_punc
47/10:
# build your word_counter here
# Your code here

word_counter = None
no_punc = lyrics.replace('\n', ' ').replace(',','').replace('(','').replace(')','').replace.('[','').replace(']','')
no_punc
47/11:
# build your word_counter here
# Your code here

word_counter = None
no_punc = lyrics.replace('\n', ' ').replace(',','').replace('(','').replace(')','').replace.('[','').replace(']','')

no_punc
47/12:
# build your word_counter here
# Your code here

word_counter = None
no_punc = lyrics.replace('\n', ' ').replace(',','').replace('(','').replace(')','').replace.('[','')

no_punc
47/13:
# build your word_counter here
# Your code here

word_counter = None
no_punc = lyrics.replace('\n', ' ').replace(',','').replace('(','').replace(')','').replace('[','').replace('[','').replace(']','')
no_punc
47/14:
# build your word_counter here
# Your code here

word_counter = None
no_punc = lyrics.replace('\n', ' ').replace(',','').replace('(','').replace(')','').replace('[','').replace('[','').replace(']','').replace('-',' ')
no_punc
47/15:
# build your word_counter here
# Your code here

word_counter = 0
no_punc = lyrics.replace('\n', ' ').replace(',','').replace('(','').replace(')','').replace('[','').replace('[','').replace(']','').replace('-',' ')
no_punc.lower()
no_punc.split(' ')
for i in no_punc:
47/16:
# build your word_counter here
# Your code here

word_counter = 0
no_punc = lyrics.replace('\n', ' ').replace(',','').replace('(','').replace(')','').replace('[','').replace('[','').replace(']','').replace('-',' ')
no_punc.lower()
no_punc.split(' ')
47/17:
# build your word_counter here
# Your code here

word_counter = 0
word = 0
no_punc = lyrics.replace('\n', ' ').replace(',','').replace('(','').replace(')','').replace('[','').replace('[','').replace(']','').replace('-',' ')
no_punc.lower()
no_punc.split(' ')

for word in no_punc:
    word += 1
47/18:
# build your word_counter here
# Your code here

word_counter = 0
word = 0
no_punc = lyrics.replace('\n', ' ').replace(',','').replace('(','').replace(')','').replace('[','').replace('[','').replace(']','').replace('-',' ')
no_punc.lower()
no_punc.split(' ')

for word in no_punc:
    word[no_punc] += 1
47/19:
# build your word_counter here
# Your code here

word_counter = 0
word = 0
no_punc = lyrics.replace('\n', ' ').replace(',','').replace('(','').replace(')','').replace('[','').replace('[','').replace(']','').replace('-',' ')
no_punc.lower()
no_punc.split(' ')

for word in no_punc:
    no_punc[word] += 1
47/20:
# build your word_counter here
# Your code here

word_counter = {}
no_punc = lyrics.replace('\n', ' ').replace(',','').replace('(','').replace(')','').replace('[','').replace('[','').replace(']','').replace('-',' ')
no_punc.lower()
no_punc.split(' ')

for i in no_punc:
    word[i] = word_counter.get(i,0) + 1
47/21:
# build your word_counter here
# Your code here

word_counter = {}
no_punc = lyrics.replace('\n', ' ').replace(',','').replace('(','').replace(')','').replace('[','').replace('[','').replace(']','').replace('-',' ')
no_punc.lower()
no_punc.split(' ')

for i in no_punc:
    word_counter[i] = word_counter.get(i,0) + 1
47/22:
# build your word_counter here
# Your code here

word_counter = {}
no_punc = lyrics.replace('\n', ' ').replace(',','').replace('(','').replace(')','').replace('[','').replace('[','').replace(']','').replace('-',' ')
no_punc.lower()
no_punc.split(' ')

for i in no_punc:
    word_counter[i] = word_counter.get(i,0) + 1
print(word_counter)
47/23:
# get actual word_counter here
# just run this cell

word_counter_test = sol.section1_partA(lyrics)
47/24:
# Test your code here
# just run this cell

try:
    assert word_counter==word_counter_test
    print('test passed')
except Exception as e:
    print("word_counter does not equal word_counter_test")
47/25:
# build your word_counter here
# Your code here

word_counter = {}
no_punc = lyrics.replace('\n', ' ').replace(',','').replace('(','').replace(')','').replace('[','').replace('[','').replace(']','').replace('-',' ')
no_punc.lower()
no_punc.split(' ')

#for i in no_punc:
#    word_counter[i] = word_counter.get(i,0) + 1
#print(word_counter)
47/26:
# build your word_counter here
# Your code here

word_counter = {}
no_punc = lyrics.replace('\n', ' ').replace(',','').replace('(','').replace(')','').replace('[','').replace('[','').replace(']','').replace('-',' ')
no_punc.lower()
no_punc.split(' ')

for i in no_punc:
    word_counter[i] = word_counter.get(i,0) + 1
    print(word_counter)
47/27:
# build your word_counter here
# Your code here

word_counter = {}
no_punc = lyrics.replace('\n', ' ').replace(',','').replace('(','').replace(')','').replace('[','').replace('[','').replace(']','').replace('-',' ')
no_punc.lower()
no_punc.split(' ')

for i in no_punc:
    word_counter[i] = word_counter.get(i,0) + 1
print(word_counter)
47/28:
# build your word_counter here
# Your code here

word_counter = {}
no_punc = lyrics.replace('\n', ' ').replace(',','').replace('(','').replace(')','').replace('[','').replace('[','').replace(']','').replace('-',' ')
no_punc.lower()
no_punc.split(' ')

#for i in no_punc:
 #   word_counter[i] = word_counter.get(i,0) + 1
#print(word_counter)
47/29:
# build your word_counter here
# Your code here

word_counter = {}

no_punc = lyrics.replace('\n', ' ').replace(',','').replace('(','').replace(')','').replace('[','').replace('[','').replace(']','').replace('-',' ')
no_punc.lower()
no_punc.split(' ')

#for i in no_punc:
 #   word_counter[i] = word_counter.get(i,0) + 1
#print(word_counter)
47/30:
# build your word_counter here
# Your code here

word_counter = {}

no_punc = lyrics.replace('\n', ' ').replace(',','').replace('(','').replace(')','').replace('[','').replace('[','').replace(']','').replace('-',' ')
no_punc.lower()
no_space = [i.strip() for i in no_punc.split(',')]

#for i in no_punc:
 #   word_counter[i] = word_counter.get(i,0) + 1
#print(word_counter)
47/31:
# build your word_counter here
# Your code here

word_counter = {}

no_punc = lyrics.replace('\n', ' ').replace(',','').replace('(','').replace(')','').replace('[','').replace('[','').replace(']','').replace('-',' ')
no_punc.lower()
no_space = [i.strip() for i in no_punc.split(',')]
no_space
#for i in no_punc:
 #   word_counter[i] = word_counter.get(i,0) + 1
#print(word_counter)
47/32:
# build your word_counter here
# Your code here

word_counter = {}

no_punc = lyrics.replace('\n', ' ').replace(',','').replace('(','').replace(')','').replace('[','').replace('[','').replace(']','').replace('-',' ')
no_punc.lower()
no_space = [i.strip() for i in no_punc.split(',')]

for i in no_space:
    word_counter[i] = word_counter.get(i,0) + 1
print(word_counter)
47/33:
# build your word_counter here
# Your code here

word_counter = {}

no_punc = lyrics.replace('\n', ' ').replace(',','').replace('(','').replace(')','').replace('[','').replace('[','').replace(']','').replace('-',' ')
no_punc.lower()
#no_space = [i.strip() 
for i in no_punc.split(','):
#for i in no_space:
    word_counter[i] = word_counter.get(i,0) + 1
print(word_counter)
47/34:
# build your word_counter here
# Your code here

word_counter = {}

no_punc = lyrics.replace('\n', ' ').replace(',','').replace('(','').replace(')','').replace('[','').replace('[','').replace(']','').replace('-',' ')
no_punc.lower()

no_space = [i.strip() for i in no_punc.split(' ')]

for i in no_space:
    word_counter[i] = word_counter.get(i,0) + 1
print(word_counter)
47/35:
# get actual word_counter here
# just run this cell
word_counter_test = sol.section1_partA(lyrics)
47/36:
# Test your code here
# just run this cell

try:
    assert word_counter==word_counter_test
    print('test passed')
except Exception as e:
    print("word_counter does not equal word_counter_test")
47/37:
# this cell will just load and open the lyrics
# just run this cell
with open("data/lyrics.txt", "r") as f:
    lyrics = f.read()
lyrics
47/38:
# build your word_counter here
# Your code here

word_counter = {}

no_punc = lyrics.replace('\n', ' ').replace(',','').replace('(','').replace(')','').replace('[','').replace('[','').replace(']','').replace('-',' ')
no_punc.lower()

no_space = [i.strip() for i in no_punc.split(' ')]

for i in no_space:
    word_counter[i] = word_counter.get(i,0) + 1
print(word_counter)
47/39:
# Find the word with the highest counts
# Your code here

most_common_word = max(word_counter)
47/40:
# Find the word with the highest counts
# Your code here

most_common_word = max(word_counter)
most_common_word
47/41:
# get actual most_common_word
# just run this cell

most_common_word_test = sol.section1_partB(lyrics)
47/42:
# test your solution here
# just run this cell

try:
    assert most_common_word==most_common_word_test
    print('test passed')
except Exception as e:
    print("most_common_word does not equal most_common_word_test")
47/43:
# Find the word with the highest counts
# Your code here

most_common_word = max(word_counter.values())
most_common_word
47/44:
# Find the word with the highest counts
# Your code here

most_common_word = max(word_counter.keys())
most_common_word
47/45:
# Find the word with the highest counts
# Your code here
max_value = max(word_counter.values())

most_common_word = [k for k, v in word_counter.items() if v == max_value]
most_common_word
47/46:
# get actual most_common_word
# just run this cell

most_common_word_test = sol.section1_partB(lyrics)
47/47:
# test your solution here
# just run this cell

try:
    assert most_common_word==most_common_word_test
    print('test passed')
except Exception as e:
    print("most_common_word does not equal most_common_word_test")
47/48:
# calculate the mean word counts
# Your code here
# you can write a function or just do it outright. 
def find_mean(word_counter):
    word_counter.items()
    for k,v in word_counter:
        n = len(v)
        mean_word_counts = sum(v)/n
    return round(mean_word_counts,2)
47/49:
# get actual mean word counts
# just run this cell

mean_word_counts_test = sol.section2_partA(lyrics)
47/50:
# test your solution here
# just run this cell

try:
    assert mean_word_counts==mean_word_counts_test
    print('test passed')
except Exception as e:
    print("mean_word_counts does not equal mean_word_counts_test")
47/51:
# calculate the mean word counts
# Your code here
# you can write a function or just do it outright. 
def find_mean(word_counter):
    word_counter.items()
    for k,v in word_counter:
        n = len(v)
        mean_word_counts = sum(v)/n
        return round(mean_word_counts,2)
47/52:
# calculate the mean word counts
# Your code here
# you can write a function or just do it outright. 
def find_mean(word_counter):
    word_counter.items()
    for k,v in word_counter:
        n = len(v)
        mean_word_counts = sum(v)/n
return round(mean_word_counts,2)
47/53:
# calculate the mean word counts
# Your code here
# you can write a function or just do it outright. 
def find_mean(word_counter):
    word_counter.items()
    for k,v in word_counter:
        n = len(v)
        mean_word_counts = sum(v)/n
    return round(mean_word_counts,2)
47/54:
# calculate the mean word counts
# Your code here
# you can write a function or just do it outright. 
def find_mean(word_counter):
    word_counter.items()
    n = len(v)
    for k,v in word_counter:
        mean_word_counts = sum(v)/n
    return round(mean_word_counts,2)
47/55:
# get actual mean word counts
# just run this cell

mean_word_counts_test = sol.section2_partA(lyrics)
47/56:
# test your solution here
# just run this cell

try:
    assert mean_word_counts==mean_word_counts_test
    print('test passed')
except Exception as e:
    print("mean_word_counts does not equal mean_word_counts_test")
47/57:
# calculate the mean word counts
# Your code here
# you can write a function or just do it outright. 
def find_mean(word_counter):
    word_counter.items()
    n = len(v)
    count = 0
    for k,v in word_counter:
        count += v
        mean_word_counts = count/n
    return round(mean_word_counts,2)
47/58:
# get actual mean word counts
# just run this cell

mean_word_counts_test = sol.section2_partA(lyrics)
47/59:
# test your solution here
# just run this cell

try:
    assert mean_word_counts==mean_word_counts_test
    print('test passed')
except Exception as e:
    print("mean_word_counts does not equal mean_word_counts_test")
47/60:
# calculate the mean word counts
# Your code here
# you can write a function or just do it outright. 
def find_mean(word_counter):
    word_counter.items()
    n = len(v)
    count = 0
    for k,v in word_counter:
        count += v
        mean_word_counts = count/n
    return round(mean_word_counts,2) 
print(mean_word_counts)
47/61:
# calculate the mean word counts
# Your code here
# you can write a function or just do it outright. 
def find_mean(word_counter):
    word_counter.items()
    n = len(v)
    count = 0
    for k,v in word_counter:
        count += v
        mean_word_counts = count/n
    return round(mean_word_counts,2) 
    print(mean_word_counts)
47/62:
# calculate the mean word counts
# Your code here
# you can write a function or just do it outright. 
def find_mean(word_counter):
    word_counter.items()

    count = 0
    for k,v in word_counter:
        n = len(v)
        count += v
        mean_word_counts = count/n
    return round(mean_word_counts,2)
47/63:
# calculate the mean word counts
# Your code here
# you can write a function or just do it outright. 
def find_mean(word_counter):
    word_counter.items()
    count = 0
    for k,v in word_counter:
        n = len(v)
        count += v
    mean_word_counts = count/n
    return round(mean_word_counts,2)
47/64:
# get actual mean word counts
# just run this cell

mean_word_counts_test = sol.section2_partA(lyrics)
47/65:
# test your solution here
# just run this cell

try:
    assert mean_word_counts==mean_word_counts_test
    print('test passed')
except Exception as e:
    print("mean_word_counts does not equal mean_word_counts_test")
47/66:
# calculate the mean word counts
# Your code here
# you can write a function or just do it outright. 
def find_mean(word_counter):
    word_counter.items()
    count = 0
    for k,v in word_counter:
        count += v
    mean_word_counts = count/len(v)
    return round(mean_word_counts,2)
47/67:
# calculate the mean word counts
# Your code here
# you can write a function or just do it outright. 
def find_mean(word_counter):
    word_counter.items()
    count = 0
    for k,v in word_counter:
        count += v
    mean_word_counts = count/len(v)
    return round(mean_word_counts,2) 

print(find_mean(word_counter))
47/68:
# calculate the mean word counts
# Your code here
# you can write a function or just do it outright. 
def find_mean(word_counter):
    
    count = 0
    for v in word_counter.values():
        count += v
    mean_word_counts = count/len(v)
    return round(mean_word_counts,2) 

print(find_mean(word_counter))
47/69:
# calculate the mean word counts
# Your code here
# you can write a function or just do it outright. 
def find_mean(word_counter):
    
    count = 0
    for v in word_counter.values():
        #count += v
    mean_word_counts = sum(v)/len(v)
    return round(mean_word_counts,2) 

print(find_mean(word_counter))
47/70:
# calculate the mean word counts
# Your code here
# you can write a function or just do it outright. 
def find_mean(word_counter):
    
    count = 0
    for v in word_counter.values():
        #count += v
        mean_word_counts = sum(v)/len(v)
    return round(mean_word_counts,2) 

print(find_mean(word_counter))
47/71:
# calculate the mean word counts
# Your code here
# you can write a function or just do it outright. 
def find_mean(word_counter):
    val = word_counter.values()
    count = 0
    for i in val:
        count += i
        mean_word_counts = count/len(i)
    return round(mean_word_counts,2) 

print(find_mean(word_counter))
47/72:
# calculate the mean word counts
# Your code here
# you can write a function or just do it outright. 
def find_mean(word_counter):
    val = word_counter.values()
    count = 0
    for i in val:
        count += i
        mean_word_counts = count/len(val)
    return round(mean_word_counts,2) 

print(find_mean(word_counter))
47/73:
# get actual mean word counts
# just run this cell

mean_word_counts_test = sol.section2_partA(lyrics)
47/74:
# test your solution here
# just run this cell

try:
    assert mean_word_counts==mean_word_counts_test
    print('test passed')
except Exception as e:
    print("mean_word_counts does not equal mean_word_counts_test")
47/75:
# calculate the standard deviation of the word_counts
# you can write a function or just calculate it out right.  It's up to you.
# Your code here

import math

def std_dev(word_counter):
    mean = find_mean(word_counter)
    val = word_counter.values()
    for i in val:
        x = ((i - mean) ** 2)/len(val)
        std_word_counts = math.sqrt(x)
        return std_word_counts
47/76:
# get actual standard deviation of word counts
# just run this cell

std_word_counts_test = sol.section2_partB(lyrics)
47/77:
# test your solution here
# just run this cell

try:
    assert std_word_counts==std_word_counts_test
    print('test passed')
except Exception as e:
    print("std_word_counts does not equal std_word_counts_test")
47/78:
# calculate the standard deviation of the word_counts
# you can write a function or just calculate it out right.  It's up to you.
# Your code here

import math

def std_dev(word_counter):
    mean = find_mean(word_counter)
    val = word_counter.values()
    for i in val:
        x = ((i - mean) ** 2)/len(val)
        std_word_counts = math.sqrt(x)
    return std_word_counts
47/79:
# calculate the standard deviation of the word_counts
# you can write a function or just calculate it out right.  It's up to you.
# Your code here

from math import sqrt

def std_dev(word_counter):
    mean = find_mean(word_counter)
    val = word_counter.values()
    for i in val:
        x = ((i - mean) ** 2)/len(val)
        std_word_counts = sqrt(x)
    return round(std_word_counts,2)
47/80:
# get actual standard deviation of word counts
# just run this cell

std_word_counts_test = sol.section2_partB(lyrics)
47/81:
# test your solution here
# just run this cell

try:
    assert std_word_counts==std_word_counts_test
    print('test passed')
except Exception as e:
    print("std_word_counts does not equal std_word_counts_test")
47/82:
# build your word_counter here
# Your code here
def count_lyrics(lyrics):
    word_counter = {}

    no_punc = lyrics.replace('\n', ' ').replace(',','').replace('(','').replace(')','').replace('[','').replace('[','').replace(']','').replace('-',' ')
    no_punc.lower()

    no_space = [i.strip() for i in no_punc.split(' ')]

    for i in no_space:
        word_counter[i] = word_counter.get(i,0) + 1
return word_counter
47/83:
# build your word_counter here
# Your code here
def count_lyrics(lyrics):
    word_counter = {}

    no_punc = lyrics.replace('\n', ' ').replace(',','').replace('(','').replace(')','').replace('[','').replace('[','').replace(']','').replace('-',' ')
    no_punc.lower()

    no_space = [i.strip() for i in no_punc.split(' ')]

    for i in no_space:
        word_counter[i] = word_counter.get(i,0) + 1
    return word_counter
47/84:
# get actual word_counter here
# just run this cell
word_counter_test = sol.section1_partA(lyrics)
word_counter_test
47/85:
# Test your code here
# just run this cell

try:
    assert word_counter==word_counter_test
    print('test passed')
except Exception as e:
    print("word_counter does not equal word_counter_test")
47/86:
# get actual most_common_word
# just run this cell

most_common_word_test = sol.section1_partB(lyrics)
most_common_word
47/87:
# Find the word with the highest counts
# Your code here
max_value = max(word_counter.values())
most_common_word = [k for k, v in word_counter.items() if v == max_value]
47/88:
# test your solution here
# just run this cell

try:
    assert most_common_word==most_common_word_test
    print('test passed')
except Exception as e:
    print("most_common_word does not equal most_common_word_test")
47/89:
# calculate the mean word counts
# Your code here
# you can write a function or just do it outright. 

def find_mean(word_counter):
    counts = count_lyrics(lyrics)
    val = word_counter.values()
    count = 0
    for i in val:
        count += i
        mean_word_counts = count/len(val)
    return round(mean_word_counts,2) 

print(find_mean(word_counter))
47/90:
# calculate the mean word counts
# Your code here
# you can write a function or just do it outright. 

def find_mean(lyrics):
    counts = count_lyrics(lyrics)
    val = word_counter.values()
    count = 0
    for i in val:
        count += i
        mean_word_counts = count/len(val)
    return round(mean_word_counts,2) 

print(find_mean(word_counter))
47/91:
# calculate the mean word counts
# Your code here
# you can write a function or just do it outright. 

def find_mean(lyrics):
    counts = count_lyrics(lyrics)
    val = word_counter.values()
    count = 0
    for i in val:
        count += i
        mean_word_counts = count/len(val)
    return round(mean_word_counts,2)
47/92:
# get actual mean word counts
# just run this cell

mean_word_counts_test = sol.section2_partA(lyrics)
mean_word_counts_test
47/93:
# test your solution here
# just run this cell

try:
    assert mean_word_counts==mean_word_counts_test
    print('test passed')
except Exception as e:
    print("mean_word_counts does not equal mean_word_counts_test")
47/94:
# calculate the mean word counts
# Your code here
# you can write a function or just do it outright. 

def find_mean(lyrics):
    counts = count_lyrics(lyrics)
    val = word_counter.values()
    count = 0
    for i in val:
        count += i
        mean_word_counts = count/len(val)
    return round(mean_word_counts, 2)
47/95:
# get actual mean word counts
# just run this cell

mean_word_counts_test = sol.section2_partA(lyrics)
mean_word_counts_test
47/96:
# calculate the standard deviation of the word_counts
# you can write a function or just calculate it out right.  It's up to you.
# Your code here

from math import sqrt

def std_dev(lyrics):
    word_counter = count_lyrics(lyrics)
    mean = find_mean(lyrics)
    val = word_counter.values()
    for i in val:
        x = ((i - mean) ** 2)/len(val)
        std_word_counts = sqrt(x)
    return round(std_word_counts,2)
47/97:
# get actual standard deviation of word counts
# just run this cell

std_word_counts_test = sol.section2_partB(lyrics)
std_word_counts_test
47/98:
# test your solution here
# just run this cell

try:
    assert std_word_counts==std_word_counts_test
    print('test passed')
except Exception as e:
    print("std_word_counts does not equal std_word_counts_test")
47/99:
# calculate the mean word counts
# Your code here
# you can write a function or just do it outright. 

def find_mean(lyrics):
    counts = count_lyrics(lyrics)
    val = word_counter.values()
    count = 0
    for i in val:
        count += i
        mean_word_counts = count/len(val)
    return mean_word_counts
47/100:
# get actual mean word counts
# just run this cell

mean_word_counts_test = sol.section2_partA(lyrics)
mean_word_counts_test
47/101:
# calculate the standard deviation of the word_counts
# you can write a function or just calculate it out right.  It's up to you.
# Your code here

from math import sqrt

def std_dev(lyrics):
    word_counter = count_lyrics(lyrics)
    mean = find_mean(lyrics)
    val = word_counter.values()
    for i in val:
        x = ((i - mean) ** 2)/len(val)
        std_word_counts = sqrt(x)
    return std_word_counts
47/102:
# get actual standard deviation of word counts
# just run this cell

std_word_counts_test = sol.section2_partB(lyrics)
std_word_counts_test
47/103:
# test your solution here
# just run this cell

try:
    assert std_word_counts==std_word_counts_test
    print('test passed')
except Exception as e:
    print("std_word_counts does not equal std_word_counts_test")
47/104:
# Your code here
# write the function below
def transform_odds(lst):
    
    odds = 0
    for i in lst:
        if i % 2 == 1:
            odds = odds + (3 * i + 1)
    return odds
    """
    this function should count
    the number of odds in a list
    then do the following calculation for every odd
    - multiply each odd by 3
    - add 1 to each odd number
    return the sum of all of these numbers
    """
    
    pass
47/105:
# run cell to generate a list of 100 random numbers
# just run this cell

import random
random_nums = [random.randint(0, 1000) for i in range(100)]
47/106:
# run this cell to transform the random_numbers and store them to transformed_odds
# just run this cell

transformed_odds = transform_odds(random_nums)
47/107:
# run this cell to get the actual value of transformed odds
# just run this cell

transformed_odds_test = sol.section3_partA(random_nums)
47/108:
# run this cell to get the actual value of transformed odds
# just run this cell

transformed_odds_test = sol.section3_partA(random_nums)
transformed_odds_test
47/109:
# Your code here
# write the function below
def transform_odds(lst):
    
    odds = 0
    for i in lst:
        if i % 2 == 1:
            odds = odds + (3 * i) + 1
    return odds
    """
    this function should count
    the number of odds in a list
    then do the following calculation for every odd
    - multiply each odd by 3
    - add 1 to each odd number
    return the sum of all of these numbers
    """
47/110:
# run cell to generate a list of 100 random numbers
# just run this cell

import random
random_nums = [random.randint(0, 1000) for i in range(100)]
47/111:
# run this cell to transform the random_numbers and store them to transformed_odds
# just run this cell

transformed_odds = transform_odds(random_nums)
47/112:
# run this cell to get the actual value of transformed odds
# just run this cell

transformed_odds_test = sol.section3_partA(random_nums)
transformed_odds_test
47/113:
# test your solution here
# just run this cell

try:
    assert transformed_odds==transformed_odds_test
    print('test passed')
except Exception as e:
    print("transformed_odds does not equal transformed_odds_test")
47/114:
# Your code here
# write a function that checks the numbers in a list numbers
# and checks if any of the numbers are divisible in a list of divisors divisors
# it should return the all numbers in order they're given in the list 
# as a string

def find_if_divisible(numbers, divisors):
    for i, d in numbers, divisors:
        if i%d == 0:
            lst = i
            lst_to_str = str(lst)
            lst_to_str = strip(',').strip(' ')
    return lst_to_str

    """
    Example: 
    find_if_divisible([10, 19, 15, 20, 23, 30, 50, 100], [2, 8, 5])
    should return 
    "1015203050100"
    
    since all of these numbers are divisible by at least one number in the divisors list
    """
47/115:
# run this cell to get a random set of numbers and divisors
# just run this cell

numbers = [random.randint(0, 50) for i in range(200)]
divisors = [random.randint(1, 20) for i in range(5)]
47/116:
# get your solution for the random numbers above
# just run this cell

number_string = find_if_divisible(numbers=numbers, divisors=divisors)
47/117:
# Your code here
# write a function that checks the numbers in a list numbers
# and checks if any of the numbers are divisible in a list of divisors divisors
# it should return the all numbers in order they're given in the list 
# as a string

def find_if_divisible(numbers, divisors):
    for i in numbers:
        for d in divisors:
        if i%d == 0:
            lst = i
            lst_to_str = str(lst)
            lst_to_str = strip(',').strip(' ')
    return lst_to_str

    """
    Example: 
    find_if_divisible([10, 19, 15, 20, 23, 30, 50, 100], [2, 8, 5])
    should return 
    "1015203050100"
    
    since all of these numbers are divisible by at least one number in the divisors list
    """
47/118:
# Your code here
# write a function that checks the numbers in a list numbers
# and checks if any of the numbers are divisible in a list of divisors divisors
# it should return the all numbers in order they're given in the list 
# as a string

def find_if_divisible(numbers, divisors):
    for i in numbers:
        for d in divisors:
            if i%d == 0:
            lst = i
            lst_to_str = str(lst)
            lst_to_str = strip(',').strip(' ')
    return lst_to_str

    """
    Example: 
    find_if_divisible([10, 19, 15, 20, 23, 30, 50, 100], [2, 8, 5])
    should return 
    "1015203050100"
    
    since all of these numbers are divisible by at least one number in the divisors list
    """
47/119:
# Your code here
# write a function that checks the numbers in a list numbers
# and checks if any of the numbers are divisible in a list of divisors divisors
# it should return the all numbers in order they're given in the list 
# as a string

def find_if_divisible(numbers, divisors):
    for i in numbers:
        for d in divisors:
            if i%d == 0:
                lst = i
                lst_to_str = str(lst)
                lst_to_str = strip(',').strip(' ')
    return lst_to_str

    """
    Example: 
    find_if_divisible([10, 19, 15, 20, 23, 30, 50, 100], [2, 8, 5])
    should return 
    "1015203050100"
    
    since all of these numbers are divisible by at least one number in the divisors list
    """
47/120:
# run this cell to get a random set of numbers and divisors
# just run this cell

numbers = [random.randint(0, 50) for i in range(200)]
divisors = [random.randint(1, 20) for i in range(5)]
47/121:
# Your code here
# write a function that checks the numbers in a list numbers
# and checks if any of the numbers are divisible in a list of divisors divisors
# it should return the all numbers in order they're given in the list 
# as a string

def find_if_divisible(numbers, divisors):
    for i in numbers:
        for d in divisors:
            if i%d == 0:
                lst = i
                lst_to_str = str(lst)
                lst_to_str = strip(',').strip(' ')
    return lst_to_str

    """
    Example: 
    find_if_divisible([10, 19, 15, 20, 23, 30, 50, 100], [2, 8, 5])
    should return 
    "1015203050100"
    
    since all of these numbers are divisible by at least one number in the divisors list
    """
47/122:
# run this cell to get a random set of numbers and divisors
# just run this cell

numbers = [random.randint(0, 50) for i in range(200)]
divisors = [random.randint(1, 20) for i in range(5)]
47/123:
# Your code here
# write a function that checks the numbers in a list numbers
# and checks if any of the numbers are divisible in a list of divisors divisors
# it should return the all numbers in order they're given in the list 
# as a string

def find_if_divisible(numbers, divisors):
    for i in numbers:
        for d in divisors:
            if i%d == 0:
                lst = i
                lst_to_str = str(lst)
                lst_to_str = strip(',').strip(' ')
    return lst_to_str

    """
    Example: 
    find_if_divisible([10, 19, 15, 20, 23, 30, 50, 100], [2, 8, 5])
    should return 
    "1015203050100"
    
    since all of these numbers are divisible by at least one number in the divisors list
    """
47/124:
# run this cell to get a random set of numbers and divisors
# just run this cell

numbers = [random.randint(0, 50) for i in range(200)]
divisors = [random.randint(1, 20) for i in range(5)]
47/125:
# build your word_counter here
# Your code here
def count_lyrics(lyrics):
    word_counter = {}

    no_punc = lyrics.replace('\n', ' ').replace(',','').replace('(','').replace(')','').replace('[','').replace('[','').replace(']','').replace('-','  ')
    no_punc.lower()

    no_space = [i.strip() for i in no_punc.split(' ')]

    for i in no_space:
        word_counter[i] = word_counter.get(i,0) + 1
    return word_counter
47/126:
# build your word_counter here
# Your code here
def count_lyrics(lyrics):
    word_counter = {}

    no_punc = lyrics.replace('\n', ' ').replace(',','').replace('(','').replace(')','').replace('[','').replace('[','').replace(']','').replace('-','')
    no_punc.lower()

    no_space = [i.strip() for i in no_punc.split(' ')]

    for i in no_space:
        word_counter[i] = word_counter.get(i,0) + 1
    return word_counter
47/127:
# Test your code here
# just run this cell

try:
    assert word_counter==word_counter_test
    print('test passed')
except Exception as e:
    print("word_counter does not equal word_counter_test")
47/128:
# Find the word with the highest counts
# Your code here
max_value = max(word_counter.values())
most_common_word = [k for k, v in word_counter.items() if v == max_value]
47/129:
# get actual most_common_word
# just run this cell

most_common_word_test = sol.section1_partB(lyrics)
most_common_word
47/130:
# test your solution here
# just run this cell

try:
    assert most_common_word==most_common_word_test
    print('test passed')
except Exception as e:
    print("most_common_word does not equal most_common_word_test")
47/131:
# calculate the mean word counts
# Your code here
# you can write a function or just do it outright. 

def find_mean(lyrics):
    counts = count_lyrics(lyrics)
    val = word_counter.values()
    count = 0
    for i in val:
        count += i
        mean_word_counts = count/len(val)
    return mean_word_counts
47/132:
# get actual mean word counts
# just run this cell

mean_word_counts_test = sol.section2_partA(lyrics)
mean_word_counts_test
47/133:
# test your solution here
# just run this cell

try:
    assert mean_word_counts==mean_word_counts_test
    print('test passed')
except Exception as e:
    print("mean_word_counts does not equal mean_word_counts_test")
47/134:
# calculate the standard deviation of the word_counts
# you can write a function or just calculate it out right.  It's up to you.
# Your code here

from math import sqrt

def std_dev(lyrics):
    word_counter = count_lyrics(lyrics)
    mean = find_mean(lyrics)
    val = word_counter.values()
    for i in val:
        x = ((i - mean) ** 2)/len(val)
        std_word_counts = sqrt(x)
    return std_word_counts
47/135:
# get actual standard deviation of word counts
# just run this cell

std_word_counts_test = sol.section2_partB(lyrics)
std_word_counts_test
47/136:
# test your solution here
# just run this cell

try:
    assert std_word_counts==std_word_counts_test
    print('test passed')
except Exception as e:
    print("std_word_counts does not equal std_word_counts_test")
47/137:
# Your code here
# write the function below
def transform_odds(lst):
    
    odds = 0
    for i in lst:
        if i % 2 == 1:
            odds = odds + (3 * i) + 1
    return odds
    """
    this function should count
    the number of odds in a list
    then do the following calculation for every odd
    - multiply each odd by 3
    - add 1 to each odd number
    return the sum of all of these numbers
    """
47/138:
# Your code here
# write the function below
def transform_odds(lst):
    
    odds = 0
    for i in lst:
        if i % 2 == 1:
            odds = odds + (3 * i) + 1
    return odds
    """
    this function should count
    the number of odds in a list
    then do the following calculation for every odd
    - multiply each odd by 3
    - add 1 to each odd number
    return the sum of all of these numbers
    """
47/139:
# run cell to generate a list of 100 random numbers
# just run this cell

import random
random_nums = [random.randint(0, 1000) for i in range(100)]
47/140:
# run this cell to transform the random_numbers and store them to transformed_odds
# just run this cell

transformed_odds = transform_odds(random_nums)
47/141:
# run this cell to get the actual value of transformed odds
# just run this cell

transformed_odds_test = sol.section3_partA(random_nums)
transformed_odds_test
47/142:
# Your code here
# write a function that checks the numbers in a list numbers
# and checks if any of the numbers are divisible in a list of divisors divisors
# it should return the all numbers in order they're given in the list 
# as a string

def find_if_divisible(numbers, divisors):
    for i in numbers:
        for d in divisors:
            if i%d == 0:
                lst = i
                lst_to_str = str(lst)
                lst_to_str = strip(',').strip(' ')
    return lst_to_str

    """
    Example: 
    find_if_divisible([10, 19, 15, 20, 23, 30, 50, 100], [2, 8, 5])
    should return 
    "1015203050100"
    
    since all of these numbers are divisible by at least one number in the divisors list
    """
47/143:
# run this cell to get a random set of numbers and divisors
# just run this cell

numbers = [random.randint(0, 50) for i in range(200)]
divisors = [random.randint(1, 20) for i in range(5)]
49/1:
# Import numpy using the standard alias
import numpy as np
49/2:
# Your code here
py_list = [1, 2, 3, 4, 5]
py_range = range(5)
array_from_list = np.array(py_list)
array_from_range = np.array(py_range)
49/3:
# Use the conversion rate for turning height in inches to meters
list_height_inches = [65, 68, 73, 75, 78]

# Your code here
array_height_inches = np.array(list_height_inches)
array_height_meters = np.multiply(array_height_meters,0.0254)
49/4:
# Use the conversion rate for turning height in inches to meters
list_height_inches = [65, 68, 73, 75, 78]

# Your code here
array_height_inches = np.array(list_height_inches)
array_height_meters = np.multiply(array_height_inches,0.0254)
49/5:
# Use the conversion rate for turning height in inches to meters
list_height_inches = [65, 68, 73, 75, 78]

# Your code here
array_height_inches = np.array(list_height_inches)
array_height_meters = np.multiply(array_height_inches,0.0254)
array_height_meters
49/6:
# Use the conversion rate for turning weight in pounds to kilograms
list_weight_pounds = [150, 140, 220, 205, 265]

# Your code here
array_weight_pounds = np.array(list_weight_pounds)
array_weight_kg = np.divide(array_weight_pounds, 2.2046)
49/7:
# Use the conversion rate for turning weight in pounds to kilograms
list_weight_pounds = [150, 140, 220, 205, 265]

# Your code here
array_weight_pounds = np.array(list_weight_pounds)
array_weight_kg = np.divide(array_weight_pounds, 2.2046)
array_weight_kg
49/8:
# Your code here
height_squared = np.power(array_height_meters,2)
BMI_array = np.divide(array_weight_kg, height_squared)
BMI_array
49/9:
# Your code here
identity = np.ones(5)
identity
49/10:
# Your code here
np.multiply(BMI_array, identity)
49/11:
# Open a text file (csv files are just plaintext separated by commas)
f = open('bp.txt')
n_rows = len(f.readlines())
# Print number of lines in the file
print('The file has {} lines.'.format(n_rows)) 
# After using readlines, we must reopen the file
f = open('bp.txt') 
# The file has values separated by tabs; we read the first line and check it's length 
n_cols = (len(f.readline().split('\t'))) 

f = open('bp.txt')



# Your code here
# Pseudocode outline below
#1) Create a matrix of zeros that is the same size of the file
zeros = np.zeros(n_rows, n_cols)
#2) Iterate through the file: "for line in f:" Hint: using enumerate will also be required
for line in enumerate(f, 1):
    print line
    #3) Update each row of the matrix with the new stream of data
    #Hint: skip the first row (it's just column names, not the data.)
#4) Preview your results; you should now have a NumPy matrix with the data from the file
49/12:
# Open a text file (csv files are just plaintext separated by commas)
f = open('bp.txt')
n_rows = len(f.readlines())
# Print number of lines in the file
print('The file has {} lines.'.format(n_rows)) 
# After using readlines, we must reopen the file
f = open('bp.txt') 
# The file has values separated by tabs; we read the first line and check it's length 
n_cols = (len(f.readline().split('\t'))) 

f = open('bp.txt')



# Your code here
# Pseudocode outline below
#1) Create a matrix of zeros that is the same size of the file
zeros = np.zeros(n_rows, n_cols)
#2) Iterate through the file: "for line in f:" Hint: using enumerate will also be required
for line in enumerate(f, 1):
    print(line)
    #3) Update each row of the matrix with the new stream of data
    #Hint: skip the first row (it's just column names, not the data.)
#4) Preview your results; you should now have a NumPy matrix with the data from the file
49/13:
# Open a text file (csv files are just plaintext separated by commas)
f = open('bp.txt')
n_rows = len(f.readlines())
# Print number of lines in the file
print('The file has {} lines.'.format(n_rows)) 
# After using readlines, we must reopen the file
f = open('bp.txt') 
# The file has values separated by tabs; we read the first line and check it's length 
n_cols = (len(f.readline().split('\t'))) 

f = open('bp.txt')



# Your code here
# Pseudocode outline below
#1) Create a matrix of zeros that is the same size of the file
zeros = np.zeros(n_rows, n_cols)
#2) Iterate through the file: "for line in f:" Hint: using enumerate will also be required
for line in enumerate(f, 1):
    print list(line)
    #3) Update each row of the matrix with the new stream of data
    #Hint: skip the first row (it's just column names, not the data.)
#4) Preview your results; you should now have a NumPy matrix with the data from the file
50/1:
# Import pandas using the standard alias
import pandas as pd


# Import 'WorldCupMatches.csv' as a DataFrame
from sklearn.datasets import WorldCupMatches

data = WorldCupMatches()
df =  pd.DataFrame(data.data, columns=data.feature_names)
50/2:
# Import pandas using the standard alias
import pandas as pd


# Import 'WorldCupMatches.csv' as a DataFrame
#from sklearn.datasets import WorldCupMatches

data = WorldCupMatches()
df =  pd.DataFrame(data.data, columns=data.feature_names)
50/3:
# Import pandas using the standard alias
import pandas as pd


# Import 'WorldCupMatches.csv' as a DataFrame
#from sklearn.datasets import WorldCupMatches

df = pd.read_csv('WorldCupMatches.csv')
#df =  pd.DataFrame(data.data, columns=data.feature_names)
50/4:
# Print the first 7 rows of df
df.head(7)
50/5:
# Print the last 3 rows of df
df.tail(3)
50/6:
# Print a concise summary of df
df.info()
50/7:
# Print the number of rows and columns in df
df.index
df.columns
50/8:
# Print the number of rows and columns in df
df.index
#df.columns
50/9:
# Print the number of rows and columns in df
df.index
df.columns
50/10:
# Print the number of rows and columns in df
df.shape
50/11:
# Print the column names of df
df.columns
50/12:
# Print rows 3 through 5
df.iloc[2:4]
50/13:
# Print rows 5 through 9 and columns 'Home Team Name' and 'Away Team Name'
df.loc[4:8,'Home Team Name', 'Away Team Name']
50/14:
# Print rows 5 through 9 and columns 'Home Team Name' and 'Away Team Name'
df.loc[4:8,'Home Team Name']
50/15:
# Print rows 5 through 9 and columns 'Home Team Name' and 'Away Team Name'
df.loc[4:8,['Home Team Name'],['Away Team Name']]
50/16:
# Print rows 5 through 9 and columns 'Home Team Name' and 'Away Team Name'
df.loc[4:8,['Home Team Name','Away Team Name']]
50/17:
# Print all info for games played in 1950 for Group 3
df.loc[df['Year'] == 1950, ['Group 3']]
50/18:
# Print all info for games played in 1950 for Group 3
df.loc[df['Year'] == 1950, df['Stage'] == 'Group 3']
50/19:
# Print all info for games played in 1950 for Group 3
df.loc[df['Year'] == 1950, ['Stage'] == 'Group 3']
50/20:
# Print all info for games played in 1950 for Group 3
df.loc[df['Year'] == 1950, df['Stage'] == 'Group 3']
50/21:
# Print all info for games played in 1950 for Group 3
df.loc[df['Year'] == 1950] 
       
df.loc[df['Stage'] == 'Group 3']
50/22:
# Print rows 3 through 5
df.iloc[3:5]
50/23:
# Print rows 3 through 5
df.iloc[3:6]
50/24:
# Print rows 5 through 9 and columns 'Home Team Name' and 'Away Team Name'
df.loc[5:9,['Home Team Name','Away Team Name']]
50/25:
# Print all info for games played in 1950 for Group 3
df.loc[(df['Year'] == 1950) & (df['Stage'] == 'Group 3')]
50/26:
# Print the 'Attendance' column for games played in 1950 for Group 3
df.loc[df['Stage'] == 'Group 3'), ['Attendance']]
50/27:
# Print the 'Attendance' column for games played in 1950 for Group 3
df.loc[df['Stage'] == 'Group 3', ['Attendance']]
50/28:
# Number of home games played by the Netherlands
df.loc[df['Home Team Name'] == 'Netherlands'
50/29:
# Number of home games played by the Netherlands
df.loc[df['Home Team Name'] == 'Netherlands']
50/30:
# Number of home games played by the Netherlands
df.loc[df['Home Team Name'] == 'Netherlands']
df.index
50/31:
# Number of home games played by the Netherlands
df.loc[df['Home Team Name'] == 'Netherlands']
df.index('Netherlands')
50/32:
# Number of home games played by the Netherlands
df.loc[df['Home Team Name'] == 'Netherlands']
index = df.index
num_home_games = len(index)
50/33:
# Number of home games played by the Netherlands
df.loc[df['Home Team Name'] == 'Netherlands']
index = df.index
num_home_games = len(index)
num_home_games
50/34:
# Number of home games played by the Netherlands
nether = df.loc[df['Home Team Name'] == 'Netherlands']
index = df.nether
num_home_games = len(index)
num_home_games
50/35:
# Number of home games played by the Netherlands
nether = df.loc[df['Home Team Name'] == 'Netherlands']
num_home_games = len(nether)
num_home_games
50/36:
# Number of games played by the Netherlands in total
nether_total = df.loc[df['Home Team Name'] == 'Netherlands' & df['Away Team Name'] == 'Netherlands']
50/37:
# Number of games played by the Netherlands in total
nether_total = df.loc[(df['Home Team Name'] == 'Netherlands') & (df['Away Team Name'] == 'Netherlands')]
50/38:
# Number of games played by the Netherlands in total
nether_total = df.loc[(df['Home Team Name'] == 'Netherlands') & (df['Away Team Name'] == 'Netherlands')]
nether_total
50/39:
# Number of games played by the Netherlands in total
nether_total = df.loc[df['Stadium'] == 'Arena de Sao Paulo']
nether_total
50/40:
# Number of games played by the Netherlands in total
nether_games = df.loc[df['Stadium'] == 'Arena de Sao Paulo']
nether_total = len(nether_games)
nether_total
50/41:
# Number of games the USA played in the 2014 world cup
usa_play = df.loc[df(['Home Team Name'] == 'USA') & (df['Away Team Name'] == 'USA') & (df['Year'] == '2014')]
usa_play
50/42:
# Number of games the USA played in the 2014 world cup
usa_play = df.loc[df(['Home Team Name'] == 'USA') & (df['Year'] == '2014')]
usa_play
50/43:
# Number of games the USA played in the 2014 world cup
usa_play = df.loc[(df['Home Team Name'] == 'USA') & (df['Away Team Name'] == 'USA') & (df['Year'] == '2014')]
usa_play
50/44:
# Number of games the USA played in the 2014 world cup
usa_play = df.loc[(df['Home Team Name'] == 'USA') & (df['Year'] == '2014')]
usa_play
50/45:
# Number of games the USA played in the 2014 world cup
usa_home = df.loc[(df['Home Team Name'] == 'USA') & (df['Year'] == '2014')]

usa_away = df.loc[(df['Away Team Name'] == 'USA') & (df['Year'] == '2014')]
50/46:
# Number of games the USA played in the 2014 world cup
usa_home = df.loc[(df['Home Team Name'] == 'USA') & (df['Year'] == '2014')]

usa_away = df.loc[(df['Away Team Name'] == 'USA') & (df['Year'] == '2014')]
usa_away
50/47:
# Number of games played by the Netherlands in total
nether_away_games = df.loc[df['Away Team Home'] == 'Netherlands']
nether_total = len(nether_away_games)
nether_total
50/48:
# Number of games played by the Netherlands in total
nether_away_games = df.loc[df['Away Team Name'] == 'Netherlands']
nether_total = len(nether_away_games)
nether_total
50/49:
# Number of games played by the Netherlands in total
nether_away_games = df.loc[df['Away Team Name'] == 'Netherlands']
nether_away = len(nether_away_games)
nether_total = num_home_games + nether_away
50/50:
# Number of games played by the Netherlands in total
nether_away_games = df.loc[df['Away Team Name'] == 'Netherlands']
nether_away = len(nether_away_games)
nether_total = num_home_games + nether_away
nether_total
50/51:
# Number of games the USA played in the 2014 world cup
usa_home = df.loc[(df['Home Team Name'] == 'USA') & (df['Year'] == '2014')]
usa_away = df.loc[(df['Away Team Name'] == 'USA') & (df['Year'] == '2014')]

usa_total = len(usa_home) + len(usa_away)
usa_total
50/52:
# Number of games the USA played in the 2014 world cup
usa_home = df[(df['Home Team Name'] == 'USA') & (df['Year'] == '2014')]
usa_away = df[(df['Away Team Name'] == 'USA') & (df['Year'] == '2014')]

usa_total = len(usa_home) + len(usa_away)
usa_total
50/53:
# Number of games the USA played in the 2014 world cup
#usa_home = df.loc[(df['Home Team Name'] == 'USA') & (df['Year'] == '2014')]
#usa_away = df.loc[(df['Away Team Name'] == 'USA') & (df['Year'] == '2014')]

#usa_total = len(usa_home) + len(usa_away)

usa_total = df[(df['Year'] == 2014) &
                       ((df['Home Team Name'] == 'USA') |
                        (df['Away Team Name'] == 'USA'))]
usa_total
50/54:
# Number of games the USA played in the 2014 world cup

usa_total = df[(df['Year'] == 2014) & ((df['Home Team Name'] == 'USA') | (df['Away Team Name'] == 'USA'))]
usa_total
50/55:
# Number of games the USA played in the 2014 world cup

usa_total = df[(df['Year'] == 2014) & ((df['Home Team Name'] == 'USA') | (df['Away Team Name'] == 'USA'))]
print(len(usa_total))
50/56:
# Number of countries participated in the 1986 world cup
countries = df.unique()
num_of_countries = len(countries)
num_of_countries
50/57:
# Number of countries participated in the 1986 world cup
nether = df.loc[df['Year'] == '1986']
countries = df[''.unique()
num_of_countries = len(countries)
num_of_countries
50/58:
# Number of countries participated in the 1986 world cup
year = df.loc[df['Year'] == '1986']
countries = year['Home Team'].unique()
num_of_countries = len(countries)
num_of_countries
50/59:
# Number of countries participated in the 1986 world cup
year = df.loc[df['Year'] == '1986', ['Home Team Name']]
countries = year.unique()
num_of_countries = len(countries)
num_of_countries
50/60:
# Number of countries participated in the 1986 world cup
df.unique()
#year = df.loc[df['Year'] == '1986', ['Home Team Name']]
#countries = year.unique()
#num_of_countries = len(countries)
#num_of_countries
50/61:
# Number of countries participated in the 1986 world cup
df['Home Team Name'].unique()
#year = df.loc[df['Year'] == '1986', ['Home Team Name']]
#countries = year.unique()
#num_of_countries = len(countries)
#num_of_countries
50/62:
# Number of countries participated in the 1986 world cup
countries = df['Home Team Name'].unique()
num = len(countries)
num
#year = df.loc[df['Year'] == '1986', ['Home Team Name']]
#countries = year.unique()
#num_of_countries = len(countries)
#num_of_countries
50/63:
# Number of countries participated in the 1986 world cup

year = df.loc[df['Year'] == '1986', ['Home Team Name']]
year
#countries = year.unique()
#num_of_countries = len(countries)
#num_of_countries
50/64:
# Number of countries participated in the 1986 world cup

year = df[df['Year'] == '1986', ['Home Team Name']]
year
#countries = year.unique()
#num_of_countries = len(countries)
#num_of_countries
50/65:
# Number of countries participated in the 1986 world cup

year = df.loc[['Home Team Name'], df['Year'] == '1986']
year
#countries = year.unique()
#num_of_countries = len(countries)
#num_of_countries
countries = df['Home Team Name'].unique()
num = len(countries)
num
50/66:
# Number of countries participated in the 1986 world cup

year = df.loc[['Home Team Name'], df['Year'] == '1986']
year
#countries = year.unique()
#num_of_countries = len(countries)
#num_of_countries
50/67:
# Number of countries participated in the 1986 world cup

year = df.loc[df['Home Team Name'], df['Year'] == '1986']
year
#countries = year.unique()
#num_of_countries = len(countries)
#num_of_countries

#countries = df['Home Team Name'].unique()
#num = len(countries)
#num
50/68:
# Number of countries participated in the 1986 world cup

year = df.loc[df['Year'] == '1986', ['Home Team Name']]
year
#countries = year.unique()
#num_of_countries = len(countries)
#num_of_countries

#countries = df['Home Team Name'].unique()
#num = len(countries)
#num
50/69:
# Number of countries participated in the 1986 world cup

year = df.loc[df['Year'] == '1986']
year
#countries = year.unique()
#num_of_countries = len(countries)
#num_of_countries

#countries = df['Home Team Name'].unique()
#num = len(countries)
#num
50/70:
# Number of matches that had 5 or more goals in total
five_or_more = df.loc[df['Home Team Name'] == 'USA') | (df['Away Team Name'] == 'USA')]
50/71:
# Number of matches that had 5 or more goals in total
five_or_more = df.loc[(df['Home Team Name'] == 'USA') | (df['Away Team Name'] == 'USA')]
50/72:
# Number of matches that had 5 or more goals in total
five_or_more = df.loc[(df['Home Team Name'] == 'USA') | (df['Away Team Name'] == 'USA')]
five_or_more
50/73:
# Number of matches that had 5 or more goals in total
five_or_more = df.loc[(df['Home Team Name'] == 'USA') | (df['Away Team Name'] == 'USA')]
five_or_more = len(five_or_more)
50/74:
# Number of matches that had 5 or more goals in total
five_or_more = df.loc[(df['Home Team Name'] == 'USA') | (df['Away Team Name'] == 'USA')]
five_or_more = len(five_or_more)
five_or_more
50/75:
# Create a new column 'Half-time Goals' in df
df.loc[(df['Home Team Name'] == 'USA') | (df['Away Team Name'] == 'USA'), 'Half-yime-Goals']
50/76:
# Create a new column 'Half-time Goals' in df
df.loc[(df['Home Team Name'] == 'USA'), 'Half-time-Goals'] = 'home'
df.loc[(df['Away Team Name'] == 'USA'), 'Half-time-Goals'] = 'away'
50/77:
# Print all records containing the string 'Korea'
df.loc[df['Home Team Name'].str.contains('Korea'), 'Home Team Name']
50/78:
# Update the 'Home Team Name' and 'Home Team Initials' columns 
df = pd.DataFrame({'Home Team Name':['Korea DPR','Korea Republic'], 'Away Team Name':['KOR','PRK']})
50/79:
# Update the 'Home Team Name' and 'Home Team Initials' columns 
df = pd.DataFrame({'Home Team Name':['Korea DPR','Korea Republic'], 'Away Team Name':['KOR','PRK']})
df
50/80:
# Update the 'Home Team Name' and 'Home Team Initials' columns 
#df = pd.DataFrame({'Home Team Name':['Korea DPR','Korea Republic'], 'Away Team Name':['KOR','PRK']})
df.loc[df['Home Team Name'] == 'Korea DPR', 'Home Team Name'] = 'Korea'
df.loc[df['Home Team Name'] == 'Korea Republic', 'Home Team Name'] = 'Korea'
df.loc[df['Away Team Name'] == 'Korea DPR', 'Away Team Name'] = 'Korea'
df.loc[df['Away Team Name'] == 'Korea Republic', 'Away Team Name'] = 'Korea'
df.loc[df['Home Team Initials'] == 'KOR', 'Home Team Initials'] = 'NSK'
df.loc[df['Home Team Initials'] == 'KOR', 'Home Team Initials'] = 'NSK'
df.loc[df['Away Team Initials'] == 'PRK', 'Away Team Initials'] = 'NSK'
df.loc[df['Away Team Initials'] == 'PRK', 'Away Team Initials'] = 'NSK'
50/81:
# Check the updated columns
df.loc[df['Home Team Name'].str.contains('Korea')]
51/1:
# Import pandas using the standard alias
import pandas as pd


# Import 'WorldCupMatches.csv' as a DataFrame

df = pd.read_csv('WorldCupMatches.csv')
52/1:
# Import pandas using the standard alias
df = pd.read_csv('Data/bp.txt', delimiter='\t')
52/2:
# Import pandas using the standard alias
import pandas as pd
52/3:
# Import the file and print the first 5 rows
df = pd.read_csv('Data/bp.txt', delimiter='\t')
52/4:
# Import the file and print the first 5 rows
df = pd.read_csv('Data/bp.txt', delimiter='\t')
df.head(5)
52/5:
# Print the last 5 rows of df
df.tail(5)
52/6:
# Import the file and print the first 5 rows
df = pd.read_csv('Data/Zipcode_Demos.csv', delimiter='\t')
df.head(5)
52/7:
# Import the file and print the first 5 rows
df = pd.read_csv('Data/Zipcode_Demos.csv')
df.head(5)
52/8:
# Print the last 5 rows of df
df.tail(5)
52/9:
# Clean up the dataset
df = df.drop(0)
52/10:
# Clean up the dataset
df = df.drop(0)
df
52/11:
# Clean up the dataset
df = df.drop(0)
df.head()
52/12:
# Clean up the dataset
df = df.drop(1)
df.head()
52/13:
# Clean up the dataset
df = df.drop(0)
df.head()
52/14:
# Clean up the dataset
df = df.drop(1)
df.head()
52/15:
# Clean up the dataset
df = df.drop(0)
df.head()
52/16:
# Clean up the dataset
df = df.drop(1)
df.head()
52/17:
# Clean up the dataset
df = df.drop(2)
df.head()
52/18:
# Import pandas using the standard alias
import pandas as pd
52/19:
# Import the file and print the first 5 rows
df = pd.read_csv('Data/Zipcode_Demos.csv')
df.head(5)
52/20:
# Print the last 5 rows of df
df.tail(5)
52/21:
# Clean up the dataset
df
52/22:
# Clean up the dataset
df = df.drop(0)
df.head()
52/23:
# Clean up the dataset
df = df.drop(0)

df
52/24:
# Clean up the dataset
#df = df.drop(0)

df
52/25:
# Clean up the dataset
#df = df.drop(0)

df.index[3]
52/26:
# Clean up the dataset
#df = df.drop(0)

df.index
52/27:
# Clean up the dataset
#df = df.drop(0)

prev_count = 10**3
for row in df.index:
    count = 0
    for entry in df.iloc[row].isnull():
        if entry:
            count += 1
    if count != prev_count and row!=0:
        print('On row {} there are {} null values. The previous row had {} null values.'.format(row, count, prev_count))
    prev_count = count
52/28:
# Import pandas using the standard alias
import pandas as pd
52/29:
# Import the file and print the first 5 rows
df = pd.read_csv('Data/Zipcode_Demos.csv')
df.head(5)
52/30:
# Print the last 5 rows of df
df.tail(5)
52/31:
# Clean up the dataset


prev_count = 10**3
for row in df.index:
    count = 0
    for entry in df.iloc[row].isnull():
        if entry:
            count += 1
    if count != prev_count and row!=0:
        print('On row {} there are {} null values. The previous row had {} null values.'.format(row, count, prev_count))
    prev_count = count
53/1:
# Import the required libraries
import pandas as pd
import matplotlib.pyplot as plt
%matplotlib inline
53/2:
# Import the file 'turnstile_180901.txt'
df = pd.read_csv('turnstile_180901.txt')

# Print the number of rows ans columns in df
print(df.shape)

# Print the first five rows of df
df.head()
53/3:
# Rename all the columns to lower case
df.columns = map(str.lower, df.columns)
53/4:
# Rename all the columns to lower case
df.columns = map(str.lower, df.columns)
df.columns
53/5:
# Change the index to 'linename'
df = df.set_index('linename')
df.head()
53/6:
# Reset the index
df = df.set_index(0)
df.head()
53/7:
# Reset the index
df = df.reset_index(inplace = True, drop = True)
df.head()
53/8:
# Reset the index
df = df.reset_index(inplace = True)
df.head()
53/9:
# Reset the index
df = df.reset_index()
df.head()
53/10:
# Import the required libraries
import pandas as pd
import matplotlib.pyplot as plt
%matplotlib inline
53/11:
# Import the required libraries
import pandas as pd
import matplotlib.pyplot as plt
%matplotlib inline
53/12:
# Import the file 'turnstile_180901.txt'
df = pd.read_csv('turnstile_180901.txt')

# Print the number of rows ans columns in df
print(df.shape)

# Print the first five rows of df
df.head()
53/13:
# Rename all the columns to lower case
df.columns = map(str.lower, df.columns)
df.columns
53/14:
# Change the index to 'linename'
df = df.set_index('linename')
df.head()
53/15:
# Reset the index
df = df.reset_index()
df.head()
53/16:
# Add a new 'num_lines' column
df.tail
53/17:
# Add a new 'num_lines' column
df.tail()
53/18:
# Add a new 'num_lines' column
def how_many_lines(df):
    count = [len(i) for i in df['linename']]
    return count

df['Num_Lines'] = df['linename'].map(gow_many_lines)
df.head()
53/19:
# Add a new 'num_lines' column
def how_many_lines(df):
    count = [len(i) for i in df['linename']]
    return count

df['Num_Lines'] = df['linename'].map(how_many_lines)
df.head()
53/20:
# Import the required libraries
import pandas as pd
import matplotlib.pyplot as plt
%matplotlib inline
53/21:
# Import the file 'turnstile_180901.txt'
df = pd.read_csv('turnstile_180901.txt')

# Print the number of rows ans columns in df
print(df.shape)

# Print the first five rows of df
df.head()
53/22:
# Rename all the columns to lower case
df.columns = map(str.lower, df.columns)
df.columns
53/23:
# Change the index to 'linename'
df = df.set_index('linename')
df.head()
53/24:
# Reset the index
df = df.reset_index()
df.head()
53/25:
# Add a new 'num_lines' column
def how_many_lines(df):
    count = [len(i) for i in df['linename']]
    return count

df['Num_Lines'] = df['linename'].map(how_many_lines)
df.head()
53/26:

count = [len(i) for i in df['linename']]


df['Num_Lines'] = df['linename'].map(count)
df.head()
53/27:
# Add a new 'num_lines' column
df['Num_Lines'] = df['linename'].map(lambda x: len(x))
df.head()
53/28:
#def clean(col_name):
    # Clean the column name in any way you want to. Hint: think back to str methods 
   # cleaned = None
   # return cleaned
    
    df.columns
53/29:
def clean(col_name):
    cleaned = [i.strip() for i in df,columns]
    cleaned.upper()
    # Clean the column name in any way you want to. Hint: think back to str methods 
  
    return cleaned
    
    df.columns
53/30:
def clean(col_name):
    cleaned = [i.strip() for i in df.columns]
    cleaned.upper()
    # Clean the column name in any way you want to. Hint: think back to str methods 
  
    return cleaned
    
    df.columns
53/31:
def clean(col_name):
    cleaned = [i.strip() for i in df.columns]
    cleaned.upper()
    # Clean the column name in any way you want to. Hint: think back to str methods 
  
    return cleaned
53/32:
# Use the above function to clean the column names
clean(df.columns)
53/33:
def clean(col_name):
    cleaned = [i.strip().str.upper for i in df.columns]
    #cleaned.upper()
    # Clean the column name in any way you want to. Hint: think back to str methods 
  
    return cleaned
53/34:
def clean(col_name):
    cleaned = [i.strip().str.upper for i in df.columns]
    #cleaned.upper()
    # Clean the column name in any way you want to. Hint: think back to str methods 
  
    return cleaned
53/35:
# Use the above function to clean the column names
clean(df.columns)
53/36:
def clean(col_name):
    cleaned = [i.strip() for i in df.columns]
    cleaned.str.upper()
    #cleaned.upper()
    # Clean the column name in any way you want to. Hint: think back to str methods 
  
    return cleaned
53/37:
# Use the above function to clean the column names
clean(df.columns)
53/38:
def clean(col_name):
    cleaned = [i.strip() for i in df.columns]
    #cleaned.str.upper()
    #cleaned.upper()
    # Clean the column name in any way you want to. Hint: think back to str methods 
  
    return cleaned
53/39:
# Use the above function to clean the column names
clean(df.columns)
53/40:
def clean(col_name):
    cleaned = [i.strip() for i in df.columns]
    cleaned = str.upper()
    #cleaned.str.upper()
    #cleaned.upper()
    # Clean the column name in any way you want to. Hint: think back to str methods 
  
    return cleaned
53/41:
def clean(col_name):
    cleaned = [i.strip() for i in df.columns]
    i.str.upper()
    #cleaned.str.upper()
    #cleaned.upper()
    # Clean the column name in any way you want to. Hint: think back to str methods 
  
    return cleaned
53/42:
# Use the above function to clean the column names
clean(df.columns)
53/43:
def clean(col_name):
    cleaned = [i.strip() for i in df.columns]
    cleaned.str.upper()
    #cleaned.str.upper()
    #cleaned.upper()
    # Clean the column name in any way you want to. Hint: think back to str methods 
  
    return cleaned
53/44:
# Use the above function to clean the column names
clean(df.columns)
53/45:
def clean(col_name):
    cleaned = [i.strip().upper for i in df.columns]

    #cleaned.str.upper()
    #cleaned.upper()
    # Clean the column name in any way you want to. Hint: think back to str methods 
  
    return cleaned
53/46:
# Use the above function to clean the column names
clean(df.columns)
53/47:
def clean(col_name):
    cleaned = [i.strip().upper() for i in df.columns]

    #cleaned.str.upper()
    #cleaned.upper()
    # Clean the column name in any way you want to. Hint: think back to str methods 
  
    return cleaned
53/48:
# Use the above function to clean the column names
clean(df.columns)
53/49:
# Check to ensure the column names were cleaned
df.columns
53/50:
# Use the above function to clean the column names
clean(df)
53/51:
# Check to ensure the column names were cleaned
df.columns
53/52:
# Use the above function to clean the column names
df.columns = clean(i) for i in df.columns
53/53:
# Use the above function to clean the column names
df.columns = [clean(i) for i in df.columns]
53/54:
# Check to ensure the column names were cleaned
df.columns
53/55:
# Convert the data type of the 'date' column to a date
df['data'].dtype

# Add a new column 'day_of_week' that represents the day of the week
53/56:
# Convert the data type of the 'date' column to a date
df['DATA'].dtype

# Add a new column 'day_of_week' that represents the day of the week
53/57:
# Import the required libraries
import pandas as pd
import matplotlib.pyplot as plt
%matplotlib inline
53/58:
# Import the file 'turnstile_180901.txt'
df = pd.read_csv('turnstile_180901.txt')

# Print the number of rows ans columns in df
print(df.shape)

# Print the first five rows of df
df.head()
53/59:
# Rename all the columns to lower case
df.columns = map(str.lower, df.columns)
df.columns
53/60:
# Change the index to 'linename'
df = df.set_index('linename')
df.head()
53/61:
# Reset the index
df = df.reset_index()
df.head()
53/62:
# Add a new 'num_lines' column
df['Num_Lines'] = df['linename'].map(lambda x: len(x))
df.head()
53/63:
def clean(col_name):
    cleaned = [i.strip().upper() for i in df.columns]

    #cleaned.str.upper()
    #cleaned.upper()
    # Clean the column name in any way you want to. Hint: think back to str methods 
  
    return cleaned
53/64:
# Use the above function to clean the column names
df.columns = [clean(i) for i in df.columns]
53/65:
# Check to ensure the column names were cleaned
df.columns
53/66:
# Convert the data type of the 'date' column to a date
df['DATA'].dtype

# Add a new column 'day_of_week' that represents the day of the week
53/67:
# Convert the data type of the 'date' column to a date
df['DATE'].dtype

# Add a new column 'day_of_week' that represents the day of the week
53/68:
# Convert the data type of the 'date' column to a date
df['DATE'].dtype

# Add a new column 'day_of_week' that represents the day of the week
53/69:
# Convert the data type of the 'date' column to a date
df['date'].dtype

# Add a new column 'day_of_week' that represents the day of the week
53/70:
# Convert the data type of the 'date' column to a date
df['date'].dtype = pd.to_datetime(df['date'])

# Add a new column 'day_of_week' that represents the day of the week
53/71:
# Convert the data type of the 'date' column to a date
df['DATE'].dtype = pd.to_datetime(df['DATE'])

# Add a new column 'day_of_week' that represents the day of the week
53/72:
# Convert the data type of the 'date' column to a date
df['DATE'] = pd.to_datetime(df['DATE'])

# Add a new column 'day_of_week' that represents the day of the week
53/73:
# Convert the data type of the 'date' column to a date
df['date'] = pd.to_datetime(df['date'])

# Add a new column 'day_of_week' that represents the day of the week
53/74:
# Convert the data type of the 'date' column to a date
df['date'] = pd.to_datetime(df['date'])

# Add a new column 'day_of_week' that represents the day of the week 
 df['day_of_week'] = df['date'].dt.day_name().head()
53/75:
# Convert the data type of the 'date' column to a date
df['date'] = pd.to_datetime(df['date'])

# Add a new column 'day_of_week' that represents the day of the week 
df['day_of_week'] = df['date'].dt.day_name().head()
53/76:
# Import the required libraries
import pandas as pd
import matplotlib.pyplot as plt
%matplotlib inline
53/77:
# Import the file 'turnstile_180901.txt'
df = pd.read_csv('turnstile_180901.txt')

# Print the number of rows ans columns in df
print(df.shape)

# Print the first five rows of df
df.head()
53/78:
# Rename all the columns to lower case
df.columns = map(str.lower, df.columns)
df.columns
53/79:
# Rename all the columns to lower case
df.columns = map(str.lower, df.columns)
df.columns
53/80:
# Change the index to 'linename'
df = df.set_index('linename')
df.head()
53/81:
# Reset the index
df = df.reset_index()
df.head()
53/82:
# Add a new 'num_lines' column
df['Num_Lines'] = df['linename'].map(lambda x: len(x))
df.head()
53/83:
def clean(col_name):
    cleaned = [i.strip().upper() for i in df.columns]

    #cleaned.str.upper()
    #cleaned.upper()
    # Clean the column name in any way you want to. Hint: think back to str methods 
  
    return cleaned
53/84:
# Use the above function to clean the column names
df.columns = [clean(i) for i in df.columns]
53/85:
# Check to ensure the column names were cleaned
df.columns
53/86:
# Convert the data type of the 'date' column to a date
df['DATE'] = pd.to_datetime(df['DATE'])

# Add a new column 'day_of_week' that represents the day of the week 
df['day_of_week'] = df['DATE'].dt.day_name().head()
53/87:
# Convert the data type of the 'date' column to a date
df['DATE'] = pd.to_datetime(df['DATE'])

# Add a new column 'day_of_week' that represents the day of the week 
df['day_of_week'] = df['DATE'].dt.dayofweek.head()
53/88:
# Convert the data type of the 'date' column to a date
df['DATE'] = pd.to_datetime(df['DATE'])

# Add a new column 'day_of_week' that represents the day of the week 
df['day_of_week'] = df['DATE'].dt.dayofweek
53/89:
# Convert the data type of the 'date' column to a date
df['date'] = pd.to_datetime(df['date'])

# Add a new column 'day_of_week' that represents the day of the week 
df['day_of_week'] = df['date'].dt.dayofweek
53/90:
# Convert the data type of the 'date' column to a date
df['DATE'] = pd.to_datetime(df['DATE'])

# Add a new column 'day_of_week' that represents the day of the week 
df['day_of_week'] = df['DATE'].dt.dayofweek
54/1:
# Convert the data type of the 'date' column to a date
df['DATE'] = pd.to_datetime(df['DATE'])

# Add a new column 'day_of_week' that represents the day of the week 
df['day_of_week'] = df['DATE'].dt.dayofweek
54/2:
# Convert the data type of the 'date' column to a date
df['date'] = pd.to_datetime(df['date'])

# Add a new column 'day_of_week' that represents the day of the week 
df['day_of_week'] = df['date'].dt.dayofweek
54/3:
# Group the data by day of week and plot the sum of the numeric columns
grouped = df.groupby('day_of_week').sum()
grouped.plot(kind='barh')
plt.show()
56/1:
# Import the required libraries
import pandas as pd
import matplotlib.pyplot as plt
%matplotlib inline
56/2:
# Import the file 'turnstile_180901.txt'
df = pd.read_csv('turnstile_180901.txt')

# Print the number of rows ans columns in df
print(df.shape)

# Print the first five rows of df
df.head()
56/3:
# Rename all the columns to lower case
df.columns = map(str.lower, df.columns)
df.columns
56/4:
# Change the index to 'linename'
df = df.set_index('linename')
df.head()
56/5:
# Reset the index
df = df.reset_index()
df.head()
56/6:
# Add a new 'num_lines' column
df['Num_Lines'] = df['linename'].map(lambda x: len(x))
df.head()
56/7:
def clean(col_name):
    cleaned = [i.strip().upper() for i in df.columns]

    #cleaned.str.upper()
    #cleaned.upper()
    # Clean the column name in any way you want to. Hint: think back to str methods 
  
    return cleaned
56/8:
# Use the above function to clean the column names
df.columns = [clean(i) for i in df.columns]
56/9:
# Check to ensure the column names were cleaned
df.columns
56/10:
# Convert the data type of the 'date' column to a date
df['date'] = pd.to_datetime(df['date'])

# Add a new column 'day_of_week' that represents the day of the week 
df['day_of_week'] = df['date'].dt.dayofweek
58/1:
# Import pandas
import pandas as pd

# Import the 'lego_sets.csv' dataset
df = pd.read_csv('lego_sets.csv')

# Print the first five rows of DataFrame
df.head()
58/2:
# Call the .info() method
df.info()
58/3:
# Call the .describe() method
df.describe()
58/4:
# Calculate the median of the star_rating column
df['star_rating'].median()
58/5:
# Print the number of unique values in play_star_rating
df['play_star_rating'].unique()
58/6:
# Calculate the standard deviation of the list_price column
df['list_price'].std()
58/7:
# Total number of pieces across all unique Lego sets
df.unique()
58/8:
# Total number of pieces across all unique Lego sets
df['piece_count'].cumsum()
58/9:
# Print the number of unique values in play_star_rating
df['play_star_rating'].nunique()
58/10:
# Total number of pieces across all unique Lego sets
df['piece_count'].sum()
58/11:
# Call the .info() method
x = df.info()
type(x)
58/12:
# Get the 90% quantile for all numerical columns
info = df.info
for i in df:
    for num in info_set:
        if df[num].dtype == float64:
            df[num].quantile(0.9)
58/13:
# Get the 90% quantile for all numerical columns
info_set = df.info
for i in df:
    for num in info_set:
        if df[num].dtype == float64:
            df[num].quantile(0.9)
58/14:
# Get the 90% quantile for all numerical columns
info_set = df.info
for i in df:
    for num in info_set.iteritems():
        if df[num].dtype == float64:
            df[num].quantile(0.9)
58/15:
# Get the 90% quantile for all numerical columns
info_set = df.info
for i in df:
    for word, num in info_set.iteritems():
        if df[num].dtype == float64:
            df[num].quantile(0.9)
58/16:
# Get the 90% quantile for all numerical columns
df.quantile(0.9)
58/17:
# Print the unique values in the review_difficulty column
df['review_difficulty'].unique()
58/18:
# Get the value_counts() of the review_difficulty column
df['review_difficulty'].value_counts()
58/19:
# Call the .applymap() method


string_df = df.applymap(lambda x: str(x))
string_df.info

# Call the .info() method
58/20:
# Call the .applymap() method


string_df = df.applymap(lambda x: str(x))
string_df.info()

# Call the .info() method
59/1:
# Let's get started importing the necessary libraries
import pandas as pd
import matplotlib.pyplot as plt
%matplotlib inline
59/2:
# Loading the data
df = pd.read_csv('ames_train.csv')
df.head()
59/3:
# Investigate the Data
df.info()
59/4:
# Investigate the Data
df.info()
df.columns
59/5:
# Investigate the Data
df.info()
df.drop(df.columns[0])
59/6:
# Investigate the Data
df.info()
df.drop(df.columns[0], axis = 1)
59/7:
# Investigate the Data
df.info()
df.drop(df.columns[0], axis = 0)
59/8:
# Investigate the Data
df.info()
df = df.drop(0)
59/9:
# Investigate the Data
df.info()
df = df.drop(0)
df
59/10:
# Investigate the Data
df.info()
df = df.drop(0)
print(df)
59/11:
# Let's get started importing the necessary libraries
import pandas as pd
import matplotlib.pyplot as plt
%matplotlib inline
59/12:
# Loading the data
df = pd.read_csv('ames_train.csv')
df.head()
59/13:
# Investigate the Data
df.info()
df = df.drop(:,0)
59/14:
# Investigate the Data
df.info()
df = df.reset_index(drop=True, inplace=True)
59/15:
# Investigate the Data
df.info()
df = df.reset_index(drop=True, inplace=True)
print(df)
59/16:
# Investigate the Data
df.info()
df = df.reset_index(drop=True, inplace=True)
df.head()
59/17:
# Investigate the Data
df.info()
df = df.reset_index(drop=True, inplace=True)
59/18:
# Investigate the Data
#df.info()
df = df.reset_index(drop=True, inplace=True)
59/19:
# Investigate the Data
df.info()
#df = df.reset_index(drop=True, inplace=True)
59/20:
# Let's get started importing the necessary libraries
import pandas as pd
import matplotlib.pyplot as plt
%matplotlib inline
59/21:
# Loading the data
df = pd.read_csv('ames_train.csv')
df.head()
59/22:
# Investigate the Data
df.info()
#df = df.reset_index(drop=True, inplace=True)
59/23:
# Investigate the Data
df.info()
#df = df.reset_index(drop=True, inplace=True)
df['SalePrice'].mean()
59/24:
# Investigate the Data
df.info()
#df = df.reset_index(drop=True, inplace=True)
sales_mean = df['SalePrice'].mean()
med_YrSold = df['YrSold'].median()
59/25:
# Investigate the Data
df.info()
#df = df.reset_index(drop=True, inplace=True)
sales_mean = df['SalePrice'].mean()
med_YrSold = df['YrSold'].median()
lot_area_std = df['LotArea'].std()
59/26:
# Investigate the Data
df.info()
#df = df.reset_index(drop=True, inplace=True)
sales_mean = df['SalePrice'].mean()
med_YrSold = df['YrSold'].median()
lot_area_std = df['LotArea'].std()
moSold_iqr = df['MoSold'].quantile(.9)
59/27:
# Investigate the Data
df.info();
#df = df.reset_index(drop=True, inplace=True)
sales_mean = df['SalePrice'].mean()
med_YrSold = df['YrSold'].median()
lot_area_std = df['LotArea'].std()
moSold_iqr = df['MoSold'].quantile(.9)
59/28:
# Investigate the Data
df.info()
#df = df.reset_index(drop=True, inplace=True)

#Measures of Dispersion
sales_mean = df['SalePrice'].mean()
med_YrSold = df['YrSold'].median()
lot_area_std = df['LotArea'].std()
moSold_iqr = df['MoSold'].quantile(.9)

houses_sold_08 = df.loc[df[YrSold] == 2008, [SalePrice]]
59/29:
# Investigate the Data
#df.info()
#df = df.reset_index(drop=True, inplace=True)

#Measures of Dispersion
sales_mean = df['SalePrice'].mean()
med_YrSold = df['YrSold'].median()
lot_area_std = df['LotArea'].std()
moSold_iqr = df['MoSold'].quantile(.9)

houses_sold_08 = df.loc[df[YrSold] == 2008, [SalePrice]]
59/30:
# Investigate the Data
#df.info()
#df = df.reset_index(drop=True, inplace=True)

#Measures of Dispersion
sales_mean = df['SalePrice'].mean()
med_YrSold = df['YrSold'].median()
lot_area_std = df['LotArea'].std()
moSold_iqr = df['MoSold'].quantile(.9)

houses_sold_08 = df.loc[df['YrSold'] == 2008, ['SalePrice']]
59/31:
# Investigate the Data
#df.info()
#df = df.reset_index(drop=True, inplace=True)

#Measures of Dispersion
sales_mean = df['SalePrice'].mean()
med_YrSold = df['YrSold'].median()
lot_area_std = df['LotArea'].std()
moSold_iqr = df['MoSold'].quantile(.9)

houses_sold_08 = df.loc[df['YrSold'] == 2008, ['SalePrice']]
df.head()
59/32:
# Investigate the Data
#df.info()
#df = df.reset_index(drop=True, inplace=True)

#Measures of Dispersion
sales_mean = df['SalePrice'].mean()
med_YrSold = df['YrSold'].median()
lot_area_std = df['LotArea'].std()
moSold_iqr = df['MoSold'].quantile(.9)

houses_sold_08 = df.loc[df['YrSold'] = 2008, ['SalePrice']]
df.head()
59/33:
# Investigate the Data
#df.info()
#df = df.reset_index(drop=True, inplace=True)

#Measures of Dispersion
sales_mean = df['SalePrice'].mean()
med_YrSold = df['YrSold'].median()
lot_area_std = df['LotArea'].std()
moSold_iqr = df['MoSold'].quantile(.9)

houses_sold_08 = df.loc[df['YrSold'] in 2008, ['SalePrice']]
df.head()
59/34:
# Investigate the Data
#df.info()
#df = df.reset_index(drop=True, inplace=True)

#Measures of Dispersion
sales_mean = df['SalePrice'].mean()
med_YrSold = df['YrSold'].median()
lot_area_std = df['LotArea'].std()
moSold_iqr = df['MoSold'].quantile(.9)

houses_sold_08 = df.loc[df['YrSold'] is in 2008, ['SalePrice']]
df.head()
59/35:
# Investigate the Data
#df.info()
#df = df.reset_index(drop=True, inplace=True)

#Measures of Dispersion
sales_mean = df['SalePrice'].mean()
med_YrSold = df['YrSold'].median()
lot_area_std = df['LotArea'].std()
moSold_iqr = df['MoSold'].quantile(.9)

houses_sold_08 = df.loc[df['YrSold'].isin(2008), ['SalePrice']]
df.head()
59/36:
# Investigate the Data
#df.info()
#df = df.reset_index(drop=True, inplace=True)

#Measures of Dispersion
sales_mean = df['SalePrice'].mean()
med_YrSold = df['YrSold'].median()
lot_area_std = df['LotArea'].std()
moSold_iqr = df['MoSold'].quantile(.9)

houses_sold_08 = df.loc[df['YrSold'] == 2008, ['SalePrice']]
df.head()
59/37:
# Investigate the Data
#df.info()
#df = df.reset_index(drop=True, inplace=True)

#Measures of Dispersion
sales_mean = df['SalePrice'].mean()
med_YrSold = df['YrSold'].median()
lot_area_std = df['LotArea'].std()
moSold_iqr = df['MoSold'].quantile(.9)

houses_sold_08 = df.loc[df['YrSold'] <= 2008, ['SalePrice']]
df.head()
59/38:
# Investigate the Data
#df.info()
#df = df.reset_index(drop=True, inplace=True)

#Measures of Dispersion
sales_mean = df['SalePrice'].mean()
med_YrSold = df['YrSold'].median()
lot_area_std = df['LotArea'].std()
moSold_iqr = df['MoSold'].quantile(.9)

houses_sold_08 = df.loc[df['YrSold'] <= 2008, ['SalePrice']]
df.head(10)
59/39:
# Investigate the Data
#df.info()
#df = df.reset_index(drop=True, inplace=True)

#Measures of Dispersion
sales_mean = df['SalePrice'].mean()
med_YrSold = df['YrSold'].median()
lot_area_std = df['LotArea'].std()
moSold_iqr = df['MoSold'].quantile(.9)

houses_sold_08 = df.loc[df['YrSold'] == 2008, ['SalePrice']]
print(houses_sold_08)
59/40:
# Investigate the Data
#df.info()
#df = df.reset_index(drop=True, inplace=True)

#Measures of Dispersion
sales_mean = df['SalePrice'].mean()
med_YrSold = df['YrSold'].median()
lot_area_std = df['LotArea'].std()
moSold_iqr = df['MoSold'].quantile(.9)

houses_sold_08 = df.loc[df['YrSold'] == 2008, ['SalePrice']]
houses_sold_08.head()
59/41:
# Investigate the Data
#df.info()
#df = df.reset_index(drop=True, inplace=True)

#Measures of Dispersion
sales_mean = df['SalePrice'].mean()
med_YrSold = df['YrSold'].median()
lot_area_std = df['LotArea'].std()
moSold_iqr = df['MoSold'].quantile(.9)

houses_sold_08 = df.loc[df['YrSold'] == 2008 & ['SalePrice']]
houses_sold_08.head()
59/42:
# Investigate the Data
#df.info()
#df = df.reset_index(drop=True, inplace=True)

#Measures of Dispersion
sales_mean = df['SalePrice'].mean()
med_YrSold = df['YrSold'].median()
lot_area_std = df['LotArea'].std()
moSold_iqr = df['MoSold'].quantile(.9)

houses_sold_08 = df.loc[df['YrSold'] == 2008, ['SalePrice']]
houses_sold_08.head()
59/43:
# Investigate the Data
#df.info()
#df = df.reset_index(drop=True, inplace=True)

#Measures of Dispersion
sales_mean = df['SalePrice'].mean()
med_YrSold = df['YrSold'].median()
lot_area_std = df['LotArea'].std()
moSold_iqr = df['MoSold'].quantile(.9)

houses_sold_08 = df.loc([df['YrSold'] == 2008 & ['SalePrice']])
houses_sold_08.head()
59/44:
# Investigate the Data
#df.info()
#df = df.reset_index(drop=True, inplace=True)

#Measures of Dispersion
sales_mean = df['SalePrice'].mean()
med_YrSold = df['YrSold'].median()
lot_area_std = df['LotArea'].std()
moSold_iqr = df['MoSold'].quantile(.9)

houses_sold_08 = df.loc[df['YrSold'] == 2008, ['SalePrice']]
houses_sold_08.head()
59/45:
# Investigate the Data
#df.info()
#df = df.reset_index(drop=True, inplace=True)

#Measures of Dispersion
sales_mean = df['SalePrice'].mean()
med_YrSold = df['YrSold'].median()
lot_area_std = df['LotArea'].std()
moSold_iqr = df['MoSold'].quantile(.9)

#Find the prices of houses that were sold in 2008, the year of the recesscion
houses_sold_08 = df.loc[df['YrSold'] == 2008, ['SalePrice']]
condition_of_sale_08 = df.loc[df['SaleCondition'] == 'Abnormal' & df['YrSold'] == 2008]
59/46:
# Investigate the Data
#df.info()
#df = df.reset_index(drop=True, inplace=True)

#Measures of Dispersion
sales_mean = df['SalePrice'].mean()
med_YrSold = df['YrSold'].median()
lot_area_std = df['LotArea'].std()
moSold_iqr = df['MoSold'].quantile(.9)

#Find the prices of houses that were sold in 2008, the year of the recesscion
houses_sold_08 = df.loc[df['YrSold'] == 2008, ['SalePrice']]
condition_of_sale_08 = df.loc[df['SaleCondition'] == 'Abnormal', df['YrSold'] == 2008]
59/47:
# Investigate the Data
#df.info()
#df = df.reset_index(drop=True, inplace=True)

#Measures of Dispersion
sales_mean = df['SalePrice'].mean()
med_YrSold = df['YrSold'].median()
lot_area_std = df['LotArea'].std()
moSold_iqr = df['MoSold'].quantile(.9)

#Find the prices of houses that were sold in 2008, the year of the recesscion
houses_sold_08 = df.loc[df['YrSold'] == 2008, ['SalePrice']]
condition_of_sale_08 = df.loc[df['SaleCondition'] == 'Abnormal', ['YrSold'] == 2008]
59/48:
# Investigate the Data
#df.info()
#df = df.reset_index(drop=True, inplace=True)

#Measures of Dispersion
sales_mean = df['SalePrice'].mean()
med_YrSold = df['YrSold'].median()
lot_area_std = df['LotArea'].std()
moSold_iqr = df['MoSold'].quantile(.9)

#Find the prices of houses that were sold in 2008, the year of the recesscion
houses_sold_08 = df.loc[df['YrSold'] == 2008, ['SalePrice']]
condition_of_sale_08 = df.loc[(df['SaleCondition'] == 'Abnormal') & (df['YrSold'] == 2008)]
#df[(df['Year'] == 2014) & ((df['Home Team Name']
59/49:
# Investigate the Data
#df.info()
#df = df.reset_index(drop=True, inplace=True)

#Measures of Dispersion
sales_mean = df['SalePrice'].mean()
med_YrSold = df['YrSold'].median()
lot_area_std = df['LotArea'].std()
moSold_iqr = df['MoSold'].quantile(.9)

#Find the prices of houses that were sold in 2008, the year of the recesscion
houses_sold_08 = df.loc[df['YrSold'] == 2008, ['SalePrice']]
condition_of_sale_08 = df.loc[(df['SaleCondition'] == 'Abnormal') & (df['YrSold'] == 2008)]
#df[(df['Year'] == 2014) & ((df['Home Team Name']
                     
condition_of_sale_08.head()
59/50:
# Investigate the Data
#df.info()
#df = df.reset_index(drop=True, inplace=True)

#Measures of Dispersion
sales_mean = df['SalePrice'].mean()
med_YrSold = df['YrSold'].median()
lot_area_std = df['LotArea'].std()
moSold_iqr = df['MoSold'].quantile(.9)

df['SaleCondition'].value_counts()
#Find the prices of houses that were sold in 2008, the year of the recesscion
houses_sold_08 = df.loc[df['YrSold'] == 2008, ['SalePrice']]
condition_of_sale_08 = df.loc[(df['SaleCondition'] == 'Abnormal') & (df['YrSold'] == 2008)]
#df[(df['Year'] == 2014) & ((df['Home Team Name']
                     
condition_of_sale_08.head()
59/51:
# Investigate the Data
#df.info()
#df = df.reset_index(drop=True, inplace=True)

#Measures of Dispersion
sales_mean = df['SalePrice'].mean()
med_YrSold = df['YrSold'].median()
lot_area_std = df['LotArea'].std()
moSold_iqr = df['MoSold'].quantile(.9)

df['SaleCondition'].value_counts()
#Find the prices of houses that were sold in 2008, the year of the recesscion
houses_sold_08 = df.loc[df['YrSold'] <= 2008, ['SalePrice']]
condition_of_sale_08 = df.loc[(df['SaleCondition'] == 'Abnormal') & (df['YrSold'] == 2008)]
#df[(df['Year'] == 2014) & ((df['Home Team Name']
                     
condition_of_sale_08.head()
59/52:
# Investigate the Data
#df.info()
#df = df.reset_index(drop=True, inplace=True)

#Measures of Dispersion
sales_mean = df['SalePrice'].mean()
med_YrSold = df['YrSold'].median()
lot_area_std = df['LotArea'].std()
moSold_iqr = df['MoSold'].quantile(.9)

df['SaleCondition'].value_counts()
#Find the prices of houses that were sold in 2008, the year of the recesscion
houses_sold_08 = df.loc[df['YrSold'] <= 2008, ['SalePrice']]
condition_of_sale_08 = df.loc[(df['SaleCondition'] == 'Abnormal') & (df['YrSold'] <= 2008)]

                     
condition_of_sale_08.head()
59/53:
# Investigate the Data
#df.info()
#df = df.reset_index(drop=True, inplace=True)

#Measures of Dispersion
sales_mean = df['SalePrice'].mean()
med_YrSold = df['YrSold'].median()
lot_area_std = df['LotArea'].std()
moSold_iqr = df['MoSold'].quantile(.9)

df['SaleCondition'].value_counts()
#Find the prices of houses that were sold in 2008, the year of the recesscion
houses_sold_08 = df.loc[df['YrSold'] <= 2008, ['SalePrice']]
condition_of_sale_08 = df.loc[(df['SaleCondition'] == 'Abnormal') & (df['YrSold'] <= 2008)]

                     
condition_of_sale_08.head()
59/54:
# Investigate the Data
#df.info()
#df = df.reset_index(drop=True, inplace=True)

#Measures of Dispersion
sales_mean = df['SalePrice'].mean()
med_YrSold = df['YrSold'].median()
lot_area_std = df['LotArea'].std()
moSold_iqr = df['MoSold'].quantile(.9)

df['SaleCondition'].value_counts()
#Find the prices of houses that were sold in 2008, the year of the recesscion
houses_sold_08 = df.loc[df['YrSold'] <= 2008, ['SalePrice']]
#condition_of_sale_08 = df.loc[(df['SaleCondition'] == 'Abnormal') & (df['YrSold'] <= 2008)]
x = = df.loc[df['YrSold'] <= 2008, ['SaleCondition']]            
#condition_of_sale_08.head()
59/55:
# Investigate the Data
#df.info()
#df = df.reset_index(drop=True, inplace=True)

#Measures of Dispersion
sales_mean = df['SalePrice'].mean()
med_YrSold = df['YrSold'].median()
lot_area_std = df['LotArea'].std()
moSold_iqr = df['MoSold'].quantile(.9)

df['SaleCondition'].value_counts()
#Find the prices of houses that were sold in 2008, the year of the recesscion
houses_sold_08 = df.loc[df['YrSold'] <= 2008, ['SalePrice']]
#condition_of_sale_08 = df.loc[(df['SaleCondition'] == 'Abnormal') & (df['YrSold'] <= 2008)]
x = df.loc[df['YrSold'] <= 2008, ['SaleCondition']]            
#condition_of_sale_08.head()   
x.head()
59/56:
# Investigate the Data
#df.info()
#df = df.reset_index(drop=True, inplace=True)

#Measures of Dispersion
sales_mean = df['SalePrice'].mean()
med_YrSold = df['YrSold'].median()
lot_area_std = df['LotArea'].std()
moSold_iqr = df['MoSold'].quantile(.9)

df['SaleCondition'].value_counts()
#Find the prices of houses that were sold in 2008, the year of the recesscion
houses_sold_08 = df.loc[df['YrSold'] <= 2008, ['SalePrice']]
#condition_of_sale_08 = df.loc[(df['SaleCondition'] == 'Abnormal') & (df['YrSold'] <= 2008)]
x = df.loc[df['YrSold'] <= 2008, ['SaleCondition']]            
#condition_of_sale_08.head()   
x.head(10)
59/57:
# Investigate the Data
#df.info()
#df = df.reset_index(drop=True, inplace=True)

#Measures of Dispersion
sales_mean = df['SalePrice'].mean()
med_YrSold = df['YrSold'].median()
lot_area_std = df['LotArea'].std()
moSold_iqr = df['MoSold'].quantile(.9)

df['SaleCondition'].value_counts()
#Find the prices of houses that were sold in 2008, the year of the recesscion
houses_sold_08 = df.loc[df['YrSold'] <= 2008, ['SalePrice']]
#condition_of_sale_08 = df.loc[(df['SaleCondition'] == 'Abnormal') & (df['YrSold'] <= 2008)]
x = df.loc[df['YrSold'] == 2008, ['SaleCondition']]            
#condition_of_sale_08.head()   
x.head(10)
59/58:
# Investigate the Data
#df.info()
#df = df.reset_index(drop=True, inplace=True)

#Measures of Dispersion
sales_mean = df['SalePrice'].mean()
med_YrSold = df['YrSold'].median()
lot_area_std = df['LotArea'].std()
moSold_iqr = df['MoSold'].quantile(.9)

df['SaleCondition'].value_counts()
#Find the prices of houses that were sold in 2008, the year of the recesscion
houses_sold_08 = df.loc[df['YrSold'] <= 2008, ['SalePrice']]
#condition_of_sale_08 = df.loc[(df['SaleCondition'] == 'Abnormal') & (df['YrSold'] <= 2008)]
x = df.loc[df['YrSold'] >= 2008, ['SaleCondition']]            
#condition_of_sale_08.head()   
x.head(10)
59/59:
# Investigate the Data
#df.info()
#df = df.reset_index(drop=True, inplace=True)

#Measures of Dispersion
sales_mean = df['SalePrice'].mean()
med_YrSold = df['YrSold'].median()
lot_area_std = df['LotArea'].std()
moSold_iqr = df['MoSold'].quantile(.9)

df['SaleCondition'].value_counts()
#Find the prices of houses that were sold in 2008, the year of the recesscion
houses_sold_08 = df.loc[df['YrSold'] >= 2008, ['SalePrice']]
#condition_of_sale_08 = df.loc[(df['SaleCondition'] == 'Abnormal') & (df['YrSold'] <= 2008)]
x = df.loc[df['YrSold'] >= 2008, ['SaleCondition']]            
#condition_of_sale_08.head()   
x.head(10)
59/60:
# Investigate the Data
#df.info()
#df = df.reset_index(drop=True, inplace=True)

#Measures of Dispersion
sales_mean = df['SalePrice'].mean()
med_YrSold = df['YrSold'].median()
lot_area_std = df['LotArea'].std()
moSold_iqr = df['MoSold'].quantile(.9)

df['SaleCondition'].value_counts()
#Find the prices of houses that were sold in 2008, the year of the recesscion
houses_sold_08 = df.loc[df['YrSold'] >= 2008, ['SalePrice']]
#condition_of_sale_08 = df.loc[(df['SaleCondition'] == 'Abnormal') & (df['YrSold'] <= 2008)]
x = df.loc[df['YrSold'] >= 2008, ['SaleCondition']]            
#condition_of_sale_08.head()   
x.head(10)
#Find the prices of houses that were sold in 2008, the year of the recesscion
houses_sold_08.head(10)
59/61:
# Investigate the Data
#df.info()
#df = df.reset_index(drop=True, inplace=True)

#Measures of Dispersion
sales_mean = df['SalePrice'].mean()
med_YrSold = df['YrSold'].median()
lot_area_std = df['LotArea'].std()
moSold_iqr = df['MoSold'].quantile(.9)

df['SaleCondition'].value_counts()
#Find the prices of houses that were sold in or after 2008, the year of the recesscion
houses_sold_08 = df.loc[df['YrSold'] >= 2008, ['SalePrice']]
sale_cond = df.loc[df['YrSold'] >= 2008, ['SaleCondition']]             
df.loc[df[SaleType] == 'COD']
#Find the prices of houses that were sold in 2008, the year of the recesscion
59/62:
# Investigate the Data
#df.info()
#df = df.reset_index(drop=True, inplace=True)

#Measures of Dispersion
sales_mean = df['SalePrice'].mean()
med_YrSold = df['YrSold'].median()
lot_area_std = df['LotArea'].std()
moSold_iqr = df['MoSold'].quantile(.9)

df['SaleCondition'].value_counts()
#Find the prices of houses that were sold in or after 2008, the year of the recesscion
houses_sold_08 = df.loc[df['YrSold'] >= 2008, ['SalePrice']]
sale_cond = df.loc[df['YrSold'] >= 2008, ['SaleCondition']]             
df.loc[df[SaleType] == COD]
#Find the prices of houses that were sold in 2008, the year of the recesscion
59/63:
# Investigate the Data
#df.info()
#df = df.reset_index(drop=True, inplace=True)

#Measures of Dispersion
sales_mean = df['SalePrice'].mean()
med_YrSold = df['YrSold'].median()
lot_area_std = df['LotArea'].std()
moSold_iqr = df['MoSold'].quantile(.9)

df['SaleCondition'].value_counts()
#Find the prices of houses that were sold in or after 2008, the year of the recesscion
houses_sold_08 = df.loc[df['YrSold'] >= 2008, ['SalePrice']]
sale_cond = df.loc[df['YrSold'] >= 2008, ['SaleCondition']]             
df.loc[df['SaleType'] == 'COD']
#Find the prices of houses that were sold in 2008, the year of the recesscion
59/64:
# Investigate the Data
#df.info()
#df = df.reset_index(drop=True, inplace=True)

#Measures of Dispersion
sales_mean = df['SalePrice'].mean()
med_YrSold = df['YrSold'].median()
lot_area_std = df['LotArea'].std()
moSold_iqr = df['MoSold'].quantile(.9)

df['SaleCondition'].value_counts()
#Find the prices of houses that were sold in or after 2008, the year of the recesscion
houses_sold_08 = df.loc[df['YrSold'] >= 2008, ['SalePrice']]
sale_cond = df.loc[df['YrSold'] >= 2008, ['SaleCondition']]             
df.loc[df['SaleType'] == 'COD', ['YrSold'] & ['SaleCondition']]

#Find the prices of houses that were sold in 2008, the year of the recesscion
59/65:
# Investigate the Data
#df.info()
#df = df.reset_index(drop=True, inplace=True)

#Measures of Dispersion
sales_mean = df['SalePrice'].mean()
med_YrSold = df['YrSold'].median()
lot_area_std = df['LotArea'].std()
moSold_iqr = df['MoSold'].quantile(.9)

df['SaleCondition'].value_counts()
#Find the prices of houses that were sold in or after 2008, the year of the recesscion
houses_sold_08 = df.loc[df['YrSold'] >= 2008, ['SalePrice']]
sale_cond = df.loc[df['YrSold'] >= 2008, ['SaleCondition']]             
df.loc[df['SaleType'] == 'COD', ['YrSold'], ['SaleCondition']]

#Find the prices of houses that were sold in 2008, the year of the recesscion
59/66:
# Investigate the Data
#df.info()
#df = df.reset_index(drop=True, inplace=True)

#Measures of Dispersion
sales_mean = df['SalePrice'].mean()
med_YrSold = df['YrSold'].median()
lot_area_std = df['LotArea'].std()
moSold_iqr = df['MoSold'].quantile(.9)

df['SaleCondition'].value_counts()
#Find the prices of houses that were sold in or after 2008, the year of the recesscion
houses_sold_08 = df.loc[df['YrSold'] >= 2008, ['SalePrice']]
sale_cond = df.loc[df['YrSold'] >= 2008, ['SaleCondition']]             
df.loc[df['SaleType'] == 'COD', ['YrSold']]

#Find the prices of houses that were sold in 2008, the year of the recesscion
59/67:
# Investigate the Data
#df.info()
#df = df.reset_index(drop=True, inplace=True)

#Measures of Dispersion
sales_mean = df['SalePrice'].mean()
med_YrSold = df['YrSold'].median()
lot_area_std = df['LotArea'].std()
moSold_iqr = df['MoSold'].quantile(.9)

df['SaleCondition'].value_counts()
#Find the prices of houses that were sold in or after 2008, the year of the recesscion
houses_sold_08 = df.loc[df['YrSold'] >= 2008, ['SalePrice']]
sale_cond = df.loc[df['YrSold'] >= 2008, ['SaleCondition']]             
df.loc[df['SaleType'] == 'COD' & ['YrSold'], ['SaleCondition']]

#Find the prices of houses that were sold in 2008, the year of the recesscion
59/68:
# Investigate the Data
#df.info()
#df = df.reset_index(drop=True, inplace=True)

#Measures of Dispersion
sales_mean = df['SalePrice'].mean()
med_YrSold = df['YrSold'].median()
lot_area_std = df['LotArea'].std()
moSold_iqr = df['MoSold'].quantile(.9)

df['SaleCondition'].value_counts()
#Find the prices of houses that were sold in or after 2008, the year of the recesscion
houses_sold_08 = df.loc[df['YrSold'] >= 2008, ['SalePrice']]
sale_cond = df.loc[df['YrSold'] >= 2008, ['SaleCondition']]             
df.loc[df['SaleType'] == 'COD' & ['YrSold']]

#Find the prices of houses that were sold in 2008, the year of the recesscion
59/69:
# Investigate the Data
#df.info()
#df = df.reset_index(drop=True, inplace=True)

#Measures of Dispersion
sales_mean = df['SalePrice'].mean()
med_YrSold = df['YrSold'].median()
lot_area_std = df['LotArea'].std()
moSold_iqr = df['MoSold'].quantile(.9)

df['SaleCondition'].value_counts()
#Find the prices of houses that were sold in or after 2008, the year of the recesscion
houses_sold_08 = df.loc[df['YrSold'] >= 2008, ['SalePrice']]
sale_cond = df.loc[df['YrSold'] >= 2008, ['SaleCondition']]             
df.loc[df['SaleType'] == 'COD', ['YrSold']]

#Find the prices of houses that were sold in 2008, the year of the recesscion
59/70:
df['SaleCondition'].value_counts()
#Find the prices of houses that were sold in or after 2008, the year of the recesscion
houses_sold_08 = df.loc[df['YrSold'] >= 2008, ['SalePrice']]
sale_cond = df.loc[df['YrSold'] >= 2008, ['SaleCondition']]             
cod_sales = df.loc[df['SaleType'] == 'COD', ['YrSold']]



for i in cod_sales:
    if df['SaleType'] == 'COD' & df['YrSold'] == 2008:
        print(True)
    else:
        print(False)

df.loc[df['SaleType'] == 'COD', 'Recession Sales'] = 
#Find the prices of houses that were sold in 2008, the year of the recesscion

df.loc[(df['SaleType'] == 'COD') & (df[['YrSold'] == 2008))
59/71:
df['SaleCondition'].value_counts()
#Find the prices of houses that were sold in or after 2008, the year of the recesscion
houses_sold_08 = df.loc[df['YrSold'] >= 2008, ['SalePrice']]
sale_cond = df.loc[df['YrSold'] >= 2008, ['SaleCondition']]             
cod_sales = df.loc[df['SaleType'] == 'COD', ['YrSold']]



for i in cod_sales:
    if df['SaleType'] == 'COD' & df['YrSold'] == 2008:
        print(True)
    else:
        print(False)

#df.loc[df['SaleType'] == 'COD', 'Recession Sales'] = 
#Find the prices of houses that were sold in 2008, the year of the recesscion

df.loc[(df['SaleType'] == 'COD') & (df[['YrSold'] == 2008))
59/72:
df['SaleCondition'].value_counts()
#Find the prices of houses that were sold in or after 2008, the year of the recesscion
houses_sold_08 = df.loc[df['YrSold'] >= 2008, ['SalePrice']]
sale_cond = df.loc[df['YrSold'] >= 2008, ['SaleCondition']]             
cod_sales = df.loc[df['SaleType'] == 'COD', ['YrSold']]



for i in cod_sales:
    if df['SaleType'] == 'COD' & df['YrSold'] == 2008:
        print(True)
    else:
        print(False)

#df.loc[df['SaleType'] == 'COD', 'Recession Sales'] = 
#Find the prices of houses that were sold in 2008, the year of the recesscion

df.loc[(df['SaleType'] == 'COD') & (df['YrSold'] == 2008)]
59/73:
df['SaleCondition'].value_counts()
#Find the prices of houses that were sold in or after 2008, the year of the recesscion
houses_sold_08 = df.loc[df['YrSold'] >= 2008, ['SalePrice']]
sale_cond = df.loc[df['YrSold'] >= 2008, ['SaleCondition']]             
cod_sales = df.loc[df['SaleType'] == 'COD', ['YrSold']]



for i in cod_sales:
    if df['SaleType'] == 'COD' & df['YrSold'] == 2008:
        print(True)
    else:
        print(False)

#df.loc[df['SaleType'] == 'COD', 'Recession Sales'] = 
#Find the prices of houses that were sold in 2008, the year of the recesscion

df[(df['SaleType'] == 'COD') & (df['YrSold'] == 2008)]
59/74:
df['SaleCondition'].value_counts()
#Find the prices of houses that were sold in or after 2008, the year of the recesscion
houses_sold_08 = df.loc[df['YrSold'] >= 2008, ['SalePrice']]
sale_cond = df.loc[df['YrSold'] >= 2008, ['SaleCondition']]             
cod_sales = df.loc[df['SaleType'] == 'COD', ['YrSold']]





#df.loc[df['SaleType'] == 'COD', 'Recession Sales'] = 
#Find the prices of houses that were sold in 2008, the year of the recesscion

df[(df['SaleType'] == 'COD') & (df['YrSold'] == 2008)]
59/75:
df['SaleCondition'].value_counts()
#Find the prices of houses that were sold in or after 2008, the year of the recesscion
houses_sold_08 = df.loc[df['YrSold'] >= 2008, ['SalePrice']]
sale_cond = df.loc[df['YrSold'] >= 2008, ['SaleCondition']]             
cod_sales = df.loc[df['SaleType'] == 'COD', ['YrSold']]





#df.loc[df['SaleType'] == 'COD', 'Recession Sales'] = 
#Find the prices of houses that were sold in 2008, the year of the recesscion

COD_08 = df[(df['SaleType'] == 'COD') & (df['YrSold'] == 2008)]

if COD_08:
    df.loc[df[COD_08], 'RecessionSale'] = 'True'
else:
    df.loc[df[COD_08], 'RecessionSale'] = 'False'
59/76:
df['SaleCondition'].value_counts()
#Find the prices of houses that were sold in or after 2008, the year of the recesscion
houses_sold_08 = df.loc[df['YrSold'] >= 2008, ['SalePrice']]
sale_cond = df.loc[df['YrSold'] >= 2008, ['SaleCondition']]             
cod_sales = df.loc[df['SaleType'] == 'COD', ['YrSold']]





#df.loc[df['SaleType'] == 'COD', 'Recession Sales'] = 
#Find the prices of houses that were sold in 2008, the year of the recesscion

COD_08 = df[(df['SaleType'] == 'COD') & (df['YrSold'] == 2008)]

if COD_08 is True:
    df.loc[df[COD_08], 'RecessionSale'] = 'True'
else:
    df.loc[df[COD_08], 'RecessionSale'] = 'False'
59/77:
df['SaleCondition'].value_counts()
#Find the prices of houses that were sold in or after 2008, the year of the recesscion
houses_sold_08 = df.loc[df['YrSold'] >= 2008, ['SalePrice']]
sale_cond = df.loc[df['YrSold'] >= 2008, ['SaleCondition']]             
cod_sales = df.loc[df['SaleType'] == 'COD', ['YrSold']]





#df.loc[df['SaleType'] == 'COD', 'Recession Sales'] = 
#Find the prices of houses that were sold in 2008, the year of the recesscion

COD_08 = df[(df['SaleType'] == 'COD') & (df['YrSold'] == 2008)]

if df[(df['SaleType'] == 'COD') & (df['YrSold'] == 2008)] is True:
    df.loc[df[COD_08], 'RecessionSale'] = 'True'
else:
    df.loc[df[COD_08], 'RecessionSale'] = 'False'
59/78:
df['SaleCondition'].value_counts()
#Find the prices of houses that were sold in or after 2008, the year of the recesscion
houses_sold_08 = df.loc[df['YrSold'] >= 2008, ['SalePrice']]
sale_cond = df.loc[df['YrSold'] >= 2008, ['SaleCondition']]             
cod_sales = df.loc[df['SaleType'] == 'COD', ['YrSold']]





#df.loc[df['SaleType'] == 'COD', 'Recession Sales'] = 
#Find the prices of houses that were sold in 2008, the year of the recesscion

COD_08 = df[(df['SaleType'] == 'COD') & (df['YrSold'] == 2008)]

if COD_08 is True:
    df.loc[df[COD_08], 'RecessionSale'] = 'True'
else:
    df.loc[df[COD_08], 'RecessionSale'] = 'False'
59/79:
df['SaleCondition'].value_counts()
#Find the prices of houses that were sold in or after 2008, the year of the recesscion
houses_sold_08 = df.loc[df['YrSold'] >= 2008, ['SalePrice']]
sale_cond = df.loc[df['YrSold'] >= 2008, ['SaleCondition']]             
cod_sales = df.loc[df['SaleType'] == 'COD', ['YrSold']]





#df.loc[df['SaleType'] == 'COD', 'Recession Sales'] = 
#Find the prices of houses that were sold in 2008, the year of the recesscion

COD_08 = df[(df['SaleType'] == 'COD') & (df['YrSold'] == 2008)]

if COD_08 == True:
    df.loc[df[COD_08], 'RecessionSale'] = 'True'
else:
    df.loc[df[COD_08], 'RecessionSale'] = 'False'
59/80:
df['SaleCondition'].value_counts()
#Find the prices of houses that were sold in or after 2008, the year of the recesscion
houses_sold_08 = df.loc[df['YrSold'] >= 2008, ['SalePrice']]
sale_cond = df.loc[df['YrSold'] >= 2008, ['SaleCondition']]             
cod_sales = df.loc[df['SaleType'] == 'COD', ['YrSold']]





#df.loc[df['SaleType'] == 'COD', 'Recession Sales'] = 
#Find the prices of houses that were sold in 2008, the year of the recesscion

COD_08 = df[(df['SaleType'] == 'COD') & (df['YrSold'] == 2008)]

df.loc[df['SaleType'] == 'COD' & df['YrSold'] == 2008, 'RecessionSale']
59/81:
df['SaleCondition'].value_counts()
#Find the prices of houses that were sold in or after 2008, the year of the recesscion
houses_sold_08 = df.loc[df['YrSold'] >= 2008, ['SalePrice']]
sale_cond = df.loc[df['YrSold'] >= 2008, ['SaleCondition']]             
cod_sales = df.loc[df['SaleType'] == 'COD', ['YrSold']]





#df.loc[df['SaleType'] == 'COD', 'Recession Sales'] = 
#Find the prices of houses that were sold in 2008, the year of the recesscion

COD_08 = df[(df['SaleType'] == 'COD') & (df['YrSold'] == 2008)]

print([df['SaleType'] == 'COD' & df['YrSold'] == 2008, 'RecessionSale'])
59/82:
df['SaleCondition'].value_counts()
#Find the prices of houses that were sold in or after 2008, the year of the recesscion
houses_sold_08 = df.loc[df['YrSold'] >= 2008, ['SalePrice']]
sale_cond = df.loc[df['YrSold'] >= 2008, ['SaleCondition']]             
cod_sales = df.loc[df['SaleType'] == 'COD', ['YrSold']]





#df.loc[df['SaleType'] == 'COD', 'Recession Sales'] = 
#Find the prices of houses that were sold in 2008, the year of the recesscion

COD_08 = df[(df['SaleType'] == 'COD') & (df['YrSold'] == 2008)]

print(df['SaleType'] == 'COD' & df['YrSold'] == 2008)
59/83:
df['SaleCondition'].value_counts()
#Find the prices of houses that were sold in or after 2008, the year of the recesscion
houses_sold_08 = df.loc[df['YrSold'] >= 2008, ['SalePrice']]
sale_cond = df.loc[df['YrSold'] >= 2008, ['SaleCondition']]             
cod_sales = df.loc[df['SaleType'] == 'COD', ['YrSold']]





#df.loc[df['SaleType'] == 'COD', 'Recession Sales'] = 
#Find the prices of houses that were sold in 2008, the year of the recesscion

COD_08 = df[(df['SaleType'] == 'COD') & (df['YrSold'] == 2008)]

#print(df['SaleType'] == 'COD' & df['YrSold'] == 2008)
59/84:
df['SaleCondition'].value_counts()
#Find the prices of houses that were sold in or after 2008, the year of the recesscion
houses_sold_08 = df.loc[df['YrSold'] >= 2008, ['SalePrice']]
sale_cond = df.loc[df['YrSold'] >= 2008, ['SaleCondition']]             
cod_sales = df.loc[df['SaleType'] == 'COD', ['YrSold']]





#df.loc[df['SaleType'] == 'COD', 'Recession Sales'] = 
#Find the prices of houses that were sold in 2008, the year of the recesscion

COD_08 = df[(df['SaleType'] == 'COD') & (df['YrSold'] == 2008)]
COD_08.head()
#print(df['SaleType'] == 'COD' & df['YrSold'] == 2008)
59/85:
df['SaleCondition'].value_counts()
#Find the prices of houses that were sold in or after 2008, the year of the recesscion
houses_sold_08 = df.loc[df['YrSold'] >= 2008, ['SalePrice']]
sale_cond = df.loc[df['YrSold'] >= 2008, ['SaleCondition']]             
cod_sales = df.loc[df['SaleType'] == 'COD', ['YrSold']]





#df.loc[df['SaleType'] == 'COD', 'Recession Sales'] = 
#Find the prices of houses that were sold in 2008, the year of the recesscion

COD_08 = df[(df['SaleType'] == 'COD') & (df['YrSold'] == 2008)]
COD_08.head(10)
#print(df['SaleType'] == 'COD' & df['YrSold'] == 2008)
59/86:
# Investigating Distributions using scatter_matrix

df.index
59/87:
df['SaleCondition'].value_counts()
#Find the prices of houses that were sold in or after 2008, the year of the recesscion
houses_sold_08 = df.loc[df['YrSold'] >= 2008, ['SalePrice']]
sale_cond = df.loc[df['YrSold'] >= 2008, ['SaleCondition']]             
cod_sales = df.loc[df['SaleType'] == 'COD', ['YrSold']]





#df.loc[df['SaleType'] == 'COD', 'Recession Sales'] = 
#Find the prices of houses that were sold in 2008, the year of the recesscion

COD_08 = df[(df['SaleType'] == 'COD') & (df['YrSold'] == 2008)]
df['RecessionSales'] = df['YrSold'].map(lambda x: True )
#print(df['SaleType'] == 'COD' & df['YrSold'] == 2008)
59/88:
df['SaleCondition'].value_counts()
#Find the prices of houses that were sold in or after 2008, the year of the recesscion
houses_sold_08 = df.loc[df['YrSold'] >= 2008, ['SalePrice']]
sale_cond = df.loc[df['YrSold'] >= 2008, ['SaleCondition']]             
cod_sales = df.loc[df['SaleType'] == 'COD', ['YrSold']]





#df.loc[df['SaleType'] == 'COD', 'Recession Sales'] = 
#Find the prices of houses that were sold in 2008, the year of the recesscion

COD_08 = df[(df['SaleType'] == 'COD') & (df['YrSold'] == 2008)]
df['RecessionSales'] = df['YrSold'].map(lambda x: True )
df['RecessionSales'].head()
#print(df['SaleType'] == 'COD' & df['YrSold'] == 2008)
59/89:
df['SaleCondition'].value_counts()
#Find the prices of houses that were sold in or after 2008, the year of the recesscion
houses_sold_08 = df.loc[df['YrSold'] >= 2008, ['SalePrice']]
sale_cond = df.loc[df['YrSold'] >= 2008, ['SaleCondition']]             
cod_sales = df.loc[df['SaleType'] == 'COD', ['YrSold']]





#df.loc[df['SaleType'] == 'COD', 'Recession Sales'] = 
#Find the prices of houses that were sold in 2008, the year of the recesscion

COD_08 = df[(df['SaleType'] == 'COD') & (df['YrSold'] == 2008)]
df['RecessionSales'] = df['YrSold'].map(lambda x: True )
#print(df['SaleType'] == 'COD' & df['YrSold'] == 2008)
59/90:
df.index

df['SaleCondition'].value_counts()
#Find the prices of houses that were sold in or after 2008, the year of the recesscion
houses_sold_08 = df.loc[df['YrSold'] >= 2008, ['SalePrice']]
sale_cond = df.loc[df['YrSold'] >= 2008, ['SaleCondition']]             
cod_sales = df.loc[df['SaleType'] == 'COD', ['YrSold']]





#df.loc[df['SaleType'] == 'COD', 'Recession Sales'] = 
#Find the prices of houses that were sold in 2008, the year of the recesscion

COD_08 = df[(df['SaleType'] == 'COD') & (df['YrSold'] == 2008)]
df['RecessionSales'] = df['YrSold'].map(lambda x: True )
#print(df['SaleType'] == 'COD' & df['YrSold'] == 2008)
59/91:
# Investigating Distributions using scatter_matrix
pd.plotting.scatter_matrix(df);
59/92:
# Create a plot that shows the SalesPrice Distribution
data.plot('SalesPrice', kind='scatter')
59/93:
# Create a plot that shows the SalesPrice Distribution
df.plot('SalesPrice', kind='scatter')
59/94:
# Create a plot that shows the SalesPrice Distribution
df.plot('SalePrice',  kind='scatter')
59/95:
# Create a plot that shows the SalesPrice Distribution
df.plot('SalePrice','YrSold', kind='scatter')
59/96:
# Create a plot that shows the SalesPrice Distribution
#df.plot('SalePrice','YrSold', kind='scatter')
df.plot.scatter('SalePrice','YrSold')
59/97:
# Create a Box Plot for SalePrice
#ninety = df['SalePrice'].quantile(.9)
#median = df['SalePrice'].quantile(.5)

df.plot.box()
59/98:
# Create a Box Plot for SalePrice
#ninety = df['SalePrice'].quantile(.9)
#median = df['SalePrice'].quantile(.5)

df['SalePrice'].plot.box()
59/99:
# Create a Box Plot for SalePrice
iqr_25 = df['SalePrice'].quantile(.25)
iqr_50 = df['SalePrice'].quantile(.5)
iqr_75 = df['SalePrice'].quantile(.75)

df['SalePrice'].plot.box()
59/100:
# Create a plot that shows the LotArea Distribution
import seaborn as sns
from scipy import stats
59/101:
# Create a plot that shows the LotArea Distribution
import seaborn as sns
from scipy import stats
df['LotArea']
sns.set(color_codes=True)
sns.distplot(df['LotArea'])
59/102:
# Create a plot that shows the LotArea Distribution
import seaborn as sns
from scipy import stats
df['LotArea']
sns.set(color_codes=True)
sns.distplot(df['LotArea'], bins = 8)
59/103:
# Create a plot that shows the LotArea Distribution
import seaborn as sns
from scipy import stats
df['LotArea']
sns.set(color_codes=True)
sns.distplot(df['LotArea'])
59/104:
# Create a plot that shows the Distribution of the overall house condition
sns.set(color_codes=True)
sns.distplot(df)
59/105:
# Perform an Exploration of home values by age
df.head()
59/106:
# Create a plot that shows the Distribution of the overall house condition
sns.set(color_codes=True)
sns.distplot(df['OverallCond'])
59/107:
# Investigating Distributions using scatter_matrix
sns.set(color_codes=True)
sns.distplot(df['SalePrice'])
59/108:
# Perform an Exploration of home values by age
df = pd.read_csv('ames_train.csv', usecols = ['MSSubClass', 'SalePrice'])
59/109:
# Perform an Exploration of home values by age
df = pd.read_csv('ames_train.csv', usecols = ['MSSubClass', 'SalePrice'])
df.head()
59/110:
# Perform an Exploration of home values by age
df = pd.read_csv('ames_train.csv', usecols = ['MSSubClass', 'SalePrice'])
df.head()
df.shape()
59/111:
# Perform an Exploration of home values by age
df = pd.read_csv('ames_train.csv', usecols = ['MSSubClass', 'SalePrice'])
df.head(10)
59/112:
# Perform an Exploration of home values by age
df = pd.read_csv('ames_train.csv', usecols = ['MSSubClass', 'SalePrice'])
df.head(10)
df.describe()
59/113:
# Perform an Exploration of home values by age
df = pd.read_csv('ames_train.csv', usecols = ['MSSubClass', 'SalePrice'])
#df.describe()
df.corr()
59/114:
# Perform an Exploration of home values by age
df = pd.read_csv('ames_train.csv', usecols = ['MSSubClass', 'SalePrice'])
#df.describe()
r = df.corr() #correlation coefficient
print('The correlation coefficient is ', r, ' ,which means that Home Values \n and Age of Homes have a high negative correlation, /n a change in home value results in an opposite change in Home Age.')
59/115:
# Perform an Exploration of home values by age
df = pd.read_csv('ames_train.csv', usecols = ['MSSubClass', 'SalePrice'])
#df.describe()
r = df.corr() #correlation coefficient
print('The correlation coefficient is ', r, ' ,which means that Home Values \n and Age of Homes have a high negative correlation, \n a change in home value results in an opposite change in Home Age.')
59/116:
# Perform an Exploration of home values by age
df = pd.read_csv('ames_train.csv', usecols = ['MSSubClass', 'SalePrice'])
#df.describe()
r = df.corr() #correlation coefficient
print('The correlation coefficient is ', r, ' ,which means that Home Values\n and Age of Homes have a high negative correlation, \n a change in home value results in an opposite change in Home Age.')
59/117:
# Perform an Exploration of home values by age
df = pd.read_csv('ames_train.csv', usecols = ['MSSubClass', 'SalePrice'])
#df.describe()
r = df.corr() #correlation coefficient
print('The correlation coefficient is ', r, ' ,which means that Home Values \n and Age of Homes have a high negative correlation, \n a change in home value results in an opposite change in Home Age.')
59/118:
# Perform an Exploration of home values by age
df = pd.read_csv('ames_train.csv', usecols = ['MSSubClass', 'SalePrice'])
#df.describe()
r = df.corr() #correlation coefficient
print('The correlation coefficient is ', r, ' ,which means that Home Values \n and Age of Homes have a high negative correlation, a change in \n home value results in an opposite change in Home Age.')
59/119:
# Perform an Exploration of home values by age
df = pd.read_csv('ames_train.csv', usecols = ['MSSubClass', 'SalePrice'])
#df.describe()
r = df.corr() #correlation coefficient
#print('The correlation coefficient is ', r, ' ,which means that Home Values \n and Age of Homes have a high negative correlation, a change in \n home value results in an opposite change in Home Age.')
59/120:
# Perform an Exploration of home values by age
df = pd.read_csv('ames_train.csv', usecols = ['MSSubClass', 'SalePrice'])
#df.describe()
df.corr() #correlation coefficient
#print('The correlation coefficient is ', r, ' ,which means that Home Values \n and Age of Homes have a high negative correlation, a change in \n home value results in an opposite change in Home Age.')
59/121:
# Perform an Exploration of home values by age
df = pd.read_csv('ames_train.csv', usecols = ['MSSubClass', 'SalePrice'])
#df.describe()
r = df.corr()
print(r(1))#correlation coefficient
#print('The correlation coefficient is ', r, ' ,which means that Home Values \n and Age of Homes have a high negative correlation, a change in \n home value results in an opposite change in Home Age.')
59/122:
# Perform an Exploration of home values by age
df = pd.read_csv('ames_train.csv', usecols = ['MSSubClass', 'SalePrice'])
#df.describe()
r = df.corr()
print(r[1])#correlation coefficient
#print('The correlation coefficient is ', r, ' ,which means that Home Values \n and Age of Homes have a high negative correlation, a change in \n home value results in an opposite change in Home Age.')
59/123:
# Perform an Exploration of home values by age
df = pd.read_csv('ames_train.csv', usecols = ['MSSubClass', 'SalePrice'])
#df.describe()
df.corr() #correlation coefficient
#print('The correlation coefficient is ', r, ' ,which means that Home Values \n and Age of Homes have a high negative correlation, a change in \n home value results in an opposite change in Home Age.')
59/124:
# Perform an Exploration of home values by age
df = pd.read_csv('ames_train.csv', usecols = ['MSSubClass', 'SalePrice'])
df.corr() #correlation coefficient
print('The correlation coefficient is -.084 ,which means that Home Values \n and Age of Homes have a high negative correlation, a change in \n home value results in an opposite change in Home Age.')
59/125:
# Perform an Exploration of home values by age
df = pd.read_csv('ames_train.csv', usecols = ['MSSubClass', 'SalePrice'])
print(df.corr()) #correlation coefficient
print('The correlation coefficient is -.084 ,which means that Home Values \n and Age of Homes have a high negative correlation, a change in \n home value results in an opposite change in Home Age.')
59/126:
# Perform an Exploration of home values by age
df = pd.read_csv('ames_train.csv', usecols = ['MSSubClass', 'SalePrice'])
print(df.corr()) #correlation coefficient

print('The correlation coefficient is -.084 ,which means that Home Values \n and Age of Homes have a high negative correlation, a change in \n home value results in an opposite change in Home Age.')
63/1:
# build your word_counter here
# Your code here
def count_lyrics(lyrics):
    word_counter = {}

    no_punc = lyrics.replace('\n', ' ').replace(',','').replace('(','').replace(')','').replace('[','').replace('[','').replace(']','').replace('-','')
    no_punc.lower()

    no_space = [i.strip() for i in no_punc.split(' ')]

    for i in no_space:
        word_counter[i] = word_counter.get(i,0) + 1
    return word_counter
63/2:
# just run this cell
from importlib import reload
import solutions.solutions as sol
reload(sol)
63/3:
# this cell will just load and open the lyrics
# just run this cell
with open("data/lyrics.txt", "r") as f:
    lyrics = f.read()
lyrics
63/4:
# build your word_counter here
# Your code here
def count_lyrics(lyrics):
    word_counter = {}

    no_punc = lyrics.replace('\n', ' ').replace(',','').replace('(','').replace(')','').replace('[','').replace('[','').replace(']','').replace('-','')
    no_punc.lower()

    no_space = [i.strip() for i in no_punc.split(' ')]

    for i in no_space:
        word_counter[i] = word_counter.get(i,0) + 1
    return word_counter
63/5:
# Test your code here
# just run this cell

try:
    assert word_counter==word_counter_test
    print('test passed')
except Exception as e:
    print("word_counter does not equal word_counter_test")
63/6:
# Find the word with the highest counts
# Your code here
max_value = max(word_counter.values())
most_common_word = [k for k, v in word_counter.items() if v == max_value]
63/7:
# just run this cell
from importlib import reload
import solutions.solutions as sol
reload(sol)
63/8:
# this cell will just load and open the lyrics
# just run this cell
with open("data/lyrics.txt", "r") as f:
    lyrics = f.read()
lyrics
63/9:
# build your word_counter here
# Your code here
def count_lyrics(lyrics):
    word_counter = {}

    no_punc = lyrics.replace('\n', ' ').replace(',','').replace('(','').replace(')','').replace('[','').replace('[','').replace(']','').replace('-','')
    no_punc.lower()

    no_space = [i.strip() for i in no_punc.split(' ')]

    for i in no_space:
        word_counter[i] = word_counter.get(i,0) + 1
    return word_counter
63/10:
# Test your code here
# just run this cell

try:
    assert word_counter==word_counter_test
    print('test passed')
except Exception as e:
    print("word_counter does not equal word_counter_test")
63/11:
# Find the word with the highest counts
# Your code here
max_value = max(word_counter.values())
most_common_word = [k for k, v in word_counter.items() if v == max_value]
63/12:
# get actual most_common_word
# just run this cell

most_common_word_test = sol.section1_partB(lyrics)
most_common_word
63/13:
# build your word_counter here
# Your code here
def count_lyrics(lyrics):
    word_counter = {}

    no_punc = lyrics.replace('\n', ' ').replace(',','').replace('(','').replace(')','').replace('[','').replace('[','').replace(']','').replace('-','')
    no_punc.lower()

    no_space = [i.strip() for i in no_punc.split(' ')]

    for i in no_space:
        word_counter[i] = word_counter.get(i,0) + 1
    return word_counter
63/14:
# get actual word_counter here
# just run this cell
word_counter_test = sol.section1_partA(lyrics)
word_counter_test
63/15:
# Test your code here
# just run this cell

try:
    assert word_counter==word_counter_test
    print('test passed')
except Exception as e:
    print("word_counter does not equal word_counter_test")
63/16:
# Find the word with the highest counts
# Your code here
max_value = max(word_counter.values())
most_common_word = [k for k, v in word_counter.items() if v == max_value]
63/17:
# just run this cell
from importlib import reload
import solutions.solutions as sol
reload(sol)
63/18:
# this cell will just load and open the lyrics
# just run this cell
with open("data/lyrics.txt", "r") as f:
    lyrics = f.read()
lyrics
63/19:
# build your word_counter here
# Your code here
def count_lyrics(lyrics):
    word_counter = {}

    no_punc = lyrics.replace('\n', ' ').replace(',','').replace('(','').replace(')','').replace('[','').replace('[','').replace(']','').replace('-','')
    no_punc.lower()

    no_space = [i.strip() for i in no_punc.split(' ')]

    for i in no_space:
        word_counter[i] = word_counter.get(i,0) + 1
    return word_counter
63/20:
# get actual word_counter here
# just run this cell
word_counter_test = sol.section1_partA(lyrics)
word_counter_test
63/21:
# Test your code here
# just run this cell

try:
    assert word_counter==word_counter_test
    print('test passed')
except Exception as e:
    print("word_counter does not equal word_counter_test")
63/22:
# Find the word with the highest counts
# Your code here
max_value = max(word_counter.values())
most_common_word = [k for k, v in word_counter.items() if v == max_value]
63/23:
# get your solution for the random numbers above
# just run this cell

number_string = find_if_divisible(numbers=numbers, divisors=divisors)
63/24:
# Your code here
# write a function that checks the numbers in a list numbers
# and checks if any of the numbers are divisible in a list of divisors divisors
# it should return the all numbers in order they're given in the list 
# as a string

def find_if_divisible(numbers, divisors):
    for i in numbers:
        for d in divisors:
            if i%d == 0:
                lst = i
                lst_to_str = str(lst)
                lst_to_str = strip(',').strip(' ')
    return lst_to_str

    """
    Example: 
    find_if_divisible([10, 19, 15, 20, 23, 30, 50, 100], [2, 8, 5])
    should return 
    "1015203050100"
    
    since all of these numbers are divisible by at least one number in the divisors list
    """
63/25:
# run this cell to get a random set of numbers and divisors
# just run this cell

numbers = [random.randint(0, 50) for i in range(200)]
divisors = [random.randint(1, 20) for i in range(5)]
63/26:
# run cell to generate a list of 100 random numbers
# just run this cell

import random
random_nums = [random.randint(0, 1000) for i in range(100)]
63/27:
# Your code here
# write a function that checks the numbers in a list numbers
# and checks if any of the numbers are divisible in a list of divisors divisors
# it should return the all numbers in order they're given in the list 
# as a string

def find_if_divisible(numbers, divisors):
    for i in numbers:
        for d in divisors:
            if i%d == 0:
                lst = i
                lst_to_str = str(lst)
                lst_to_str = strip(',').strip(' ')
    return lst_to_str

    """
    Example: 
    find_if_divisible([10, 19, 15, 20, 23, 30, 50, 100], [2, 8, 5])
    should return 
    "1015203050100"
    
    since all of these numbers are divisible by at least one number in the divisors list
    """
63/28:
# run this cell to get a random set of numbers and divisors
# just run this cell

numbers = [random.randint(0, 50) for i in range(200)]
divisors = [random.randint(1, 20) for i in range(5)]
63/29:
# get your solution for the random numbers above
# just run this cell

number_string = find_if_divisible(numbers=numbers, divisors=divisors)
63/30:
# Your code here
# write a function that checks the numbers in a list numbers
# and checks if any of the numbers are divisible in a list of divisors divisors
# it should return the all numbers in order they're given in the list 
# as a string

def find_if_divisible(numbers, divisors):
    for i in numbers:
        for d in divisors:
            if i%d == 0:
                lst = i
                lst_to_str = str(lst)
                lst_to_str.strip(',').strip(' ')
    return lst_to_str

    """
    Example: 
    find_if_divisible([10, 19, 15, 20, 23, 30, 50, 100], [2, 8, 5])
    should return 
    "1015203050100"
    
    since all of these numbers are divisible by at least one number in the divisors list
    """
63/31:
# run this cell to get a random set of numbers and divisors
# just run this cell

numbers = [random.randint(0, 50) for i in range(200)]
divisors = [random.randint(1, 20) for i in range(5)]
63/32:
# get your solution for the random numbers above
# just run this cell

number_string = find_if_divisible(numbers=numbers, divisors=divisors)
63/33:
# get the actual solution for the random numbers above
# just run this cell

number_string_test = sol.section3_partB(numbers, divisors)
63/34:
# test your solution here
# just run this cell

try:
    assert number_string==number_string_test
    print('passed test')
except Exception as e:
    print("number_string does not equal number_string_test")
63/35:
# just run this cell
from importlib import reload
import solutions.solutions as sol
reload(sol)
63/36:
# this cell will just load and open the lyrics
# just run this cell
with open("data/lyrics.txt", "r") as f:
    lyrics = f.read()
lyrics
63/37:
# build your word_counter here
# Your code here
def count_lyrics(lyrics):
    word_counter = {}

    no_punc = lyrics.replace('\n', ' ').replace(',','').replace('(','').replace(')','').replace('[','').replace('[','').replace(']','').replace('-','')
    no_punc.lower()

    no_space = [i.strip() for i in no_punc.split(' ')]

    for i in no_space:
        word_counter[i] = word_counter.get(i,0) + 1
    return word_counter
63/38:
# get actual word_counter here
# just run this cell
word_counter_test = sol.section1_partA(lyrics)
word_counter_test
63/39:
# Test your code here
# just run this cell

try:
    assert word_counter==word_counter_test
    print('test passed')
except Exception as e:
    print("word_counter does not equal word_counter_test")
63/40:
# Find the word with the highest counts
# Your code here
max_value = max(word_counter.values())
most_common_word = [k for k, v in word_counter.items() if v == max_value]
63/41:
# get actual most_common_word
# just run this cell

most_common_word_test = sol.section1_partB(lyrics)
most_common_word
63/42:
# Find the word with the highest counts
# Your code here
word_counter = count_lyrics(lyrics)
max_value = max(word_counter.values())
most_common_word = [k for k, v in word_counter.items() if v == max_value]
63/43:
# get actual most_common_word
# just run this cell

most_common_word_test = sol.section1_partB(lyrics)
most_common_word
63/44:
# test your solution here
# just run this cell

try:
    assert most_common_word==most_common_word_test
    print('test passed')
except Exception as e:
    print("most_common_word does not equal most_common_word_test")
63/45:
# get your solution for the random numbers above
# just run this cell

number_string = find_if_divisible(numbers=numbers, divisors=divisors)
number_string
63/46:
# Convert this notebook to README by running this cell!
!jupyter nbconvert --to markdown assessment.ipynb && mv assessment.md README.md
65/1:
import pandas as pd
df = pd.read_csv('Yelp_Reviews.csv', index_col=0)
df.head(2)
65/2:
# Your code here
df['stars_squared'] = df['stars'].map(lanbda x: x**2)
df.head()
65/3:
# Your code here
df['stars_squared'] = df['stars'].map(lambda x: x**2)
df.head()
65/4:
# Your code here
df.month.map(lambda x: x[:4]).head()
65/5:
# Your code here
df.date.map(lambda x: x[:4]).head()
65/6:
# Your code here
df.date.map(lambda x: x[1:4]).head()
65/7:
# Your code here
df['date'].dt.month
65/8:
# Your code here
df.date.map(lambda x: x[:4]).head()
65/9:
# Your code here
df.date.map(lambda x: x[5:4]).head()
65/10:
# Your code here
df.date.map(lambda x: x[5:7]).head()
65/11:
# Your code here
df['text'].map(lambda x: mean(len(x))).head()
65/12:
# Your code here
df['text'].map(lambda x: len(x)).mean().head()
65/13:
# Your code here
df['text'].map(lambda x: len(x)).mean()
65/14:
# Your code here
['Review Length'] = df['text'].map(lambda x: len(x.split())).head()
65/15:
# Your code here
df['Review Length'] = df['text'].map(lambda x: len(x.split())).head()
65/16:
# Your code here
df['Review Length'] = df['text'].map(lambda x: len(x.split()))
65/17:
# Your code here
df['Review Length'] = df['text'].map(lambda x: len(x.split()))
df.head()
65/18:
# Rewrite the following function as a lambda function
def rewrite_as_lambda(value):
    if len(value) < 50:
        return 'Short'
    elif len(value) < 80:
        return 'Medium'
    else:
        return 'Long'
# Hint: nest your if, else conditionals

df['Review_length'] = None
65/19:
# Your code here
df['Review_num_words'] = df['text'].map(lambda x: len(x.split()))
df.head()
65/20:
# Rewrite the following function as a lambda function
def rewrite_as_lambda(value):
    if len(value) < 50:
        return 'Short'
    elif len(value) < 80:
        return 'Medium'
    else:
        return 'Long'
# Hint: nest your if, else conditionals

df['Review_length'] = None

df['Review_length'] = df['Review_num_words'].map(lambda x: 'Short' if x < 50 else ('Medium' if x < 80 else 'Long'))
65/21:
# Rewrite the following function as a lambda function


df['Review_length'] = df['Review_num_words'].map(lambda x: 'Short' if x < 50 else ('Medium' if x < 80 else 'Long'))
65/22:
# Rewrite the following function as a lambda function


df['Review_length'] = df['Review_num_words'].map(lambda x: 'Short' if x < 50 else ('Medium' if x < 80 else 'Long'))
df.head()
65/23:
# Rewrite the following function as a lambda function


df['Review_length'] = df['Review_num_words'].map(lambda x: 'Short' if x < 50 else ('Medium' if x < 80 else 'Long')).head()
65/24:
# Rewrite the following function as a lambda function


df['Review_length'] = df['Review_num_words'].map(lambda x: 'Short' if x < 50 else ('Medium' if x < 80 else 'Long'))
df.head()
65/25:
# Your code here
df['date'].head()
65/26:
# Your code here
df['date'] = df['date'].map(lambda x: x, format= %d/%m/%Y)
66/1:
# Convert this notebook to README by running this cell!
!jupyter nbconvert --to markdown assessment.ipynb && mv assessment.md README.md
67/1:
# Your code here
#df['date'] = df['date'].map(lambda x: x, format= %d/%m/%Y)
df['date'] = pd.to_dateime(df['date']).apply(lambda x: dt.datetime.strftime(x, '%m/%d/%y'))
67/2:
# Your code here
#df['date'] = df['date'].map(lambda x: x, format= %d/%m/%Y)
df['date'] = df.to_dateime(df['date']).apply(lambda x: dt.datetime.strftime(x, '%m/%d/%y'))
67/3:
# Your code here
df['stars_squared'] = df['stars'].map(lambda x: x**2)
df.head()
67/4:
# Your code here
df['stars_squared'] = df['stars'].map(lambda x: x**2)
df.head()
67/5:
# Your code here

df['stars_squared'] = df['stars'].map(lambda x: x**2)
df.head()
67/6:
# Your code here
import pandas as pd
df = pd.read_csv('Yelp_Reviews.csv', index_col=0)

df['stars_squared'] = df['stars'].map(lambda x: x**2)
df.head()
67/7:
# Your code here
#df['date'] = df['date'].map(lambda x: x, format= %d/%m/%Y)
df['date'] = df.to_dateime(df['date']).apply(lambda x: dt.datetime.strftime(x, '%m/%d/%y'))
67/8:
# Your code here
df['date'] = df['date'].map(lambda x: '{}-{}-{}'.format(x[-2:], x[5:7], x[:4]))
df['date'].head()
68/1:
import pandas as pd
df1 = pd.DataFrame({'A': ['A0', 'A1', 'A2', 'A3'],
                    'B': ['B0', 'B1', 'B2', 'B3'],
                    'C': ['C0', 'C1', 'C2', 'C3'],
                    'D': ['D0', 'D1', 'D2', 'D3']},
                    index=[0, 1, 2, 3])


df2 = pd.DataFrame({'A': ['A4', 'A5', 'A6', 'A7'],
                    'B': ['B4', 'B5', 'B6', 'B7'],
                    'C': ['C4', 'C5', 'C6', 'C7'],
                    'D': ['D4', 'D5', 'D6', 'D7']},
                    index=[4, 5, 6, 7])

df3 = pd.DataFrame({'A': ['A8', 'A9', 'A10', 'A11'],
                    'B': ['B8', 'B9', 'B10', 'B11'],
                    'C': ['C8', 'C9', 'C10', 'C11'], 
                    'D': ['D8', 'D9', 'D10', 'D11']},
                    index=[8, 9, 10, 11])
68/2:
lst_df = [df1, df2, df3]
combined_df = pd.concat(lst_df)
68/3:
lst_df = [df1, df2, df3]
combined_df = pd.concat(lst_df)
combined_df
68/4:
df4 = pd.DataFrame({'B': ['B2', 'B3', 'B6', 'B7'],
                    'D': ['D2', 'D3', 'D6', 'D7'],
                    'F': ['F2', 'F3', 'F6', 'F7']},
                    index=[2, 3, 6, 7])
68/5:
df1_and_4 = pd.concat([df1, df4])
df1_and_4
69/1:
df1_and_4 = pd.concat([df1, df4])
df1_and_4
69/2:
import pandas as pd
df1 = pd.DataFrame({'A': ['A0', 'A1', 'A2', 'A3'],
                    'B': ['B0', 'B1', 'B2', 'B3'],
                    'C': ['C0', 'C1', 'C2', 'C3'],
                    'D': ['D0', 'D1', 'D2', 'D3']},
                    index=[0, 1, 2, 3])


df2 = pd.DataFrame({'A': ['A4', 'A5', 'A6', 'A7'],
                    'B': ['B4', 'B5', 'B6', 'B7'],
                    'C': ['C4', 'C5', 'C6', 'C7'],
                    'D': ['D4', 'D5', 'D6', 'D7']},
                    index=[4, 5, 6, 7])

df3 = pd.DataFrame({'A': ['A8', 'A9', 'A10', 'A11'],
                    'B': ['B8', 'B9', 'B10', 'B11'],
                    'C': ['C8', 'C9', 'C10', 'C11'], 
                    'D': ['D8', 'D9', 'D10', 'D11']},
                    index=[8, 9, 10, 11])
69/3:
lst_df = [df1, df2, df3]
combined_df = pd.concat(lst_df)
combined_df
69/4:
df4 = pd.DataFrame({'B': ['B2', 'B3', 'B6', 'B7'],
                    'D': ['D2', 'D3', 'D6', 'D7'],
                    'F': ['F2', 'F3', 'F6', 'F7']},
                    index=[2, 3, 6, 7])
69/5:
df1_and_4 = pd.concat([df1, df4])
df1_and_4
69/6:
one_four = pd.concat([df1, df4])
df1_and_4 = pd.concat(one_four, join = 'inner', axis = 1)
69/7:
#one_four = pd.concat([df1, df4])
df1_and_4 = pd.concat([df1, df4], join = 'inner', axis = 1)
69/8:
#one_four = pd.concat([df1, df4])
df1_and_4 = pd.concat([df1, df4], join = 'inner', axis = 1)
df1_and_4
69/9:
cards_df = pd.read_csv('cards.csv')
dust_df = pd.read_csv('dust.csv')
entourages_df = pd.read_csv('entourages.csv')
mechanics_df = pd.read_csv('mechanics.csv')
play_requirements_df = pd.read_csv('play_requirements.csv')
69/10: cards_df.set_index('card_id', inplace=True)
69/11:
dust_df.set_index('card_id', inplace=True)
dust_df.head()
69/12:
entourages_df.set_index('card_id', inplace=True)
entourages_df.head()
69/13:
mechanics_df.set_index('card_id', inplace=True)
mechanics_df.head()
69/14:
play_requirements_df.set_index('card_id', inplace=True)
play_requirements_df.head()
69/15:
cards_with_mechanics_df = cards_df.join(mechanics_df, how= 'inner')
cards_with_mechanics_df
69/16:
left_join_df = cards_with_mechanics_df.join(play_requirements_df)
left_join_df
69/17:
outer_join_df = cards_df.join(dust_df, rsuffix= '_dust')
outer_join_df
69/18:
outer_join_df = cards_df.join(dust_df, rsuffix= '_dust', how= 'outer')
outer_join_df
70/1:
import pandas as pd

%matplotlib notebook
import matplotlib.pyplt as plt
70/2:
import pandas as pd

%matplotlib notebook
import matplotlib.pyplot as plt
70/3: import pandas as pd
70/4:
%matplotlib notebook
import matplotlib.pyplot as plt
70/5: df = pd.read_csv('causes_of_death.tsv', delimiter= '\t')
70/6: df.head()
70/7:
# Your code here
df.groupby(['State', 'Gender']).sum()
70/8:
# Your code here
df.groupby(['State', 'Gender', 'Race']).mean()
70/9:
# Your code here
df.groupby(['Gender', 'Race']).min()
70/10:
# Your code here
df.groupby(['State','Deaths']).sort_values(by='Deaths').sum().plot()
70/11:
# Your code here
df.groupby(['State','Deaths']).sort_values(by=['Deaths']).sum().plot()
70/12: import pandas as pd
70/13:
%matplotlib notebook
import matplotlib.pyplot as plt
70/14: df = pd.read_csv('causes_of_death.tsv', delimiter= '\t')
70/15: df.head()
70/16:
# Your code here
df.groupby(['State', 'Gender']).sum()
70/17:
# Your code here
df.groupby(['State', 'Gender', 'Race']).mean()
70/18:
# Your code here
df.groupby(['Gender', 'Race']).min()
70/19:
# Your code here
df.groupby(['State','Deaths']).sort_values(by=['Deaths']).sum().plot()
70/20:
# Your code here
st_death = df.groupby(['State','Deaths'])
#.sort_values(by=['Deaths']).sum().plot()
70/21:
# Your code here
st_death = df.groupby(['State','Deaths'])
st_death.sort_values(by=['Deaths']).sum().plot()
70/22:
# Your code here
st_death = df.groupby(['State','Deaths']).apply(lambda x: sorted(x)).sum().plot()
#st_death.sort_values(by=['Deaths']).sum().plot()
70/23:
# Your code here
st_death = df.groupby(['State','Deaths']).apply(lambda x: sorted(x))
#.sum().plot()
#st_death.sort_values(by=['Deaths']).sum().plot()
70/24:
# Your code here
st_death = df.groupby(['State','Deaths']).apply(lambda x: sorted(x))
st_death
#.sum().plot()
#st_death.sort_values(by=['Deaths']).sum().plot()
70/25:
# Your code here
st_death = df.groupby(['State','Deaths']).apply(lambda x: sorted(x))
st_death.head()
#.sum().plot()
#st_death.sort_values(by=['Deaths']).sum().plot()
70/26:
# Your code here
st_death = df.groupby(['State','Deaths']).apply(lambda x: sorted(x)).sum()
st_death.head()
#.sum().plot()
#st_death.sort_values(by=['Deaths']).sum().plot()
70/27:
# Your code here
st_death = df.groupby(['State','Deaths']).apply(lambda x: sorted(x)).sum()
st_death
#.sum().plot()
#st_death.sort_values(by=['Deaths']).sum().plot()
70/28:
# Your code here
st_death = df.groupby(['State','Deaths'])
#.apply(lambda x: sorted(x)).sum()
st_death
#.sum().plot()
#st_death.sort_values(by=['Deaths']).sum().plot()
70/29:
# Your code here
st_death = df.groupby(['State','Deaths']).sort_values().sum().plot()
70/30:
# Your code here
st_death = df.groupby(['State','Deaths']).sum().sort_values().plot()
70/31:
# Your code here
st_death = df.groupby(['State'],['Deaths']).sum().sort_values().plot()
70/32:
# Your code here
st_death = df.groupby(['State'],['Deaths'].sum().sort_values().plot())
70/33:
# Your code here
st_death = df.groupby(['State'])['Deaths'].sum().sort_values().plot())
70/34:
# Your code here
st_death = df.groupby(['State'])['Deaths'].sum().sort_values().plot()
70/35:
# Your code here
st_death = df.groupby(['State'])['Deaths'].sum().sort_values().plot(kind='bar')
70/36:
# Your code here
st_death = df.groupby(['State'])['Deaths'].sum().sort_values().plot(kind='barh')
70/37:
# Your code here
st_death = df.groupby(['State'])['Deaths'].sum().sort_values().plot(kind='barh' figsize=(10,6))
70/38:
# Your code here
st_death = df.groupby(['State'])['Deaths'].sum().sort_values().plot(kind='barh', figsize=(10,6))
70/39:
# Your code here
st_death = df.groupby(['State'])['Deaths'].sum().sort_values().plot(kind='barh', figsize=(10,8))
70/40:
# Your code here
st_death = df.groupby(['State'])['Deaths'].sum().sort_values().plot(kind='barh', figsize=(10,10))
70/41: df.info()
70/42: df['Population'].head()
70/43: df['Population'.value_counts().head()
70/44: df['Population'].value_counts().head()
70/45:
# Your code here
df['Population'].map(lambda x: x='Not Applicable')
#to_drop = None
70/46:
# Your code here
df['Population'].map(lambda x: x='Not Applicable')
#to_drop = None
70/47:
# Your code here
df['Population']('Not Applicable')
#to_drop = None
70/48:
# Your code here
df['Population']['Not Applicable']
#to_drop = None
70/49:
# Your code here

to_drop = df[df['Population'] == ['Not Applicable']]
70/50:
# Your code here

to_drop = df[df['Population'] == 'Not Applicable']]
70/51:
# Your code here

to_drop = df[df['Population'] == 'Not Applicable']
70/52:
# Your code here

to_drop = df[df['Population'] == 'Not Applicable']
to_drop
70/53:
# Your code here

to_drop = df[df['Population'] == 'Not Applicable']
df.drop(to_drop.index, axis=0, inplace=True)
70/54:
# Your code here

to_drop = df[df['Population'] == 'Not Applicable']
df.drop(to_drop.index, axis=0, inplace=True)
df.head()
70/55:
# Your code here
display(df.head())
to_drop = df[df['Population'] == 'Not Applicable']
df.drop(to_drop.index, axis=0, inplace=True)
display(df.head())
70/56:
# Your code here
display(df.head())
to_drop = df[df['Population'] == 'Not Applicable']
df.drop(to_drop.index, axis=0, inplace=True)
df['Population'] = df['Population'].astype('int64')
display(df.head())
70/57:
# Your code here

to_drop = df[df['Population'] == 'Not Applicable']
df.drop(to_drop.index, axis=0, inplace=True)
df['Population'] = df['Population'].astype('int64')
print(df['Population'].dtype)
70/58: import pandas as pd
70/59:
%matplotlib notebook
import matplotlib.pyplot as plt
70/60: df = pd.read_csv('causes_of_death.tsv', delimiter= '\t')
70/61: df.head()
70/62:
# Your code here

to_drop = df[df['Population'] == 'Not Applicable']
df.drop(to_drop.index, axis=0, inplace=True)
df['Population'] = df['Population'].astype('int64')
print(df['Population'].dtype)
70/63:
# Your code here
st_pops = df.groupby(['State'])['Population'].mean().sort_values().plot(kind='barh', figsize=(10,10))
70/64:
# Your code here
grouped = df.groupby(['State', 'Gender'])['Deaths', 'Population'].mean()
70/65:
# Your code here
grouped = df.groupby(['State', 'Gender'])['Deaths', 'Population'].mean()
grouped
70/66:
# Your code here
grouped = df.groupby(['State', 'Gender'])['Deaths', 'Population'].mean().min().max().std()
grouped
70/67:
# Your code here
grouped = df.groupby(['State', 'Gender'])['Deaths', 'Population'].mean().min().max().std().head()
70/68:
# Your code here
grouped = df.groupby(['State', 'Gender'])['Deaths']['Population'].mean().min().max().std().head()
70/69:
# Your code here
grouped = df.groupby(['State', 'Gender'])['Deaths','Population'].agg().head()
70/70:
# Your code here
grouped = df.groupby(['State', 'Gender'])['Deaths','Population'].agg()
70/71:
# Your code here
grouped = df.groupby(['State', 'Gender'])['Deaths','Population'].agg(['Deaths', 'Population'])
70/72: import pandas as pd
70/73:
%matplotlib notebook
import matplotlib.pyplot as plt
70/74: df = pd.read_csv('causes_of_death.tsv', delimiter= '\t')
70/75:
# Your code here
grouped = df.groupby(['State', 'Gender'])['Deaths','Population'].agg(['Deaths', 'Population'])
70/76:
# Your code here
grouped = df.groupby(['State', 'Gender'])['Deaths','Population'].agg(['mean', 'min', 'max', 'std'])
70/77:
# Your code here
grouped = df.groupby(['State', 'Gender'])['Deaths','Population'].agg(['mean', 'min', 'max', 'std'])
grouped.head()
70/78: grouped.index()
70/79: df.index()
70/80: df.index
70/81:
# First, reset the index. Notice the subtle difference; State and Gender are now columns rather than the index 
grouped.reset_index()
70/82:
# First, reset the index. Notice the subtle difference; State and Gender are now columns rather than the index 
grouped.reset_index()
grouped.head()
70/83: grouped.index
70/84: grouped.index()
70/85: grouped.index
70/86: grouped.index
70/87:
# Notice that this causes columns to be MultiIndexed!
grouped.dtypes
70/88:
# Notice that this causes columns to be MultiIndexed!
grouped.columns
70/89: grouped.columns.get_level_values()
70/90: grouped.columns.get_level_values(0)
70/91: grouped.columns.get_level_values(1)
70/92:
# We could also flatten these:
cols0 = grouped.columns.get_level_values(0)
cols1 = grouped.columns.get_level_values(1)
grouped.columns = [col0 + '_' + col1 if col1 != '' else col0 for col0, col1 in list(zip(cols0, cols1))]
# The list comprehension above is more complicated then what we need but creates a nicer formatting and
# demonstrates using a conditional within a list comprehension.
# This simpler version works but has some tail underscores where col1 is blank:
# grouped.columns = [col0 + '_' + col1 for col0, col1 in list(zip(cols0, cols1))]
grouped.columns
70/93: grouped.head()
70/94:
# Now it's time to pivot!
pivot = grouped.pivot(index= 'State', columns= 'Gender', values= 'Deaths_mean')
70/95: import pandas as pd
70/96:
%matplotlib notebook
import matplotlib.pyplot as plt
70/97: df = pd.read_csv('causes_of_death.tsv', delimiter= '\t')
70/98:
# Your code here
grouped = df.groupby(['State', 'Gender'])['Deaths','Population'].agg(['mean', 'min', 'max', 'std'])
grouped.head()
70/99: grouped.index
70/100:
# First, reset the index. Notice the subtle difference; State and Gender are now columns rather than the index 
grouped.reset_index()
grouped.head()
70/101: grouped.index
70/102:
# Notice that this causes columns to be MultiIndexed!
grouped.columns
70/103: grouped.columns.get_level_values(0)
70/104: grouped.columns.get_level_values(1)
70/105:
# We could also flatten these:
cols0 = grouped.columns.get_level_values(0)
cols1 = grouped.columns.get_level_values(1)
grouped.columns = [col0 + '_' + col1 if col1 != '' else col0 for col0, col1 in list(zip(cols0, cols1))]
# The list comprehension above is more complicated then what we need but creates a nicer formatting and
# demonstrates using a conditional within a list comprehension.
# This simpler version works but has some tail underscores where col1 is blank:
# grouped.columns = [col0 + '_' + col1 for col0, col1 in list(zip(cols0, cols1))]
grouped.columns
70/106: grouped.head()
70/107:
# Now it's time to pivot!
pivot = grouped.pivot(index= 'State', columns= 'Gender', values= 'Deaths_mean')
70/108:
# Now it's time to pivot!
pivot = grouped.pivot(index='State', columns= 'Gender', values= 'Deaths_mean')
70/109:
# Now it's time to pivot!
pivot = df.pivot(index='State', columns= 'Gender', values= 'Deaths_mean')
70/110:
# Now it's time to pivot!
pivot(index='State', columns= 'Gender', values= 'Deaths_mean')
70/111:
# Now it's time to pivot!
df.pivot(index='State', columns= 'Gender', values= 'Deaths_mean')
70/112:
# Now it's time to pivot!
df.pivot(index='State', columns= 'Gender', values= 'Deaths_mean')
df.head()
70/113:
# Now it's time to pivot!
pivot = grouped.pivot(index='State', columns= 'Gender', values= 'Deaths_mean')
pivot.head()
70/114: grouped.index
70/115:
# First, reset the index. Notice the subtle difference; State and Gender are now columns rather than the index 
grouped.reset_index()
grouped.head()
70/116: grouped.index
70/117:
# Notice that this causes columns to be MultiIndexed!
grouped.columns
70/118: grouped.columns.get_level_values(0)
70/119: grouped.columns.get_level_values(1)
70/120: import pandas as pd
70/121:
%matplotlib notebook
import matplotlib.pyplot as plt
70/122: df = pd.read_csv('causes_of_death.tsv', delimiter= '\t')
70/123: df.head()
70/124:
# Your code here
df.groupby(['State', 'Gender']).sum()
70/125:
# Your code here
df.groupby(['State', 'Gender', 'Race']).mean()
70/126:
# Your code here
df.groupby(['Gender', 'Race']).min()
70/127:
# Your code here
st_death = df.groupby(['State'])['Deaths'].sum().sort_values().plot(kind='barh', figsize=(10,10))
70/128: df.info()
70/129: df['Population'].head()
70/130: df['Population'].value_counts().head()
70/131:
# Your code here

to_drop = df[df['Population'] == 'Not Applicable']
df.drop(to_drop.index, axis=0, inplace=True)
df['Population'] = df['Population'].astype('int64')
print(df['Population'].dtype)
70/132:
# Your code here
st_pops = df.groupby(['State'])['Population'].mean().sort_values().plot(kind='barh', figsize=(10,10))
70/133:
# Your code here
grouped = df.groupby(['State', 'Gender'])['Deaths','Population'].agg(['mean', 'min', 'max', 'std'])
grouped.head()
70/134: grouped.index
70/135:
# First, reset the index. Notice the subtle difference; State and Gender are now columns rather than the index 
grouped.reset_index()
grouped.head()
70/136: grouped.index
70/137:
# Notice that this causes columns to be MultiIndexed!
grouped.columns
70/138: grouped.columns.get_level_values(0)
70/139: grouped.columns.get_level_values(1)
70/140:
# We could also flatten these:
cols0 = grouped.columns.get_level_values(0)
cols1 = grouped.columns.get_level_values(1)
grouped.columns = [col0 + '_' + col1 if col1 != '' else col0 for col0, col1 in list(zip(cols0, cols1))]
# The list comprehension above is more complicated then what we need but creates a nicer formatting and
# demonstrates using a conditional within a list comprehension.
# This simpler version works but has some tail underscores where col1 is blank:
# grouped.columns = [col0 + '_' + col1 for col0, col1 in list(zip(cols0, cols1))]
grouped.columns
70/141: grouped.head()
70/142:
# Now it's time to pivot!
pivot = grouped.pivot(index='State', columns= 'Gender', values= 'Deaths_mean')
pivot.head()
70/143:
# Again, notice the subtle difference of resetting the index:
pivot.reset_index()
pivot.head()
70/144:
# Now let's make a sweet bar chart!!
pivot.plot(kind='barh', figsize=(15,8))
72/1:
# Import necessary libraries below
import pandas as pd
import numpy as np

%matplotlib inline
import matplotlib.pyplot as plt
72/2:
# Use pandas to load the csv file
df = pd.read_csv('titanic.csv', index_col=0)
df.head()
72/3:
# Your code here
df.isna().sum()
72/4:
# Your code here
df.isna()
72/5:
# Your code here
df.isna().sum()
72/6:
# Your code here
df['Cabin'].unique
72/7:
# Your code here
df.shape
df['Cabin'].unique()
72/8:
# Your code here
df.shape
#df['Cabin'].unique()
72/9:
# Your code here
print(df.shape)
df['Cabin'].unique()
72/10:
# Your code here
print(df.shape)
df['Cabin'].unique()
72/11:
# Your code here
print(len(df[df['Cabin'].isna()])/len(df))
print(df['Cabin'].nunique())
72/12:
# Your code here
df['Cabin'].dropna()
72/13:
# Your code here
df['Cabin'].dropna(inplace=True)
72/14:
# Your code here
df['Cabin'].dropna(inplace=True)
df.isna().sum()
72/15:
# Your code here
df['Cabin'].dropna(inplace=False)
df.isna().sum()
72/16:
# Your code here
df['Cabin'].dropna(inplace=True)
df['Cabin'].isna().sum()
72/17:
# Your code here
df['Cabin'].dropna(inplace=True)
df['Cabin'].isna().sum()
df.head()
72/18:
# Your code here
drop_cabin = df['Cabin'].dropna(inplace=True)
drop_cabin.isna().sum()
drop_cabin.head()
72/19:
# Your code here
df['Cabin'].dropna(inplace=True)
df['Cabin'].isna().sum()
df.head()
72/20:
# Your code here
df['Cabin'].dropna(inplace=True)

df.head()
72/21:
# Import necessary libraries below
import pandas as pd
import numpy as np

%matplotlib inline
import matplotlib.pyplot as plt
72/22:
# Use pandas to load the csv file
df = pd.read_csv('titanic.csv', index_col=0)
df.head()
72/23:
# Your code here
df.isna()
72/24:
# Your code here
df.isna().sum()
72/25:
# Your code here
print(len(df[df['Cabin'].isna()])/len(df))
print(df['Cabin'].nunique())
72/26:
# Your code here
df['Cabin'].drop(axis=1)
72/27:
# Your code here
df.drop(['Cabin], axis=1)
72/28:
# Your code here
df.drop(['Cabin'], axis=1)
72/29:
# Your code here
print(df.drop(['Cabin'], axis=1))

df.isna().sum()
72/30:
# Your code here
df = df.drop(['Cabin'], axis=1)

df.isna().sum()
72/31:
# Your code here
df['Age'].mean()
72/32:
# Your code here
df['Age'].mean()
df['Age'].median()
72/33:
# Your code here
print(df['Age'].mean())
print(df['Age'].median())

plt.hist(df['Age'], bins = 80)
72/34:
# Your code here
print(df['Age'].mean())
print(df['Age'].median())

plt.hist(df['Age'], bins = 80)
plt.show()
72/35:
# Your code here
df = df['Age'].fillna(df['Age'].median())
72/36:
# Your code here
df.isna().sum()
72/37:
# Your code here
df['Age'] = df['Age'].fillna(df['Age'].median())
72/38:
# Import necessary libraries below
import pandas as pd
import numpy as np

%matplotlib inline
import matplotlib.pyplot as plt
72/39:
# Use pandas to load the csv file
df = pd.read_csv('titanic.csv', index_col=0)
df.head()
72/40:
# Your code here
df.isna()
72/41:
# Your code here
df.isna().sum()
72/42:
# Your code here
print(len(df[df['Cabin'].isna()])/len(df))
print(df['Cabin'].nunique())
72/43:
# Your code here
df = df.drop(['Cabin'], axis=1)

df.isna().sum()
72/44:
# Your code here
print(df['Age'].mean())
print(df['Age'].median())

plt.hist(df['Age'], bins = 80)
plt.show()
72/45:
# Your code here
df['Age'] = df['Age'].fillna(df['Age'].median())
72/46:
# Your code here
df.isna().sum()
72/47:
# Your code here
df.dropna()
72/48:
# Your code here
print(df['Embarked'].unique())
print(df['Sex'].unique())
print(df['Pclass'].unique())
print(df['Survived'].unique())
72/49:
# Your code here
df['Pclass']
72/50:
# Your code here
#df['Pclass']
df['Pclass'].isna().sum()
72/51:
# Your code here
#df['Pclass']
df['Pclass'].isna()
72/52:
# Your code here
df.groupby(['Pclass'])
72/53:
# Your code here
df.groupby(['Pclass'][4])
72/54:
# Your code here
df.groupby(['Pclass'][3])
72/55:
# Your code here
df = df.dropna()
72/56:
# Your code here
print(df['Embarked'].unique())
print(df['Sex'].unique())
print(df['Pclass'].unique())
print(df['Survived'].unique())
72/57:
# Your code here
df['Pclass'].value_counts(normalize=True)
72/58:
# Your code here
df['Pclass'].map(lambda x: x = (df['Pclass'].mean()) if x = '?')
72/59:
# Your code here
df['Pclass'].map(lambda x: x = (df['Pclass'].mean()) if x is '?')
72/60:
# Your code here
df['Pclass'].map(lambda x: x = (df['Pclass'].mean()) if x == '?')
72/61:
# Your code here
df['Pclass'].map(lambda x: (df['Pclass'].mean()) if x == '?')
74/1:
# Import necessary libraries below
import pandas as pd
import numpy as np

%matplotlib inline
import matplotlib.pyplot as plt
74/2:
# Use pandas to load the csv file
df = pd.read_csv('titanic.csv', index_col=0)
df.head()
74/3:
# Your code here
df.isna()
74/4:
# Your code here
df.isna().sum()
74/5:
# Your code here
print(len(df[df['Cabin'].isna()])/len(df))
print(df['Cabin'].nunique())
74/6:
# Your code here
df = df.drop(['Cabin'], axis=1)

df.isna().sum()
74/7:
# Your code here
print(df['Age'].mean())
print(df['Age'].median())

plt.hist(df['Age'], bins = 80)
plt.show()
74/8:
# Your code here
df['Age'] = df['Age'].fillna(df['Age'].median())
74/9:
# Your code here
df.isna().sum()
74/10:
# Your code here
df = df.dropna()
74/11:
# Your code here
print(df['Embarked'].unique())
print(df['Sex'].unique())
print(df['Pclass'].unique())
print(df['Survived'].unique())
74/12:
# Your code here
df['Pclass'].value_counts(normalize=True)
74/13:
# Your code here
df['Pclass'].map(lambda x: (df['Pclass'].mean()) if x == '?')
df['Pclass'].mean()
74/14:
# Your code here
#df['Pclass'].map(lambda x: (df['Pclass'].mean()) if x == '?')
df['Pclass'].mean()
74/15:
# Your code here
#df['Pclass'].map(lambda x: (df['Pclass'].mean()) if x == '?')
df['Pclass'].median()
74/16:
# Your code here
#df['Pclass'].map(lambda x: (df['Pclass'].mean()) if x == '?')
#df['Pclass'].median()
df.describe
74/17:
# Your code here
#df['Pclass'].map(lambda x: (df['Pclass'].mean()) if x == '?')
#df['Pclass'].median()
df.describe()
74/18:
# Your code here
#df['Pclass'].map(lambda x: (df['Pclass'].mean()) if x == '?')
#df['Pclass'].median()
df['Pclass'].astype('int64').dtypes
74/19:
# Your code here
#df['Pclass'].map(lambda x: (df['Pclass'].mean()) if x == '?')
#df['Pclass'].median()
df.astype('Pclass':'int64').dtypes
74/20:
# Your code here
#df['Pclass'].map(lambda x: (df['Pclass'].mean()) if x == '?')
#df['Pclass'].median()
df.astype('Pclass''int64').dtypes
74/21:
# Your code here
#df['Pclass'].map(lambda x: (df['Pclass'].mean()) if x == '?')
#df['Pclass'].median()
df.astype('Pclass','int64').dtypes
74/22:
# Your code here
#df['Pclass'].map(lambda x: (df['Pclass'].mean()) if x == '?')
#df['Pclass'].median()
df['Pclass'] = df['Pclass'].to_numeric()
74/23:
# Your code here
#df['Pclass'].map(lambda x: (df['Pclass'].mean()) if x == '?')
#df['Pclass'].median()
df['Pclass'] = df({'Pclass': int})
74/24:
# Your code here
#df['Pclass'].map(lambda x: (df['Pclass'].mean()) if x == '?')
#df['Pclass'].median()
P_as_int = df({'Pclass': int})
74/25:
# Your code here
#df['Pclass'].map(lambda x: (df['Pclass'].mean()) if x == '?')
#df['Pclass'].median()
df['Pclass'] = df.astype({'Pclass': int})
74/26:
# Your code here
#df['Pclass'].map(lambda x: (df['Pclass'].mean()) if x == '?')
#df['Pclass'].median()
df['Pclass'] = df.astype({'Pclass': int64})
74/27:
# Your code here
#df['Pclass'].map(lambda x: (df['Pclass'].mean()) if x == '?')
#df['Pclass'].median()
df['Pclass'] = df.astype({'Pclass': int64}).dtypes
74/28:
# Your code here
#df['Pclass'].map(lambda x: (df['Pclass'].mean()) if x == '?')
#df['Pclass'].median()
df.Pclass = df.Pclass.astype('int64')
74/29:
# Your code here
#df['Pclass'].map(lambda x: (df['Pclass'].mean()) if x == '?')
#df['Pclass'].median()
#df.Pclass = df.Pclass.astype('int64')
df.info()
74/30:
# Your code here
#df['Pclass'].map(lambda x: (df['Pclass'].mean()) if x == '?')
#df['Pclass'].median()
df.Pclass.astype('int64')
74/31:
# Your code here
#df['Pclass'].map(lambda x: (df['Pclass'].mean()) if x == '?')
#df['Pclass'].median()
df.Pclass = df.Pclass.astype(int64)
74/32:
# Your code here
#df['Pclass'].map(lambda x: (df['Pclass'].mean()) if x == '?')
#df['Pclass'].median()
df.Pclass = df.Pclass.astype('int64')
75/1:
import numpy as np

# Generate a list of numbers from 0 to 99
x = np.arange(0,100)

# Multiply values of x with 2 to get y
y = x*2

# Calculate square of values in for variable z
z = x**2

# Print x, y and z
print (x, y, z)
75/2:
# import matplotlib.pyplot and set inline plotting 
import matplotlib.pyplot as plt
%matplotlib inline
75/3:
new_figure = plt.figure()
ax = new_figure.add_axes([0,0,1,1])

ax.plot(x,y)
ax.xlabel('x-axis label')
ax.ylabel('y axis label')

ax.title('Plot title')
75/4:
new_figure = plt.figure()
ax = new_figure.add_axes([0,0,1,1])

ax.plot(x,y)
plt.xlabel('x-axis label')
plt.ylabel('y axis label')

plt.title('Plot title')
plt.show()
75/5:
x = np.linspace(0, 100, 1000)
fig, axes = plt.subplots(ncols=4, nrows=3)
plt.title('Exercise 2')
for n in range(0,10):
    row = (n-1)//2
    col = n%2-1
    ax = axes[row][col]
    y = [xi*n for xi in x]
    ax.plt(x,y)
    ax.set_title('{}*x'.format(n))
75/6:
x = np.linspace(0, 100, 1000)
fig, axes = plt.subplots(ncols=4, nrows=3)
plt.title('Exercise 2')
for n in range(0,10):
    row = (n-1)//2
    col = n%2-1
    ax = axes[row][col]
    y = [xi*n for xi in x]
    ax.plot(x,y)
    ax.set_title('{}*x'.format(n))
75/7:
x = np.linspace(0, 100, 1000)
fig, axes = plt.subplots(ncols=4, nrows=3, figsize-(10,10))
plt.title('Exercise 2')
for n in range(0,10):
    row = (n-1)//2
    col = n%2-1
    ax = axes[row][col]
    y = [xi*n for xi in x]
    ax.plot(x,y)
    ax.set_title('{}*x'.format(n))
75/8:
x = np.linspace(0, 100, 500)
fig, axes = plt.subplots(ncols=4, nrows=3, figsize-(10,10))
plt.title('Exercise 2')
for n in range(0,10):
    row = (n-1)//2
    col = n%2-1
    ax = axes[row][col]
    y = [xi*n for xi in x]
    ax.plot(x,y)
    ax.set_title('{}*x'.format(n))
75/9:
x = np.linspace(0, 100, 500)
fig, axes = plt.subplots(ncols=4, nrows=3, figsize=(10,10))
plt.title('Exercise 2')
for n in range(0,10):
    row = (n-1)//2
    col = n%2-1
    ax = axes[row][col]
    y = [xi*n for xi in x]
    ax.plot(x,y)
    ax.set_title('{}*x'.format(n))
75/10:
x = np.linspace(0, 100, 1000)
fig, axes = plt.subplots(ncols=4, nrows=3, figsize=(10,10))
plt.title('Exercise 2')
for n in range(0,10):
    row = (n-1)//2
    col = n%2-1
    ax = axes[row][col]
    y = [xi*n for xi in x]
    ax.plot(x,y)
    ax.set_title('{}*x'.format(n))
75/11:
x = np.linspace(0, 100, 1000)
fig, axes = plt.subplots(ncols=4, nrows=3, figsize=(10,10))
plt.title('Exercise 2')
for n in range(0,10):
    row = (n-1)//4
    col = n%4-1
    ax = axes[row][col]
    y = [xi*n for xi in x]
    ax.plot(x,y)
    ax.set_title('{}*x'.format(n))
75/12:
x = np.linspace(0, 100, 1000)
fig, axes = plt.subplots(ncols=4, nrows=3, figsize=(12,10))
plt.title('Exercise 2')
for n in range(0,10):
    row = (n-1)//4
    col = n%4-1
    ax = axes[row][col]
    y = [xi*n for xi in x]
    ax.plot(x,y)
    ax.set_title('{}*x'.format(n))
75/13:
x = np.linspace(0, 100, 1000)
fig, axes = plt.subplots(ncols=4, nrows=3, figsize=(12,10))
plt.title('Exercise 2')
for n in range(0,13):
    row = (n-1)//4
    col = n%4-1
    ax = axes[row][col]
    y = [xi*n for xi in x]
    ax.plot(x,y)
    ax.set_title('{}*x'.format(n))
75/14:
x = np.linspace(0, 100, 1000)
fig, axes = plt.subplots(ncols=4, nrows=3, figsize=(12,15))
plt.title('Exercise 2')
for n in range(0,13):
    row = (n-1)//4
    col = n%4-1
    ax = axes[row][col]
    y = [xi*n for xi in x]
    ax.plot(x,y)
    ax.set_title('{}*x'.format(n))
75/15:
x = np.linspace(0, 100, 1000)
fig, axes = plt.subplots(ncols=4, nrows=3, figsize=(10,15))
plt.title('Exercise 2')
for n in range(0,13):
    row = (n-1)//4
    col = n%4-1
    ax = axes[row][col]
    y = [xi*n for xi in x]
    ax.plot(x,y)
    ax.set_title('{}*x'.format(n))
75/16:
x = np.linspace(0, 100, 1000)
fig, axes = plt.subplots(ncols=4, nrows=3, figsize=(12,15))
plt.title('Exercise 2')
for n in range(0,13):
    row = (n-1)//4
    col = n%4-1
    ax = axes[row][col]
    y = [xi*n for xi in x]
    ax.plot(x,y)
    ax.set_title('{}*x'.format(n))
75/17:
x = np.linspace(0, 100, 1000)
fig, axes = plt.subplots(ncols=4, nrows=3)
plt.title('Exercise 3')
xticks = np.linspace(start=0, stop=50, num=11)
yticks = np.linspace(start=0, stop=.5*10**4, num=11)
for n in range(0,13):
    row = (n-1)//4
    col = n%4-1
    ax = axes[row][col]
    y = [xi*n for xi in x]
    ax.plot(x,y)
    ax.set_title('{}*x'.format(n))
75/18:
x = np.linspace(0, 100, 1000)
fig, axes = plt.subplots(ncols=4, nrows=3)
plt.title('Exercise 3')
xticks = np.linspace(start=0, stop=50, num=13)
yticks = np.linspace(start=0, stop=.5*10**4, num=13)
for n in range(0,13):
    row = (n-1)//4
    col = n%4-1
    ax = axes[row][col]
    y = [xi*n for xi in x]
    ax.plot(x,y)
    ax.set_title('{}*x'.format(n))
75/19:
x = np.linspace(0, 100, 1000)
fig, axes = plt.subplots(ncols=4, nrows=3)
plt.title('Exercise 3')
xticks = np.linspace(start=0, stop=50, num=13)
yticks = np.linspace(start=0, stop=.5*10**4, num=13)
for n in range(0,13):
    row = (n-1)//4
    col = n%4-1
    ax = axes[row][col]
    y = [xi*n for xi in x]
    ax.plot(x,y)
    ax.set_title('{}*x'.format(n))
    plt.xticks(xticks);
    plt.yticks(yticks);
75/20:
x = np.linspace(0, 100, 1000)
fig, axes = plt.subplots(ncols=4, nrows=3)
plt.title('Exercise 3')
xticks = np.linspace(start=0, stop=100, num=13)
yticks = np.linspace(start=0, stop=100**2, num=13)
for n in range(0,13):
    row = (n-1)//4
    col = n%4-1
    ax = axes[row][col]
    y = [xi*n for xi in x]
    ax.plot(x,y)
    ax.set_title('{}*x'.format(n))
    plt.xticks(xticks);
    plt.yticks(yticks);
75/21:
x = np.linspace(0, 100, 1000)
fig, axes = plt.subplots(ncols=4, nrows=3)
plt.title('Exercise 3')
xticks = np.linspace(start=0, stop=100, num=10)
yticks = np.linspace(start=0, stop=100**2, num=10)
for n in range(0,13):
    row = (n-1)//4
    col = n%4-1
    ax = axes[row][col]
    y = [xi*n for xi in x]
    ax.plot(x,y)
    ax.set_title('{}*x'.format(n))
    plt.xticks(xticks);
    plt.yticks(yticks);
75/22:
x = np.linspace(0, 100, 1000)
fig, axes = plt.subplots(ncols=4, nrows=3, figsize=(12,10))
plt.title('Exercise 3')
xticks = np.linspace(start=0, stop=100, num=10)
yticks = np.linspace(start=0, stop=100**2, num=10)
for n in range(0,13):
    row = (n-1)//4
    col = n%4-1
    ax = axes[row][col]
    y = [xi*n for xi in x]
    ax.plot(x,y)
    ax.set_title('{}*x'.format(n))
    plt.xticks(xticks);
    plt.yticks(yticks);
75/23:
x = np.linspace(0, 100, 1000)
fig, axes = plt.subplots(ncols=4, nrows=3, figsize=(12,10))
plt.title('Exercise 3')
xticks = np.linspace(start=0, stop=100, num=13)
yticks = np.linspace(start=0, stop=100**2, num=13)
for n in range(0,13):
    row = (n-1)//4
    col = n%4-1
    ax = axes[row][col]
    y = [xi*n for xi in x]
    ax.plot(x,y)
    ax.set_title('{}*x'.format(n))
    plt.xticks(xticks);
    plt.yticks(yticks);
75/24:
x = np.linspace(0, 100, 1000)
fig, axes = plt.subplots(ncols=4, nrows=3, figsize=(13,10))
plt.title('Exercise 3')
xticks = np.linspace(start=0, stop=100, num=13)
yticks = np.linspace(start=0, stop=100**2, num=13)
for n in range(0,13):
    row = (n-1)//4
    col = n%4-1
    ax = axes[row][col]
    y = [xi*n for xi in x]
    ax.plot(x,y)
    ax.set_title('{}*x'.format(n))
    plt.xticks(xticks);
    plt.yticks(yticks);
75/25:
x = np.linspace(0, 100, 1000)
fig, axes = plt.subplots(ncols=4, nrows=3, figsize=(15,11))
plt.title('Exercise 3')
xticks = np.linspace(start=0, stop=100, num=13)
yticks = np.linspace(start=0, stop=100**2, num=13)
for n in range(0,13):
    row = (n-1)//4
    col = n%4-1
    ax = axes[row][col]
    y = [xi*n for xi in x]
    ax.plot(x,y)
    ax.set_title('{}*x'.format(n))
    plt.xticks(xticks);
    plt.yticks(yticks);
75/26:
x = np.linspace(0, 100, 1000)
fig, axes = plt.subplots(ncols=4, nrows=3, figsize=(15,11))
plt.title('Exercise 3')

yticks = np.linspace(start=0, stop=100**2, num=13)
for n in range(0,13):
    row = (n-1)//4
    col = n%4-1
    ax = axes[row][col]
    y = [xi*n for xi in x]
    ax.plot(x,y)
    ax.set_title('{}*x'.format(n))
    plt.yticks(yticks);
75/27:
x = np.linspace(0, 100, 1000)
fig, axes = plt.subplots(ncols=4, nrows=3, figsize=(15,11))
plt.title('Exercise 3')

yticks = np.linspace(start=0, stop=100*2, num=13)
for n in range(0,13):
    row = (n-1)//4
    col = n%4-1
    ax = axes[row][col]
    y = [xi*n for xi in x]
    ax.plot(x,y)
    ax.set_title('{}*x'.format(n))
    plt.yticks(yticks);
75/28:
x = np.linspace(0, 100, 1000)
fig, axes = plt.subplots(ncols=4, nrows=3, figsize=(15,11))
plt.title('Exercise 3')

yticks = np.linspace(start=0, stop=100, num=13)
for n in range(0,13):
    row = (n-1)//4
    col = n%4-1
    ax = axes[row][col]
    y = [xi*n for xi in x]
    ax.plot(x,y)
    ax.set_title('{}*x'.format(n))
    plt.yticks(yticks);
75/29:
x = np.linspace(0, 100, 1000)
fig, axes = plt.subplots(ncols=4, nrows=3, figsize=(15,11))
plt.title('Exercise 3')

yticks = np.linspace(start=0, stop=150, num=13)
for n in range(0,13):
    row = (n-1)//4
    col = n%4-1
    ax = axes[row][col]
    y = [xi*n for xi in x]
    ax.plot(x,y)
    ax.set_title('{}*x'.format(n))
    plt.yticks(yticks);
75/30:
x = np.linspace(0, 100, 1000)
fig, axes = plt.subplots(ncols=4, nrows=3, figsize=(15,11))
plt.title('Exercise 3')

yticks = np.linspace(start=0, stop=150, num=11)
for n in range(0,13):
    row = (n-1)//4
    col = n%4-1
    ax = axes[row][col]
    y = [xi*n for xi in x]
    ax.plot(x,y)
    ax.set_title('{}*x'.format(n))
    plt.yticks(yticks);
75/31:
x = np.linspace(0, 100, 1000)
fig, axes = plt.subplots(ncols=4, nrows=3, figsize=(15,11))
plt.title('Exercise 3')


for n in range(0,13):
    row = (n-1)//4
    col = n%4-1
    ax = axes[row][col]
    y = [xi*n for xi in x]
    ax.plot(x,y)
    ax.set_title('{}*x'.format(n))
    yticks = np.linspace(start=0, stop=150, num=11)
    plt.yticks(yticks);
75/32:
x = np.linspace(0, 100, 1000)
fig, axes = plt.subplots(ncols=4, nrows=3, figsize=(15,11))
plt.title('Exercise 3')


for n in range(0,13):
    row = (n-1)//4
    col = n%4-1
    ax = axes[row][col]
    y = [xi*n for xi in x]
    ax.plot(x,y)
    ax.set_title('{}*x'.format(n))
    yticks = np.linspace(start=0, stop=150, num=11)
    ax.set_yticks(yticks);
75/33:
x = np.linspace(0, 100, 1000)
fig, axes = plt.subplots(ncols=4, nrows=3, figsize=(15,11))
plt.title('Exercise 3')


for n in range(0,13):
    row = (n-1)//4
    col = n%4-1
    ax = axes[row][col]
    y = [xi*n for xi in x]
    ax.plot(x,y)
    ax.set_title('{}*x'.format(n))
    yticks = np.linspace(start=0, stop=120, num=11)
    ax.set_yticks(yticks);
75/34:
x = np.linspace(0, 100, 1000)
fig, axes = plt.subplots(ncols=4, nrows=3, figsize=(12,10))
plt.title('Exercise 3')


for n in range(0,13):
    row = (n-1)//4
    col = n%4-1
    ax = axes[row][col]
    y = [xi*n for xi in x]
    ax.plot(x,y)
    ax.set_title('{}*x'.format(n))
    yticks = np.linspace(start=0, stop=120, num=11)
    ax.set_yticks(yticks);
75/35:
x = np.linspace(0, 100, 1000)
fig, axes = plt.subplots(ncols=4, nrows=3, figsize=(12,12))
plt.title('Exercise 3')


for n in range(0,13):
    row = (n-1)//4
    col = n%4-1
    ax = axes[row][col]
    y = [xi*n for xi in x]
    ax.plot(x,y)
    ax.set_title('{}*x'.format(n))
    yticks = np.linspace(start=0, stop=120, num=11)
    ax.set_yticks(yticks);
75/36:
x = np.linspace(0, 100, 1000)
fig, axes = plt.subplots(ncols=4, nrows=3, figsize=(12,12))
plt.title('Exercise 3')


for n in range(0,13):
    row = (n-1)//4
    col = n%4-1
    ax = axes[row][col]
    y = [xi*n for xi in x]
    ax.plot(x,y)
    ax.set_title('{}*x'.format(n))
    yticks = np.linspace(start=0, stop=120, num=13)
    ax.set_yticks(yticks);
75/37:
x = np.linspace(0, 100, 1000)
fig, axes = plt.subplots(ncols=4, nrows=3, figsize=(12,12))
plt.title('Exercise 3')


for n in range(0,13):
    row = (n-1)//4
    col = n%4-1
    ax = axes[row][col]
    y = [xi*n for xi in x]
    ax.plot(x,y)
    ax.set_title('{}*x'.format(n))
    yticks = np.linspace(start=0, stop=120, num=11)
    ax.set_yticks(yticks);
75/38:
new_figure = plt.figure(figsize=(8,6))

ax1 = new_figure.add_subplot(121)
ax2 = new_figure.add_subplot(122)

ax1.plot(x,y, color='red', linewidth=3, linestyle='.')
ax2.plot(x,z color='blue', linewidth=5, linestyle='-.')

ax1.title('Left Plot')
ax2.title('Right Plot')
plt.show()
75/39:
new_figure = plt.figure(figsize=(8,6))

ax1 = new_figure.add_subplot(121)
ax2 = new_figure.add_subplot(122)

ax1.plot(x,y, color='red', linewidth=3, linestyle='.')
ax2.plot(x,z, color='blue', linewidth=5, linestyle='-.')

ax1.title('Left Plot')
ax2.title('Right Plot')
plt.show()
75/40:
new_figure = plt.figure(figsize=(8,6))

ax1 = new_figure.add_subplot(121)
ax2 = new_figure.add_subplot(122)

ax1.plot((x,y), color='red', linewidth=3, linestyle='.')
ax2.plot((x,z), color='blue', linewidth=5, linestyle='-.')

ax1.title('Left Plot')
ax2.title('Right Plot')
plt.show()
75/41:
new_figure = plt.figure(figsize=(8,6))

ax1 = new_figure.add_subplot(121)
ax2 = new_figure.add_subplot(122)

ax1.plot((x,y), color='red', linewidth=3, linestyle=':')
ax2.plot((x,z), color='blue', linewidth=5, linestyle='-.')

ax1.title('Left Plot')
ax2.title('Right Plot')
plt.show()
75/42:
new_figure = plt.figure(figsize=(8,6))

ax1 = new_figure.add_subplot(121)
ax2 = new_figure.add_subplot(122)

ax1.plot((x,y), color='red', linewidth=3, linestyle='o')
ax2.plot((x,z), color='blue', linewidth=5, linestyle='-.')

ax1.title('Left Plot')
ax2.title('Right Plot')
plt.show()
75/43:
new_figure = plt.figure(figsize=(8,6))

ax1 = new_figure.add_subplot(121)
ax2 = new_figure.add_subplot(122)

ax1.plot((x,y), color='red', linewidth=3, linestyle='o')
ax2.plot((x,z), color='blue', linewidth=5, linestyle='-.')

ax1.title('Left Plot')
ax2.title('Right Plot')
plt.show()
75/44:
new_figure = plt.figure(figsize=(8,6))

ax1 = new_figure.add_subplot(121)
ax2 = new_figure.add_subplot(122)

ax1.plot((x,y), color='red', linewidth=3, linestyle=':')
ax2.plot((x,z), color='blue', linewidth=5, linestyle='-.')

ax1.title('Left Plot')
ax2.title('Right Plot')
plt.show()
75/45:
new_figure = plt.figure(figsize=(8,6))

ax1 = new_figure.add_subplot(121)
ax2 = new_figure.add_subplot(122)

ax1.plot((x,y), color='red', linewidth=3, ls=':')
ax2.plot((x,z), color='blue', linewidth=5, linestyle='-.')

ax1.title('Left Plot')
ax2.title('Right Plot')
plt.show()
75/46:
new_figure = plt.figure(figsize=(8,6))

ax1 = new_figure.add_subplot(121)
ax2 = new_figure.add_subplot(122)

ax1.plot((x,y), color='red', linewidth=3, linestyle=':')
ax2.plot((x,z), color='blue', linewidth=5, linestyle='-.')

ax1.title('Left Plot')
ax2.title('Right Plot')
plt.show()
75/47:
new_figure = plt.figure(figsize=(8,6))

ax1 = new_figure.add_subplot(121)
ax2 = new_figure.add_subplot(122)

ax1.plot(x, y, color='red', linewidth=3, linestyle=':')
ax2.plot(x, z, color='blue', linewidth=5, linestyle='-.')

ax1.title('Left Plot')
ax2.title('Right Plot')
plt.show()
75/48:
import numpy as np

# Generate a list of numbers from 0 to 99
x = np.arange(0,100)

# Multiply values of x with 2 to get y
y = x*2

# Calculate square of values in for variable z
z = x**2

# Print x, y and z
print (x, y, z)
75/49:
new_figure = plt.figure(figsize=(8,6))

ax1 = new_figure.add_subplot(121)
ax2 = new_figure.add_subplot(122)

ax1.plot(x, y, color='red', linewidth=3, linestyle=':')
ax2.plot(x, z, color='blue', linewidth=5, linestyle='-.')

ax1.title('Left Plot')
ax2.title('Right Plot')
plt.show()
75/50:
new_figure = plt.figure(figsize=(8,6))

ax1 = new_figure.add_subplot(121)
ax2 = new_figure.add_subplot(122)

ax1.plot(x, y, color='red', linewidth=3, linestyle=':')
ax2.plot(x, z, color='blue', linewidth=5, linestyle='-.')

ax1.set_title('Left Plot')
ax2.set_title('Right Plot')
plt.show()
75/51:
new_figure = plt.figure(figsize=(8,6))

ax1 = new_figure.add_subplot(121)
ax2 = new_figure.add_subplot(122)

ax1.plot(x, y, color='red', linewidth=3, linestyle=':')
ax2.plot(x, z, color='blue', linewidth=5, linestyle='-.')

ax1.set_title('Left Plot')
ax1.set_xlabel('X-Axis')
ax1.set_ylabel('Y-Axis')

ax2.set_title('Right Plot')
ax2.set_xlabel('X-Axis')
ax2.set('Y-Axis')
plt.show()
75/52:
new_figure = plt.figure(figsize=(8,6))

ax1 = new_figure.add_subplot(121)
ax2 = new_figure.add_subplot(122)

ax1.plot(x, y, color='red', linewidth=3, linestyle=':')
ax2.plot(x, z, color='blue', linewidth=5, linestyle='-.')

ax1.set_title('Left Plot')
ax1.set_xlabel('X-Axis')
ax1.set_ylabel('Y-Axis')

ax2.set_title('Right Plot')
ax2.set_xlabel('X-Axis')
ax2.set('Z-Axis')
plt.show()
75/53:
new_figure = plt.figure(figsize=(8,6))

ax1 = new_figure.add_subplot(121)
ax2 = new_figure.add_subplot(122)

ax1.plot(x, y, color='red', linewidth=3, linestyle=':')
ax2.plot(x, z, color='blue', linewidth=5, linestyle='-.')

ax1.set_title('Left Plot')
ax1.set_xlabel('X-Axis')
ax1.set_ylabel('Y-Axis')

ax2.set_title('Right Plot')
ax2.set_xlabel('X-Axis')
ax2.set_ylabel('Z-Axis')
plt.show()
75/54:
new_figure = plt.figure(figsize=(8,8))

ax1 = new_figure.add_subplot(121)
ax2 = new_figure.add_subplot(122)

ax1.plot(x, y, color='red', linewidth=3, linestyle='-')
ax2.scatter(x, z, color='blue', linewidth=5, marker='^')

ax1.set_title('Left Plot')
ax1.set_xlabel('X-Axis')
ax1.set_ylabel('Y-Axis')

ax2.set_title('Right Plot')
ax2.set_xlabel('X-Axis')
ax2.set_ylabel('Z-Axis')
plt.show()
75/55:
new_figure = plt.figure(figsize=(11,11))

ax1 = new_figure.add_subplot(121)
ax2 = new_figure.add_subplot(122)

ax1.plot(x, y, color='red', linewidth=3, linestyle='-')
ax2.scatter(x, z, color='blue', linewidth=5, marker='^')

ax1.set_title('Left Plot')
ax1.set_xlabel('X-Axis')
ax1.set_ylabel('Y-Axis')

ax2.set_title('Right Plot')
ax2.set_xlabel('X-Axis')
ax2.set_ylabel('Z-Axis')
plt.show()
75/56:
new_figure = plt.figure(figsize=(13,13))

ax1 = new_figure.add_subplot(121)
ax2 = new_figure.add_subplot(122)

ax1.plot(x, y, color='red', linewidth=3, linestyle='-')
ax2.scatter(x, z, color='blue', linewidth=5, marker='^')

ax1.set_title('Left Plot')
ax1.set_xlabel('X-Axis')
ax1.set_ylabel('Y-Axis')

ax2.set_title('Right Plot')
ax2.set_xlabel('X-Axis')
ax2.set_ylabel('Z-Axis')
plt.show()
75/57:
new_figure = plt.figure(figsize=(15,15))

ax1 = new_figure.add_subplot(121)
ax2 = new_figure.add_subplot(122)

ax1.plot(x, y, color='red', linewidth=3, linestyle='-')
ax2.scatter(x, z, color='blue', linewidth=5, marker='^')

ax1.set_title('Left Plot')
ax1.set_xlabel('X-Axis')
ax1.set_ylabel('Y-Axis')

ax2.set_title('Right Plot')
ax2.set_xlabel('X-Axis')
ax2.set_ylabel('Z-Axis')
plt.show()
76/1:
# Import pandas
import pandas as pd
# Import matplotlib
import matplotlib.pyplt as plt

# Make sure matplotlib plots appear inline
%matplotlib inline
76/2:
# Import pandas
import pandas as pd
# Import matplotlib
import matplotlib.pyplot as plt

# Make sure matplotlib plots appear inline
%matplotlib inline
76/3:
# Import the file
df = pd.read_csv('population.csv')
df.head()
# Print the first five rows
76/4:
# Look at the value_counts() of the 'Country Name' column 
df['Country Name'].value_counts()
76/5:
# Slice all the rows for USA
usa = df.loc[df['Country Name'] == 'United States']

# Slice all the rows for Canada
canada = df.loc[df['Country Name'] == 'Canada']

# Inspect the head of USA and Canada
76/6:
# Slice all the rows for USA
usa = df.loc[df['Country Name'] == 'United States']

# Slice all the rows for Canada
canada = df.loc[df['Country Name'] == 'Canada']

df.head()
# Inspect the head of USA and Canada
76/7:
# Slice all the rows for USA
usa = df.loc[df['Country Name'] == 'United States']

# Slice all the rows for Canada
canada = df.loc[df['Country Name'] == 'Canada']

print(usa)
print(canada)
# Inspect the head of USA and Canada
76/8:
# Slice all the rows for USA
usa = df.loc[df['Country Name'] == 'United States']

# Slice all the rows for Canada
canada = df.loc[df['Country Name'] == 'Canada']

print(usa.head())
print(canada.head())
# Inspect the head of USA and Canada
76/9:
# Subplot for USA
ax1 = usa.plot('Year', 'Value')

# Subplot for Canada
ax2 = None
76/10:
# Subplot for USA
ax1 = usa.plot('Year', 'Value', ax=ax1)
ax1.set_xlabel('Year')
ax1.set_ylabel('Value')

# Subplot for Canada
ax2 = canada.plot('Year','Value', ax=ax2)
ax2.set_xlabel("Year")
ax2.set_ylabel("Value")

plt.show()
76/11:
# Subplot for USA
ax1 = usa.plot('Year', 'Value', ax=ax1)
ax1.set_xlabel('Year')
ax1.set_ylabel('Value')

# Subplot for Canada
ax2 = canada.plot('Year','Value', ax=ax2)
ax2.set_xlabel("Year")
ax2.set_ylabel("Value")

ax1.show()
ax2.show()
76/12:
# Subplot for USA
ax1 = usa.plot('Year', 'Value', ax=ax1)
ax1.set_xlabel('Year')
ax1.set_ylabel('Value')

# Subplot for Canada
ax2 = canada.plot('Year','Value', ax=ax2)
ax2.set_xlabel("Year")
ax2.set_ylabel("Value")

plt.show()
76/13:
# Subplot for USA
ax1 = usa.plot('Year', 'Value', ax=ax1)
ax1.set_xlabel('Year')
ax1.set_ylabel('Value')

# Subplot for Canada
ax2 = canada.plot('Year','Value', ax=ax2)
ax2.set_xlabel("Year")
ax2.set_ylabel("Value")
76/14:
# Subplot for USA
ax1 = usa.plot('Year', 'Value', ax=ax1)
ax1.set_xlabel('Year')
ax1.set_ylabel('Value')

# Subplot for Canada
ax2 = canada.plot('Year','Value', ax=ax2)
ax2.set_xlabel("Year")
ax2.set_ylabel("Value")

ax1.subplot()
76/15:
# Subplot for USA
ax1 = usa.plot('Year', 'Value', ax=ax1)
ax1.set_xlabel('Year')
ax1.set_ylabel('Value')

# Subplot for Canada
ax2 = canada.plot('Year','Value', ax=ax2)
ax2.set_xlabel("Year")
ax2.set_ylabel("Value")

plt.subplot()
76/16:
# Subplot for USA
ax1 = usa.subplot('Year', 'Value', ax=ax1)
ax1.set_xlabel('Year')
ax1.set_ylabel('Value')

# Subplot for Canada
ax2 = canada.subplot('Year','Value', ax=ax2)
ax2.set_xlabel("Year")
ax2.set_ylabel("Value")
76/17:
# Subplot for USA
ax1 = usa.plot('Year', 'Value', ax=ax1)
ax1.set_xlabel('Year')
ax1.set_ylabel('Value')

# Subplot for Canada
ax2 = canada.plot('Year','Value', ax=ax2)
ax2.set_xlabel("Year")
ax2.set_ylabel("Value")
76/18:
# Subplot for USA
ax1 = usa.plot('Year', 'Value', ax=ax1)
ax1.set_xlabel('Year')
ax1.set_ylabel('Value')

# Subplot for Canada
ax2 = canada.plot('Year','Value', ax=ax2)
ax2.set_xlabel("Year")
ax2.set_ylabel("Value")

plt.subplot()
76/19:
# Import pandas
import pandas as pd
# Import matplotlib
import matplotlib.pyplot as plt

# Make sure matplotlib plots appear inline
%matplotlib inline
76/20:
# Import the file
df = pd.read_csv('population.csv')
df.head()
# Print the first five rows
76/21:
# Look at the value_counts() of the 'Country Name' column 
df['Country Name'].value_counts()
76/22:
# Slice all the rows for USA
usa = df.loc[df['Country Name'] == 'United States']

# Slice all the rows for Canada
canada = df.loc[df['Country Name'] == 'Canada']


# Inspect the head of USA and Canada
print(usa.head())
print(canada.head())
76/23:
# Subplot for USA
ax1 = usa.plot('Year', 'Value', ax=ax1)
ax1.set_xlabel('Year')
ax1.set_ylabel('Value')

# Subplot for Canada
ax2 = canada.plot('Year','Value', ax=ax2)
ax2.set_xlabel("Year")
ax2.set_ylabel("Value")

plt.subplot()
76/24:
# Subplot for USA
ax1 = plt.sub_plot(121)
usa.plot('Year', 'Value', ax=ax1)
ax1.set_xlabel('Year')
ax1.set_ylabel('Value')

# Subplot for Canada
ax2 = plt.sub_plot(122)
canada.plot('Year','Value', ax=ax2)
ax2.set_xlabel("Year")
ax2.set_ylabel("Value")

plt.subplot()
76/25:
# Subplot for USA
ax1 = plt.sub_plot(121)
usa.plot('Year', 'Value', ax=ax1)
ax1.set_xlabel('Year')
ax1.set_ylabel('Value')

# Subplot for Canada
ax2 = plt.sub_plot(122)
canada.plot('Year','Value', ax=ax2)
ax2.set_xlabel("Year")
ax2.set_ylabel("Value")
76/26:
# Subplot for USA
ax1 = plt.sub_plot(1,2,1)
usa.plot('Year', 'Value', ax=ax1)
ax1.set_xlabel('Year')
ax1.set_ylabel('Value')

# Subplot for Canada
ax2 = plt.sub_plot(1,2,2)
canada.plot('Year','Value', ax=ax2)
ax2.set_xlabel("Year")
ax2.set_ylabel("Value")
76/27:
# Subplot for USA
ax1 = plt.subplot(1,2,1)
usa.plot('Year', 'Value', ax=ax1)
ax1.set_xlabel('Year')
ax1.set_ylabel('Value')

# Subplot for Canada
ax2 = plt.sub_plot(1,2,2)
canada.plot('Year','Value', ax=ax2)
ax2.set_xlabel("Year")
ax2.set_ylabel("Value")
76/28:
# Subplot for USA
ax1 = plt.subplot(1,2,1)
usa.plot('Year', 'Value', ax=ax1)
ax1.set_xlabel('Year')
ax1.set_ylabel('Value')

# Subplot for Canada
ax2 = plt.subplot(1,2,2)
canada.plot('Year','Value', ax=ax2)
ax2.set_xlabel("Year")
ax2.set_ylabel("Value")
76/29:
# Create figure
new_figure = plt.figure(figsize(20,10))

# Subplot for USA
ax1 = plt.subplot(1,2,1)
usa.plot('Year', 'Value', ax=ax1)
ax1.set_xlabel('Year')
ax1.set_ylabel('Value')
ax1.title.set_text('USA')

# Subplot for Canada
ax2 = plt.subplot(1,2,2)
canada.plot('Year','Value', ax=ax2)
ax2.set_xlabel("Year")
ax2.set_ylabel("Value")
ax2.title.set_text('Canada')
76/30:
# Create figure
new_figure = plt.figure(figsize(20,10))

# Subplot for USA
ax1 = new_figure.subplot(1,2,1)
usa.plot('Year', 'Value', ax=ax1)
ax1.set_xlabel('Year')
ax1.set_ylabel('Value')
ax1.title.set_text('USA')

# Subplot for Canada
ax2 = new_figure.subplot(1,2,2)
canada.plot('Year','Value', ax=ax2)
ax2.set_xlabel("Year")
ax2.set_ylabel("Value")
ax2.title.set_text('Canada')
76/31:
# Create figure
new_figure = plt.figure(figsize=(20,10))

# Subplot for USA
ax1 = new_figure.subplot(1,2,1)
usa.plot('Year', 'Value', ax=ax1)
ax1.set_xlabel('Year')
ax1.set_ylabel('Value')
ax1.title.set_text('USA')

# Subplot for Canada
ax2 = new_figure.subplot(1,2,2)
canada.plot('Year','Value', ax=ax2)
ax2.set_xlabel("Year")
ax2.set_ylabel("Value")
ax2.title.set_text('Canada')
76/32:
# Create figure
new_figure = plt.figure(figsize=(20,10))

# Subplot for USA
ax1 = plt.subplot(1,2,1)
usa.plot('Year', 'Value', ax=ax1)
ax1.set_xlabel('Year')
ax1.set_ylabel('Value')
ax1.title.set_text('USA')

# Subplot for Canada
ax2 = plot.subplot(1,2,2)
canada.plot('Year','Value', ax=ax2)
ax2.set_xlabel("Year")
ax2.set_ylabel("Value")
ax2.title.set_text('Canada')
76/33:
# Create figure
new_figure = plt.figure(figsize=(20,10))

# Subplot for USA
ax1 = plt.subplot(1,2,1)
usa.plot('Year', 'Value', ax=ax1)
ax1.set_xlabel('Year')
ax1.set_ylabel('Value')
ax1.title.set_text('USA')

# Subplot for Canada
ax2 = plt.subplot(1,2,2)
canada.plot('Year','Value', ax=ax2)
ax2.set_xlabel("Year")
ax2.set_ylabel("Value")
ax2.title.set_text('Canada')
76/34:
# Subplot for USA
ax1 = plt.subplot(1,2,1)
usa.plot('Year', 'Value', ax=ax1)
ax1.set_xlabel('Year')
ax1.set_ylabel('Value')

# Subplot for Canada
ax2 = plt.subplot(1,2,2)
canada.plot('Year','Value', ax=ax2)
ax2.set_xlabel("Year")
ax2.set_ylabel("Value")

plt.show()
76/35:
sample_list = ['foo', 'bar', 'baz']

for index, value in enumerate(sample_list):
    print("Index: {}      Value: {}".format(index, value))
76/36:
sample_list_2 = ['item at Index ' + str(i) for i in range(10)]
odds = []

# Write your code below this line
for index, value in enumerate(sample_list_2):
    if value%2 == 1:
        odds.append()
        
    


# Write your code above this line

odds
# Expected Output: 
# ['item at Index 1',
#  'item at Index 3',
#  'item at Index 5',
#  'item at Index 7',
#  'item at Index 9']
76/37:
sample_list_2 = ['item at Index ' + str(i) for i in range(10)]
odds = []

# Write your code below this line
for index, value in enumerate(sample_list_2):
    value = int(value)
    if value%2 == 1:
        odds.append()
        
    


# Write your code above this line

odds
# Expected Output: 
# ['item at Index 1',
#  'item at Index 3',
#  'item at Index 5',
#  'item at Index 7',
#  'item at Index 9']
76/38:
sample_list_2 = ['item at Index ' + str(i) for i in range(10)]
odds = []

# Write your code below this line
for index, value in enumerate(sample_list_2):
    if index % 2 == 1:
        odds.append()
        
    


# Write your code above this line

odds
# Expected Output: 
# ['item at Index 1',
#  'item at Index 3',
#  'item at Index 5',
#  'item at Index 7',
#  'item at Index 9']
76/39:
sample_list_2 = ['item at Index ' + str(i) for i in range(10)]
odds = []

# Write your code below this line
for index, value in enumerate(sample_list_2):
    if index % 2 == 1:
        odds.append(value)
        
    


# Write your code above this line

odds
# Expected Output: 
# ['item at Index 1',
#  'item at Index 3',
#  'item at Index 5',
#  'item at Index 7',
#  'item at Index 9']
76/40:
# Group the DataFrame by Country Name (this line has been provided for you)
grouped_df = df.groupby('Country Name')

# pass in figsize=(20,40) and also set the facecolor parameter to 'white'
plt.figure(figsize=(20,40), facecolor='white')

# Complete the line below so that the first loop variable is the called index,
# and the second loop variable is the tuple (countryname, population)  
for index, (countryname, population) in enumerate(grouped_df):
    
    # Get the unique subplot where the plot we're creating during this iteration
    # of the loop will live. Our subplot will be 30 rows of 9 plots each  
    # Set the third value to be index+1
    ax = plt.subplot(30, 9, index+1)
    
    # Complete the line to create the plot for this subplot  
    # Same visualizations as we created above!
    population.plot('Counrty Name','Population', ax=None, legend=False)
    
    # Set the title of each plot, so we know which country it represents
    ax.set_title('Population by Country')
76/41:
# Group the DataFrame by Country Name (this line has been provided for you)
grouped_df = df.groupby('Country Name')

# pass in figsize=(20,40) and also set the facecolor parameter to 'white'
plt.figure(figsize=(20,40), facecolor='white')

# Complete the line below so that the first loop variable is the called index,
# and the second loop variable is the tuple (countryname, population)  
for index, (countryname, population) in enumerate(grouped_df):
    
    # Get the unique subplot where the plot we're creating during this iteration
    # of the loop will live. Our subplot will be 30 rows of 9 plots each  
    # Set the third value to be index+1
    ax = plt.subplot(30, 9, index+1)
    
    # Complete the line to create the plot for this subplot  
    # Same visualizations as we created above!
    population.plot('Country Name','Population', ax=None, legend=False)
    
    # Set the title of each plot, so we know which country it represents
    ax.set_title('Population by Country')
76/42:
# Group the DataFrame by Country Name (this line has been provided for you)
grouped_df = df.groupby('Country Name')

# pass in figsize=(20,40) and also set the facecolor parameter to 'white'
plt.figure(figsize=(20,40), facecolor='white')

# Complete the line below so that the first loop variable is the called index,
# and the second loop variable is the tuple (countryname, population)  
for index, (countryname, population) in enumerate(grouped_df):
    
    # Get the unique subplot where the plot we're creating during this iteration
    # of the loop will live. Our subplot will be 30 rows of 9 plots each  
    # Set the third value to be index+1
    ax = plt.subplot(30, 9, index+1)
    
    # Complete the line to create the plot for this subplot  
    # Same visualizations as we created above!
    population.plot('Country Name','Value', ax=None, legend=False)
    
    # Set the title of each plot, so we know which country it represents
    ax.set_title('Population by Country')
76/43:
# Group the DataFrame by Country Name (this line has been provided for you)
grouped_df = df.groupby('Country Name')

# pass in figsize=(20,40) and also set the facecolor parameter to 'white'
plt.figure(figsize=(20,40), facecolor='white')

# Complete the line below so that the first loop variable is the called index,
# and the second loop variable is the tuple (countryname, population)  
for index, (countryname, population) in enumerate(grouped_df):
    
    # Get the unique subplot where the plot we're creating during this iteration
    # of the loop will live. Our subplot will be 30 rows of 9 plots each  
    # Set the third value to be index+1
    ax = plt.subplot(30, 9, index+1)
    
    # Complete the line to create the plot for this subplot  
    # Same visualizations as we created above!
    population.plot('Country Name','Value', ax, legend=False)
    
    # Set the title of each plot, so we know which country it represents
    ax.set_title('Population by Country')
76/44:
# Group the DataFrame by Country Name (this line has been provided for you)
grouped_df = df.groupby('Country Name')

# pass in figsize=(20,40) and also set the facecolor parameter to 'white'
plt.figure(figsize=(20,40), facecolor='white')

# Complete the line below so that the first loop variable is the called index,
# and the second loop variable is the tuple (countryname, population)  
for index, (countryname, population) in enumerate(grouped_df):
    
    # Get the unique subplot where the plot we're creating during this iteration
    # of the loop will live. Our subplot will be 30 rows of 9 plots each  
    # Set the third value to be index+1
    ax = plt.subplot(30, 9, index+1)
    
    # Complete the line to create the plot for this subplot  
    # Same visualizations as we created above!
    population.plot('Year','Value', ax=None, legend=False)
    
    # Set the title of each plot, so we know which country it represents
    ax.set_title('Population by Country')
76/45:
# Group the DataFrame by Country Name (this line has been provided for you)
grouped_df = df.groupby('Country Name')

# pass in figsize=(20,40) and also set the facecolor parameter to 'white'
plt.figure(figsize=(20,40), facecolor='white')

# Complete the line below so that the first loop variable is the called index,
# and the second loop variable is the tuple (countryname, population)  
for index, (countryname, population) in enumerate(grouped_df):
    
    # Get the unique subplot where the plot we're creating during this iteration
    # of the loop will live. Our subplot will be 30 rows of 9 plots each  
    # Set the third value to be index+1
    ax = plt.subplot(30, 9, index+1)
    
    # Complete the line to create the plot for this subplot  
    # Same visualizations as we created above!
    population.plot('Year','Value', ax=None, legend=False)
    
    # Set the title of each plot, so we know which country it represents
    ax.set_title(countryname)
76/46:
# Group the DataFrame by Country Name (this line has been provided for you)
grouped_df = df.groupby('Country Name')

# pass in figsize=(20,40) and also set the facecolor parameter to 'white'
plt.figure(figsize=(20,40), facecolor='white')

# Complete the line below so that the first loop variable is the called index,
# and the second loop variable is the tuple (countryname, population)  
for index, (countryname, population) in enumerate(grouped_df):
    
    # Get the unique subplot where the plot we're creating during this iteration
    # of the loop will live. Our subplot will be 30 rows of 9 plots each  
    # Set the third value to be index+1
    ax = plt.subplot(30, 9, index+1)
    
    # Complete the line to create the plot for this subplot  
    # Same visualizations as we created above!
    population.plot(x='Year',y='Value', ax=None, legend=False)
    
    # Set the title of each plot, so we know which country it represents
    ax.set_title(countryname)
76/47:
# Group the DataFrame by Country Name (this line has been provided for you)
grouped_df = df.groupby('Country Name')

# pass in figsize=(20,40) and also set the facecolor parameter to 'white'
plt.figure(figsize=(20,40), facecolor='white')

# Complete the line below so that the first loop variable is the called index,
# and the second loop variable is the tuple (countryname, population)  
for index, (countryname, population) in enumerate(grouped_df):
    
    # Get the unique subplot where the plot we're creating during this iteration
    # of the loop will live. Our subplot will be 30 rows of 9 plots each  
    # Set the third value to be index+1
    ax = plt.subplot(30, 9, index+1)
    
    # Complete the line to create the plot for this subplot  
    # Same visualizations as we created above!
    population.plot(x='Year',y='Value', ax=ax, legend=False)
    
    # Set the title of each plot, so we know which country it represents
    ax.set_title(countryname)
78/1:
# Your code here
import numpy as np
import seaborn as sns

%matplotlib inline
78/2: data = np.random.normal(size=(20, 10)) + np.arange(10) / 2
78/3: boxplot = sns.boxplot(data=data)
78/4: boxplot = sns.boxplot(x= 'X Label', y='Y Label', data=data).set_title('Example Boxplot')
78/5: sns.boxplot(x= 'X Label', y='Y Label', data=data).set_title('Example Boxplot')
78/6: boxplot = sns.boxplot(x= 'X Label', y='Y Label', data=data).set('Example Boxplot')
78/7:
boxplot = sns.boxplot(data=data)
boxplot.set(xlabel= 'X Label', ylabel= 'Y Label', title='Example Boxplot')
78/8: sns.boxplot(data=data).set(xlabel= 'X Label', ylabel= 'Y Label', title='Example Boxplot')
78/9:
# Your code here
sns.boxplot(data=data).set(xlabel= 'X Label', ylabel= 'Y Label', title='Example Boxplot').set_style('darkgrid')
78/10:
# Your code here
sns.boxplot(data=data).set(xlabel= 'X Label', ylabel= 'Y Label', title='Example Boxplot')
sns.set_style('darkgrid')
78/11:
# Your code here
sns.boxplot(data=data).set(xlabel= 'X Label', ylabel= 'Y Label', title='Example Boxplot')
sns.set_style('darkgrid')
set_context('poster')
78/12:
# Your code here
sns.boxplot(data=data).set(xlabel= 'X Label', ylabel= 'Y Label', title='Example Boxplot')
sns.set_style('darkgrid').set_context('poster')
78/13:
# Your code here
sns.boxplot(data=data).set(xlabel= 'X Label', ylabel= 'Y Label', title='Example Boxplot')
sns.set_style('darkgrid')
sns.set_context('poster')
78/14:
# Your code here
sns.boxplot(data=data).set(xlabel= 'X Label', ylabel= 'Y Label', title='Example Boxplot')
sns.set_style('darkgrid')
sns.set_context('notebook')
78/15:
# Your code here
get_dataset_names()
78/16:
# Your code here
sns.get_dataset_names()
78/17: tips = sns.load_dataset('tips')
78/18:
# Your code here
sns.lmplot(x= 'total_bill', y='tip', hue='smoker', data=tips)
78/19:
sns.lmplot(x="total_bill", y="tip", hue="smoker",
           col="time", row="sex", data=tips)
81/1: questions = pd.read_csv('googleplaystore.csv')
81/2:
import pandas as pd

import matplotlib.plt as plt
%matplotlib inline
81/3:
import pandas as pd

import matplotlib.pyplot as plt
%matplotlib inline
81/4: questions = pd.read_csv('googleplaystore.csv')
81/5:
zf = zipfile.ZipFile("data/google-play-store-apps.zip")
google_play_df = pd.read_csv(zf.open('googleplaystore.csv'))
google_play_df.head()
81/6:
import zipfile

import pandas as pd

import matplotlib.pyplot as plt
%matplotlib inline
81/7:
zf = zipfile.ZipFile("data/google-play-store-apps.zip")

google_play_df = pd.read_csv(zf.open('googleplaystore.csv'))
google_play_df.head()
81/8:
zf = zipfile.ZipFile("data/google-play-store-apps.zip")

google_play_df = pd.read_csv(zf.open('googleplaystore.csv'))

google_play_df.head()
81/9:
import zipfile

import pandas as pd

import matplotlib.pyplot as plt
%matplotlib inline
81/10:
zf = zipfile.ZipFile("data/google-play-store-apps.zip")

google_play_df = pd.read_csv(zf.open('googleplaystore.csv'))

google_play_df.head()
82/1: import pandas as pd
82/2:
google_play_df = pd.read_csv("data/google-play-store-apps/googleplaystore.csv")
google_play_df.head()
81/11:
import zipfile

import pandas as pd

import matplotlib.pyplot as plt
%matplotlib inline
81/12:
zf = zipfile.ZipFile("data/google-play-store-apps.zip")
google_play_df = pd.read_csv(zf.open('googleplaystore.csv'))
google_play_df.head()
81/13:

google_play_df = pd.read_csv(zf.open('googleplaystore.csv'))
google_play_df.head()
81/14:

google_play_df = pd.read_csv('googleplaystore.csv')
google_play_df.head()
81/15:
import zipfile

import pandas as pd

import matplotlib.pyplot as plt
%matplotlib inline
81/16:
zf = zipfile.ZipFile("data/google-play-store-apps.zip")
google_play_df = pd.read_csv(zf.open('googleplaystore.csv'))
google_play_df.head()
82/3:
google_play_df = pd.read_csv("data/google-play-store-apps/googleplaystore.csv")
google_play_df.head()
82/4:
google_play_reviews_df = pd.read_csv("data/google-play-store-apps/googleplaystore_user_reviews.csv")
google_play_reviews_df.head()
82/5: df.describe()
82/6: google_play_df.describe()
82/7:
google_play_df.describe()
google_play_df.info
82/8:
google_play_df.describe()
google_play_df.info()
82/9:
google_play_df.groupby('Category')
google_play_df.head()
82/10:
google_play_df.groupby('Category')
google_play_df.head(20)
82/11:
#google_play_df.groupby('Category')
google_play_df.loc[df['Category'] == 'Games']
google_play_df.head(20)
82/12:
#google_play_df.groupby('Category')
google_play_df.loc[google_play_df['Category'] == 'Games']
google_play_df.head(20)
82/13:
#google_play_df.groupby('Category')
google_play_df.loc[google_play_df['Category'] == 'Games']
google_play_df
82/14:
print(google_play_df.describe())
print(google_play_df.info())
82/15:
google_play_df.groupby(['Category','Genre'])
#google_play_df.loc[google_play_df['Category'] == 'Games']
google_play_df
82/16:
google_play_df.groupby(['Category','Genres'])
#google_play_df.loc[google_play_df['Category'] == 'Games']
google_play_df
82/17:
cat_gen = google_play_df.groupby(['Category','Genres'])
#google_play_df.loc[google_play_df['Category'] == 'Games']
cat_gen
82/18:
cat_gen = google_play_df.groupby(['Category','Genres'])
#google_play_df.loc[google_play_df['Category'] == 'Games']
print(cat_gen)
82/19:
cat_gen = google_play_df.groupby(['Category','Genres']).head()
#google_play_df.loc[google_play_df['Category'] == 'Games']
82/20:
google_play_df.groupby(['Category','Genres']).head()
#google_play_df.loc[google_play_df['Category'] == 'Games']
82/21:
google_play_df.groupby(['Category','Genres','Rating']).head()
#google_play_df.loc[google_play_df['Category'] == 'Games']
82/22:
google_play_df.groupby(['Category','Genres','Android Ver']).head()
#google_play_df.loc[google_play_df['Category'] == 'Games']
82/23:
google_play_df['Rating'].mean()
#google_play_df.pivot(index= 'Category', columns='Android Ver',  )
82/24:
google_play_df.groupby(['Category','Android Ver']).mean()
#google_play_df.pivot(index= 'Category', columns='Android Ver', values=  )
82/25:
Cat_androidver = google_play_df.groupby(['Category','Android Ver']).mean()
#google_play_df.pivot(index= 'Category', columns='Android Ver', values=  )
82/26:
cat_androidver = google_play_df.groupby(['Category','Android Ver']).mean()
cat_androidver
#google_play_df.pivot(index= 'Category', columns='Android Ver', values=  )
82/27:
cat_androidver = google_play_df.groupby(['Category','Android Ver']).mean()
cat_androidver
google_play_df.pivot(index= 'Category', columns='Android Ver', values= 'cat_androidver' )
82/28:
cat_androidver = google_play_df.groupby(['Category','Android Ver']).mean()
cat_androidver
google_play_df.pivot(index= 'Category', columns='Android Ver', values= 'rating_mean' )
82/29:
cat_androidver = google_play_df.groupby(['Category','Android Ver']).mean()
cat_androidver
google_play_df.pivot(index= 'Category', columns='Android Ver', values= 'Ratings' )
82/30:
cat_androidver = google_play_df.groupby(['Category','Android Ver']).mean()
cat_androidver
google_play_df.pivot(index= 'Category', columns='Android Ver', values= 'Rating' )
82/31:
#google_play_df.groupby(['Category','Genres','Android Ver']).head()
google_play_df.loc[google_play_df['Category'] == 'GAME']
82/32:
#google_play_df.groupby(['Category','Genres','Android Ver']).head()
games = google_play_df.loc[google_play_df['Category'] == 'GAME']
games.groupby(['Rating']).map(lambda x: sorted(x))
82/33:
#google_play_df.groupby(['Category','Genres','Android Ver']).head()
games = google_play_df.loc[google_play_df['Category'] == 'GAME']
games.groupby(['Rating']).apply(lambda x: sorted(x))
82/34:
#google_play_df.groupby(['Category','Genres','Android Ver']).head()
games = google_play_df.loc[google_play_df['Category'] == 'GAME']
games.groupby(['Rating']).apply(lambda x: sorted(x)).head()
82/35:
#google_play_df.groupby(['Category','Genres','Android Ver']).head()
games = google_play_df.loc[google_play_df['Category'] == 'GAME']
games.groupby(['Rating']).apply(lambda x: sorted(x))
82/36:
#google_play_df.groupby(['Category','Genres','Android Ver']).head()
games = google_play_df.loc[google_play_df['Category'] == 'GAME']
games = games.groupby(['Rating']).apply(lambda x: sorted(x))
82/37:
#google_play_df.groupby(['Category','Genres','Android Ver']).head()
games = google_play_df.loc[google_play_df['Category'] == 'GAME']
games = games.groupby(['Rating']).apply(lambda x: sorted(x)).head()
82/38:
#google_play_df.groupby(['Category','Genres','Android Ver']).head()
games = google_play_df.loc[google_play_df['Category'] == 'GAME']
games = games.groupby(['Rating']).apply(lambda x: sorted(x))
print(games)
82/39:
cat_androidver = google_play_df.groupby(['Category','Android Ver']).mean()
cat_androidver
#google_play_df.pivot(index= 'Category', columns='Android Ver', values= 'Rating' )
82/40:
#google_play_df.groupby(['Category','Genres','Android Ver']).head()
games = google_play_df.loc[google_play_df['Category'] == 'GAME']
#games = games.groupby(['Rating']).apply(lambda x: sorted(x))
print(games)
82/41:
#google_play_df.groupby(['Category','Genres','Android Ver']).head()
games = google_play_df.loc[google_play_df['Category'] == 'GAME']
#games = games.groupby(['Rating']).apply(lambda x: sorted(x))
#print(games)
82/42:
#google_play_df.groupby(['Category','Genres','Android Ver']).head()
games = google_play_df.loc[google_play_df['Category'] == 'GAME'].head()
#games = games.groupby(['Rating']).apply(lambda x: sorted(x))
#print(games)
82/43:
#google_play_df.groupby(['Category','Genres','Android Ver']).head()
games = google_play_df.loc[google_play_df['Category'] == 'GAME']
games
#games = games.groupby(['Rating']).apply(lambda x: sorted(x))
#print(games)
82/44:
games.groupby(['Rating','Android Ver']).mean()
cat_androidver
#google_play_df.pivot(index= 'Category', columns='Android Ver', values= 'Rating' )
82/45:
games.groupby(['Rating','Android Ver']).mean()

#google_play_df.pivot(index= 'Category', columns='Android Ver', values= 'Rating' )
82/46:
games.groupby(['Rating','Android Ver'])

#google_play_df.pivot(index= 'Category', columns='Android Ver', values= 'Rating' )
82/47:
#google_play_df.groupby(['Category','Genres','Android Ver']).head()
games = google_play_df.loc[google_play_df['Category'] == 'GAME']
games
#games = games.groupby(['Rating']).apply(lambda x: sorted(x))
#print(games)
82/48:
games.groupby(['Rating','Android Ver'])

#google_play_df.pivot(index= 'Category', columns='Android Ver', values= 'Rating' )
82/49:
games.groupby(['Android Ver', 'Rating']).mean()

#google_play_df.pivot(index= 'Category', columns='Android Ver', values= 'Rating' )
82/50:
games.groupby(['Android Ver']).mean()

#google_play_df.pivot(index= 'Category', columns='Android Ver', values= 'Rating' )
82/51:
rating_vs_droid = games.groupby(['Android Ver']).mean()
rating_vs_droid.sort_values(by= 'Rating')

#google_play_df.pivot(index= 'Category', columns='Android Ver', values= 'Rating' )
82/52: google_play_df.isna()
82/53: google_play_df.isna().sum()
82/54:
google_play_df.isna().sum()
google_play_df['Rating'].unique()
82/55:
google_play_df.isna().sum() #check for NaNs
google_play_df['Rating'].unique() #Shows all unique values to discover the placeholder data
google_play_df.['Rating'].fillna(google_play_df['Rating'].median())
82/56:
google_play_df.isna().sum() #check for NaNs
google_play_df['Rating'].unique() #Shows all unique values to discover the placeholder data
google_play_df['Rating'].fillna(google_play_df['Rating'].median())
82/57:
google_play_df = google_play_df.isna().sum() #check for NaNs
google_play_df = google_play_df['Rating'].unique() #Shows all unique values to discover the placeholder data
google_play_df = google_play_df['Rating'].fillna(google_play_df['Rating'].median())
google_play_df,head()
82/58:
google_play_df = google_play_df.isna().sum() #check for NaNs
google_play_df = google_play_df['Rating'].unique() #Shows all unique values to discover the placeholder data
google_play_df = google_play_df['Rating'].fillna(google_play_df['Rating'].median())
google_play_df.head()
82/59:
google_play_df.isna().sum() #check for NaNs
google_play_df['Rating'].unique() #Shows all unique values to discover the placeholder data
google_play_df['Rating'].fillna(google_play_df['Rating'].median())
google_play_df.head()
82/60:
google_play_df.isna().sum() #check for NaNs
google_play_df['Rating'].unique() #Shows all unique values to discover the placeholder data
google_play_df['Rating'].fillna(google_play_df['Rating'].median())
82/61: import pandas as pd
82/62:
google_play_df = pd.read_csv("data/google-play-store-apps/googleplaystore.csv")
google_play_df.head()
82/63:
google_play_reviews_df = pd.read_csv("data/google-play-store-apps/googleplaystore_user_reviews.csv")
google_play_reviews_df.head()
82/64:
google_play_df.isna().sum() #check for NaNs
google_play_df['Rating'].unique() #Shows all unique values to discover the placeholder data
google_play_df['Rating'].fillna(google_play_df['Rating'].median())
82/65:
google_play_df.isna().sum() #check for NaNs
google_play_df['Rating'].unique() #Shows all unique values to discover the placeholder data
google_play_df['Rating'].fillna(google_play_df['Rating'].median()).head()
82/66:
google_play_df.isna().sum() #check for NaNs
google_play_df['Rating'].unique() #Shows all unique values to discover the placeholder data
google_play_df = google_play_df['Rating'].fillna(google_play_df['Rating'].median())
82/67:
google_play_df.isna().sum() #check for NaNs
google_play_df['Rating'].unique() #Shows all unique values to discover the placeholder data
google_play_df = google_play_df['Rating'].fillna(google_play_df['Rating'].median())
google_play_df
82/68:
google_play_df.isna().sum() #check for NaNs
google_play_df['Rating'].unique() #Shows all unique values to discover the placeholder data
google_play_df['Rating'].fillna(google_play_df['Rating'].median())
82/69: import pandas as pd
82/70:
google_play_df = pd.read_csv("data/google-play-store-apps/googleplaystore.csv")
google_play_df.head()
82/71:
google_play_reviews_df = pd.read_csv("data/google-play-store-apps/googleplaystore_user_reviews.csv")
google_play_reviews_df.head()
82/72:
google_play_df.isna().sum() #check for NaNs
google_play_df['Rating'].unique() #Shows all unique values to discover the placeholder data
google_play_df['Rating'].fillna(google_play_df['Rating'].median())
82/73:
print(google_play_df.isna().sum()) #check for NaNs
print(google_play_df['Rating'].unique()) #Shows all unique values to discover the placeholder data
google_play_df['Rating'].fillna(google_play_df['Rating'].median()) #fills the NaNs in rating with the median
82/74:
print(google_play_df.isna().sum()) #check for NaNs
print(google_play_df['Rating'].unique()) #Shows all unique values to discover the placeholder data
google_play_df['Rating'].fillna(google_play_df['Rating'].median()) #fills the 1474 NaNs in rating with the median
gp_df_vc = google_play_df.drop(10472)['Category'].value_counts()
82/75: gp_df_vc['Type'].unique()
82/76:
print(google_play_df.isna().sum()) #check for NaNs
print(google_play_df['Rating'].unique()) #Shows all unique values to discover the placeholder data
google_play_df['Rating'].fillna(google_play_df['Rating'].median()) #fills the 1474 NaNs in rating with the median
gp_df_vc = google_play_df.drop(10472)['Category'].value_counts()
82/77:
print(google_play_df.isna().sum()) #check for NaNs
print(google_play_df['Rating'].unique()) #Shows all unique values to discover the placeholder data
google_play_df['Rating'].fillna(google_play_df['Rating'].median()) #fills the 1474 NaNs in rating with the median
#gp_df_vc = google_play_df.drop(10472)['Category'].value_counts()
82/78:
#print(google_play_df.isna().sum()) #check for NaNs
#print(google_play_df['Rating'].unique()) #Shows all unique values to discover the placeholder data
google_play_df['Rating'].fillna(google_play_df['Rating'].median()) #fills the 1474 NaNs in rating with the median
gp_df_vc = google_play_df.drop(10472)['Category'].value_counts()
82/79:
#print(google_play_df.isna().sum()) #check for NaNs
#print(google_play_df['Rating'].unique()) #Shows all unique values to discover the placeholder data
google_play_df['Rating'].fillna(google_play_df['Rating'].median()) #fills the 1474 NaNs in rating with the median
gp_df_vc = google_play_df.drop(10472)['Category'].value_counts()

gp_df_vc
82/80:
#print(google_play_df.isna().sum()) #check for NaNs
#print(google_play_df['Rating'].unique()) #Shows all unique values to discover the placeholder data
google_play_df['Rating'].fillna(google_play_df['Rating'].median()) #fills the 1474 NaNs in rating with the median
print(google_play_df.isna().sum()) #check for NaNs
82/81:
#print(google_play_df.isna().sum()) #check for NaNs
#print(google_play_df['Rating'].unique()) #Shows all unique values to discover the placeholder data
google_play_df = google_play_df['Rating'].fillna(google_play_df['Rating'].median()) #fills the 1474 NaNs in rating with the median
google_play_df.isna().sum()) #check for NaNs
82/82:
#print(google_play_df.isna().sum()) #check for NaNs
#print(google_play_df['Rating'].unique()) #Shows all unique values to discover the placeholder data
google_play_df = google_play_df['Rating'].fillna(google_play_df['Rating'].median()) #fills the 1474 NaNs in rating with the median
google_play_df.isna().sum() #check for NaNs
82/83:
#print(google_play_df.isna().sum()) #Inital check for NaNs
print(google_play_df['Rating'].unique()) #Shows all unique values to discover the placeholder data
google_play_df = google_play_df['Rating'].fillna(google_play_df['Rating'].median()) #fills the 1474 NaNs in rating with the median
google_play_df.isna().sum() #Final check for NaNs
82/84:
#print(google_play_df.isna().sum()) #Inital check for NaNs
#print(google_play_df['Rating'].unique()) #Shows all unique values to discover the placeholder data
google_play_df = google_play_df['Rating'].fillna(google_play_df['Rating'].median()) #fills the 1474 NaNs in rating with the median
google_play_df.isna().sum() #Final check for NaNs
print(google_play_df['Rating'].unique())
82/85:
#print(google_play_df.isna().sum()) #Inital check for NaNs
#print(google_play_df['Rating'].unique()) #Shows all unique values to discover the placeholder data
google_play_df = google_play_df['Rating'].fillna(google_play_df['Rating'].median()) #fills the 1474 NaNs in rating with the median
google_play_df.isna().sum() #Final check for NaNs
82/86:
#print(google_play_df.isna().sum()) #Inital check for NaNs
#print(google_play_df['Rating'].unique()) #Shows all unique values to discover the placeholder data
google_play_df = google_play_df['Rating'].fillna(google_play_df['Rating'].median()) #fills the 1474 NaNs in rating with the median
google_play_df.isna().sum() #Final check for NaNs
82/87: import pandas as pd
82/88:
google_play_df = pd.read_csv("data/google-play-store-apps/googleplaystore.csv")
google_play_df.head()
82/89:
google_play_reviews_df = pd.read_csv("data/google-play-store-apps/googleplaystore_user_reviews.csv")
google_play_reviews_df.head()
82/90:
#print(google_play_df.isna().sum()) #Inital check for NaNs
#print(google_play_df['Rating'].unique()) #Shows all unique values to discover the placeholder data
google_play_df = google_play_df['Rating'].fillna(google_play_df['Rating'].median()) #fills the 1474 NaNs in rating with the median
google_play_df.isna().sum() #Final check for NaNs
82/91: gp_df_vc['Type'].unique()
82/92:
#google_play_df.groupby(['Category','Genres','Android Ver']).head()
games = google_play_df.loc[google_play_df['Category'] == 'GAME']
#games.groupby(['Rating']).apply(lambda x: sorted(x))
#print(games)
82/93: import pandas as pd
82/94:
google_play_df = pd.read_csv("data/google-play-store-apps/googleplaystore.csv")
google_play_df.head()
82/95:
google_play_reviews_df = pd.read_csv("data/google-play-store-apps/googleplaystore_user_reviews.csv")
google_play_reviews_df.head()
82/96:
#print(google_play_df.isna().sum()) #Inital check for NaNs
#print(google_play_df['Rating'].unique()) #Shows all unique values to discover the placeholder data
google_play_df = google_play_df['Rating'].fillna(google_play_df['Rating'].median()) #fills the 1474 NaNs in rating with the median
google_play_df.isna().sum() #Final check for NaNs
82/97:
#google_play_df.groupby(['Category','Genres','Android Ver']).head()
games = google_play_df.loc[google_play_df['Category'] == 'GAME']
#games.groupby(['Rating']).apply(lambda x: sorted(x))
#print(games)
82/98:
#print(google_play_df.isna().sum()) #Inital check for NaNs
#print(google_play_df['Rating'].unique()) #Shows all unique values to discover the placeholder data
google_play_df = google_play_df['Rating'].fillna(google_play_df['Rating'].median()) #fills the 1474 NaNs in rating with the median
#google_play_df.isna().sum() #Final check for NaNs
82/99:
google_play_df = pd.read_csv("data/google-play-store-apps/googleplaystore.csv")
google_play_df.head()
82/100:
google_play_reviews_df = pd.read_csv("data/google-play-store-apps/googleplaystore_user_reviews.csv")
google_play_reviews_df.head()
82/101:
#print(google_play_df.isna().sum()) #Inital check for NaNs
#print(google_play_df['Rating'].unique()) #Shows all unique values to discover the placeholder data
google_play_df = google_play_df['Rating'].fillna(google_play_df['Rating'].median()) #fills the 1474 NaNs in rating with the median
#google_play_df.isna().sum() #Final check for NaNs
82/102:
#print(google_play_df.isna().sum()) #Inital check for NaNs
#print(google_play_df['Rating'].unique()) #Shows all unique values to discover the placeholder data
google_play_df['Rating'].fillna(google_play_df['Rating'].median()) #fills the 1474 NaNs in rating with the median
#google_play_df.isna().sum() #Final check for NaNs = 0
82/103:
google_play_df = pd.read_csv("data/google-play-store-apps/googleplaystore.csv")
google_play_df.head()
82/104: import pandas as pd
82/105:
google_play_df = pd.read_csv("data/google-play-store-apps/googleplaystore.csv")
google_play_df.head()
82/106:
google_play_reviews_df = pd.read_csv("data/google-play-store-apps/googleplaystore_user_reviews.csv")
google_play_reviews_df.head()
82/107:
print(google_play_df.describe())
print(google_play_df.info())
82/108:
#print(google_play_df.isna().sum()) #Inital check for NaNs
#print(google_play_df['Rating'].unique()) #Shows all unique values to discover the placeholder data
google_play_df = google_play_df['Rating'].fillna(google_play_df['Rating'].median()) #fills the 1474 NaNs in rating with the median
#google_play_df.isna().sum() #Final check for NaNs = 0
82/109:
#print(google_play_df.isna().sum()) #Inital check for NaNs
#print(google_play_df['Rating'].unique()) #Shows all unique values to discover the placeholder data
google_play_df = google_play_df['Rating'].fillna(google_play_df['Rating'].median()) #fills the 1474 NaNs in rating with the median
#google_play_df.isna().sum() #Final check for NaNs = 0
google_play_df
82/110:
#print(google_play_df.isna().sum()) #Inital check for NaNs
#print(google_play_df['Rating'].unique()) #Shows all unique values to discover the placeholder data
google_play_df['Rating'].fillna(google_play_df['Rating'].median()) #fills the 1474 NaNs in rating with the median
#google_play_df.isna().sum() #Final check for NaNs = 0
82/111:
google_play_df = pd.read_csv("data/google-play-store-apps/googleplaystore.csv")
google_play_df.head()
82/112:
google_play_reviews_df = pd.read_csv("data/google-play-store-apps/googleplaystore_user_reviews.csv")
google_play_reviews_df.head()
82/113:
print(google_play_df.describe())
print(google_play_df.info())
82/114:
#print(google_play_df.isna().sum()) #Inital check for NaNs
#print(google_play_df['Rating'].unique()) #Shows all unique values to discover the placeholder data
google_play_df['Rating'].fillna(google_play_df['Rating'].median()) #fills the 1474 NaNs in rating with the median
#google_play_df.isna().sum() #Final check for NaNs = 0
82/115: google_play_df.isna().sum()
82/116: google_play_df['Rating'].unique()
82/117:
#print(google_play_df.isna().sum()) #Inital check for NaNs
#print(google_play_df['Rating'].unique()) #Shows all unique values to discover the placeholder data
google_play_df['Rating'] = google_play_df['Rating'].fillna(google_play_df['Rating'].median()) #fills the 1474 NaNs in rating with the median
#google_play_df.isna().sum() #Final check for NaNs = 0
82/118: google_play_df['Rating'].unique()
82/119:
#print(google_play_df.isna().sum()) #Inital check for NaNs
#print(google_play_df['Rating'].unique()) #Shows all unique values to discover the placeholder data
google_play_df['Rating'] = google_play_df['Rating'].fillna(google_play_df['Rating'].median()) #fills the 1474 NaNs in rating with the median
google_play_df.isna().sum() #Final check for NaNs = 0
82/120: google_play_df['Type'].unique()
82/121:
google_play_df['Type'].unique()
google_play_df['Type'] = google_play_df['Type'].fillna(google_play_df['Type'].mode()
82/122:
#google_play_df['Type'].unique()
google_play_df['Type'] = google_play_df['Type'].fillna(google_play_df['Type'].mode()
82/123:
#google_play_df['Type'].unique()
google_play_df['Type'] = google_play_df['Type'].fillna(google_play_df['Type'].mode()[0]
82/124:
#google_play_df['Type'].unique()
google_play_df['Type'].fillna(google_play_df['Type'].mode()
82/125:
#google_play_df['Type'].unique()
google_play_df['Type'] = google_play_df['Type'].fillna(google_play_df['Type'].mode())
82/126:
#google_play_df['Type'].unique()
google_play_df['Type'] = google_play_df['Type'].fillna(google_play_df['Type'].mode())
google_play_df['Type'].unique()
82/127:
#google_play_df['Type'].unique()
google_play_df['Type'] = google_play_df['Type'].fillna(google_play_df['Type'].mode())
google_play_df.isna().sum()
82/128:
#google_play_df['Type'].unique()
google_play_df['Type'] = google_play_df['Type'].fillna(google_play_df['Type'].mode())
82/129:
#google_play_df['Type'].unique()
google_play_df['Type'] = google_play_df['Type'].fillna(google_play_df['Type'].mode()) #Replaces the NaN in Type with the Mode
google_play_df['Current Ver'] = google_play_df['Current Ver'].fillna(google_play_df['Current Ver'].mode())
82/130:
#google_play_df['Type'].unique()
google_play_df['Type'] = google_play_df['Type'].fillna(google_play_df['Type'].mode()) #Replaces the NaN in Type with the Mode
google_play_df['Current Ver'] = google_play_df['Current Ver'].fillna(google_play_df['Current Ver'].mode())
google_play_df.head()
82/131:
#google_play_df['Type'].unique()
google_play_df['Type'] = google_play_df['Type'].fillna(google_play_df['Type'].mode()) #Replaces the NaN in Type with the Mode
google_play_df['Current Ver'] = google_play_df['Current Ver'].fillna(google_play_df['Current Ver'].mode()) #Replaces the NaN in Current Ver with the Mode
google_play_df['Android Ver'] = google_play_df['Android Ver'].fillna(google_play_df['Android Ver'].mode()) #Replaces the NaN in Android Ver with the Mode
82/132:
#google_play_df.groupby(['Category','Genres','Android Ver']).head()
games = google_play_df.loc[google_play_df['Category'] == 'GAME']
#games.groupby(['Rating']).apply(lambda x: sorted(x))
#print(games)
82/133: import pandas as pd
82/134:
google_play_df = pd.read_csv("data/google-play-store-apps/googleplaystore.csv")
google_play_df.head()
82/135:
google_play_reviews_df = pd.read_csv("data/google-play-store-apps/googleplaystore_user_reviews.csv")
google_play_reviews_df.head()
82/136:
print(google_play_df.describe())
print(google_play_df.info())
82/137:
#print(google_play_df.isna().sum()) #Inital check for NaNs
#print(google_play_df['Rating'].unique()) #Shows all unique values to discover the placeholder data
google_play_df['Rating'] = google_play_df['Rating'].fillna(google_play_df['Rating'].median()) #fills the 1474 NaNs in rating with the median
google_play_df.isna().sum() #Final check for NaNs = 0
82/138:
#google_play_df['Type'].unique()
google_play_df['Type'] = google_play_df['Type'].fillna(google_play_df['Type'].mode()) #Replaces the NaN in Type with the Mode
google_play_df['Current Ver'] = google_play_df['Current Ver'].fillna(google_play_df['Current Ver'].mode()) #Replaces the NaN in Current Ver with the Mode
google_play_df['Android Ver'] = google_play_df['Android Ver'].fillna(google_play_df['Android Ver'].mode()) #Replaces the NaN in Android Ver with the Mode
82/139: google_play_df.isna().sum()
82/140:
rating_vs_droid = games.groupby(['Android Ver']).mean() 
rating_vs_droid.sort_values(by= 'Rating')

#google_play_df.pivot(index= 'Category', columns='Android Ver', values= 'Rating' )
82/141:
#google_play_df.groupby(['Category','Genres','Android Ver']).head()
games = google_play_df.loc[google_play_df['Category'] == 'GAME'] #Accesses the Games category
#games.groupby(['Rating']).apply(lambda x: sorted(x))
#print(games)
82/142:
rating_vs_droid = games.groupby(['Android Ver']).mean() 
rating_vs_droid.sort_values(by= 'Rating')

rating_vs_droid.corr()
#google_play_df.pivot(index= 'Category', columns='Android Ver', values= 'Rating' )
82/143:
#google_play_df.groupby(['Category','Genres','Android Ver']).head()
games = google_play_df.loc[google_play_df['Category'] == 'GAME'] #Accesses the Games category
#games.groupby(['Rating']).apply(lambda x: sorted(x))
print(games)
82/144:
#google_play_df.groupby(['Category','Genres','Android Ver']).head()
games = google_play_df.loc[google_play_df['Category'] == 'GAME'] #Accesses the Games category
#games.groupby(['Rating']).apply(lambda x: sorted(x))
games.head()
82/145:
rating_vs_droid = games.groupby(['Android Ver', 'Last Updated']).mean() 
rating_vs_droid.sort_values(by= 'Rating')

rating_vs_droid.corr()
#google_play_df.pivot(index= 'Category', columns='Android Ver', values= 'Rating' )
82/146:
rating_vs_droid = games.groupby(['Android Ver', 'Last Updated']).mean() 
rating_vs_droid.sort_values(by= 'Rating')

#rating_vs_droid.corr()
#google_play_df.pivot(index= 'Category', columns='Android Ver', values= 'Rating' )
82/147:
rating_vs_droid = games.groupby(['Android Ver', 'Last Updated']).mean() 
rating_vs_droid.sort_values(by= 'Rating')
rating_vs_droid.set_index('Rating', inplace=True)
#rating_vs_droid.corr()
#google_play_df.pivot(index= 'Category', columns='Android Ver', values= 'Rating' )
82/148:
rating_vs_droid = games.groupby(['Android Ver', 'Last Updated']).mean() 
rating_vs_droid.sort_values(by= 'Rating')
rating_vs_droid.set_index('Rating', inplace=True)
rating_vs_droid
#rating_vs_droid.corr()
#google_play_df.pivot(index= 'Category', columns='Android Ver', values= 'Rating' )
82/149:
rating_vs_droid = games.groupby(['Android Ver', 'Last Updated']).mean() 
rating_vs_droid.sort_values(by= 'Rating')
rating_vs_droid.set_index('Rating', inplace=True)
print(rating_vs_droid)
#rating_vs_droid.corr()
#google_play_df.pivot(index= 'Category', columns='Android Ver', values= 'Rating' )
82/150:
rating_vs_droid = games.groupby(['Android Ver', 'Last Updated']).mean() 
rating_vs_droid.sort_values(by= 'Rating')
#rating_vs_droid.set_index('Rating', inplace=True)

#rating_vs_droid.corr()
#google_play_df.pivot(index= 'Category', columns='Android Ver', values= 'Rating' )
82/151:
rating_vs_droid = games.groupby(['Android Ver', 'Last Updated']).mean() 
rating_vs_droid.sort_values(by= ['Rating', 'Last Updated'])
#rating_vs_droid.set_index('Rating', inplace=True)

#rating_vs_droid.corr()
#google_play_df.pivot(index= 'Category', columns='Android Ver', values= 'Rating' )
82/152: import pandas as pd
82/153:
google_play_df = pd.read_csv("data/google-play-store-apps/googleplaystore.csv")
google_play_df.head()
82/154:
google_play_reviews_df = pd.read_csv("data/google-play-store-apps/googleplaystore_user_reviews.csv")
google_play_reviews_df.head()
82/155:
print(google_play_df.describe())
print(google_play_df.info())
82/156:
#print(google_play_df.isna().sum()) #Inital check for NaNs
#print(google_play_df['Rating'].unique()) #Shows all unique values to discover the placeholder data
google_play_df['Rating'] = google_play_df['Rating'].fillna(google_play_df['Rating'].median()) #fills the 1474 NaNs in rating with the median
google_play_df.isna().sum() #Final check for NaNs = 0
82/157:
#google_play_df['Type'].unique()
google_play_df['Type'] = google_play_df['Type'].fillna(google_play_df['Type'].mode()) #Replaces the NaN in Type with the Mode
google_play_df['Current Ver'] = google_play_df['Current Ver'].fillna(google_play_df['Current Ver'].mode()) #Replaces the NaN in Current Ver with the Mode
google_play_df['Android Ver'] = google_play_df['Android Ver'].fillna(google_play_df['Android Ver'].mode()) #Replaces the NaN in Android Ver with the Mode
82/158:
#google_play_df.groupby(['Category','Genres','Android Ver']).head()
games = google_play_df.loc[google_play_df['Category'] == 'GAME'] #Accesses the Games category
#games.groupby(['Rating']).apply(lambda x: sorted(x))
games.head()
82/159:
rating_vs_droid = games.groupby(['Android Ver', 'Last Updated']).mean() 
rating_vs_droid.sort_values(by= ['Rating', 'Last Updated'])
#rating_vs_droid.set_index('Rating', inplace=True)

#rating_vs_droid.corr()
#google_play_df.pivot(index= 'Category', columns='Android Ver', values= 'Rating' )
82/160:
rating_vs_droid = games.groupby(['Android Ver', 'Last Updated']).mean() 
rating_vs_droid.sort_values(by= ['Rating', 'Last Updated'])
rating_vs_droid.set_index('Rating', inplace=True)

#rating_vs_droid.corr()
#google_play_df.pivot(index= 'Category', columns='Android Ver', values= 'Rating' )
82/161:
rating_vs_droid = games.groupby(['Android Ver', 'Last Updated']).mean() 
rating_vs_droid.sort_values(by= ['Rating', 'Last Updated'])
rating_vs_droid.set_index('Rating', inplace=True)

rating_vs_droid
#rating_vs_droid.corr()
#google_play_df.pivot(index= 'Category', columns='Android Ver', values= 'Rating' )
82/162:
rating_vs_droid = games.groupby(['Android Ver', 'Last Updated']).mean() 
rating_vs_droid.sort_values(by= ['Rating', 'Last Updated'])



#rating_vs_droid.corr()
#google_play_df.pivot(index= 'Category', columns='Android Ver', values= 'Rating' )
82/163:
rating_vs_droid = games.groupby(['Android Ver', 'Last Updated']).mean() 
rating_vs_droid.sort_values(by= ['Rating', 'Last Updated'])

import seaborn as sns

rating_vs_droid = sns.load_dataset("rating_vs_droid")

#rating_vs_droid.corr()
#google_play_df.pivot(index= 'Category', columns='Android Ver', values= 'Rating' )
82/164:
rating_vs_droid = games.groupby(['Android Ver', 'Last Updated']).mean() 
rating_vs_droid.sort_values(by= ['Rating', 'Last Updated'])

import seaborn as sns

sns.load_dataset("rating_vs_droid")

#rating_vs_droid.corr()
#google_play_df.pivot(index= 'Category', columns='Android Ver', values= 'Rating' )
82/165:
rating_vs_droid = games.groupby(['Android Ver', 'Last Updated']).mean() 
rating_vs_droid.sort_values(by= ['Rating', 'Last Updated'])

import seaborn as sns

sns.barplot(x='Android Ver', y='Rating', data=rating_vs_droid)

#rating_vs_droid.corr()
#google_play_df.pivot(index= 'Category', columns='Android Ver', values= 'Rating' )
82/166:
rating_vs_droid = games.groupby(['Android Ver', 'Last Updated']).mean() 
rating_vs_droid.sort_values(by= ['Rating', 'Last Updated'])

import seaborn as sns

sns.distplot(x='Android Ver', y='Rating')

#rating_vs_droid.corr()
#google_play_df.pivot(index= 'Category', columns='Android Ver', values= 'Rating' )
82/167:
rating_vs_droid = games.groupby(['Android Ver', 'Last Updated']).mean() 
rating_vs_droid.sort_values(by= ['Rating', 'Last Updated'])

import seaborn as sns

sns.distplot('Android Ver','Rating')

#rating_vs_droid.corr()
#google_play_df.pivot(index= 'Category', columns='Android Ver', values= 'Rating' )
82/168:
rating_vs_droid = games.groupby(['Android Ver', 'Last Updated']).mean() 
rating_vs_droid.sort_values(by= ['Rating', 'Last Updated'])

import seaborn as sns

sns.distplot('Rating')

#rating_vs_droid.corr()
#google_play_df.pivot(index= 'Category', columns='Android Ver', values= 'Rating' )
82/169:
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline

import seaborn as sns
82/170:
google_play_df = pd.read_csv("data/google-play-store-apps/googleplaystore.csv")
google_play_df.head()
82/171:
google_play_reviews_df = pd.read_csv("data/google-play-store-apps/googleplaystore_user_reviews.csv")
google_play_reviews_df.head()
82/172:
print(google_play_df.describe())
print(google_play_df.info())
82/173:
#print(google_play_df.isna().sum()) #Inital check for NaNs
#print(google_play_df['Rating'].unique()) #Shows all unique values to discover the placeholder data
google_play_df['Rating'] = google_play_df['Rating'].fillna(google_play_df['Rating'].median()) #fills the 1474 NaNs in rating with the median
google_play_df.isna().sum() #Final check for NaNs = 0
82/174:
#google_play_df['Type'].unique()
google_play_df['Type'] = google_play_df['Type'].fillna(google_play_df['Type'].mode()) #Replaces the NaN in Type with the Mode
google_play_df['Current Ver'] = google_play_df['Current Ver'].fillna(google_play_df['Current Ver'].mode()) #Replaces the NaN in Current Ver with the Mode
google_play_df['Android Ver'] = google_play_df['Android Ver'].fillna(google_play_df['Android Ver'].mode()) #Replaces the NaN in Android Ver with the Mode
82/175:
#google_play_df.groupby(['Category','Genres','Android Ver']).head()
games = google_play_df.loc[google_play_df['Category'] == 'GAME'] #Accesses the Games category
#games.groupby(['Rating']).apply(lambda x: sorted(x))
games.head()
82/176:
rating_vs_droid = games.groupby(['Android Ver', 'Last Updated']).mean() 
rating_vs_droid.sort_values(by= ['Rating', 'Last Updated'])



sns.distplot('Rating')

#rating_vs_droid.corr()
#google_play_df.pivot(index= 'Category', columns='Android Ver', values= 'Rating' )
82/177:
rating_vs_droid = games.groupby(['Android Ver', 'Last Updated']).mean() 
rating_vs_droid.sort_values(by= ['Rating', 'Last Updated'])



sns.distplot(google_play_df['Rating'])

#rating_vs_droid.corr()
#google_play_df.pivot(index= 'Category', columns='Android Ver', values= 'Rating' )
82/178:
rating_vs_droid = games.groupby(['Android Ver', 'Last Updated']).mean() 
rating_vs_droid.sort_values(by= ['Rating', 'Last Updated'])



sns.distplot(rating_vs_droid['Rating'])

#rating_vs_droid.corr()
#google_play_df.pivot(index= 'Category', columns='Android Ver', values= 'Rating' )
82/179:
rating_vs_droid = games.groupby(['Android Ver', 'Last Updated']).mean() 
rating_vs_droid.sort_values(by= ['Rating', 'Last Updated'])



sns.distplot(rating_vs_droid['Rating'])
sns.distplot(rating_vs_droid['Last Updated'])

#rating_vs_droid.corr()
#google_play_df.pivot(index= 'Category', columns='Android Ver', values= 'Rating' )
82/180:
rating_vs_droid = games.groupby(['Android Ver', 'Last Updated']).mean() 
rating_vs_droid.sort_values(by= ['Rating', 'Last Updated'])



sns.distplot(rating_vs_droid['Rating'])
sns.distplot(rating_vs_droid['Android Ver'])

#rating_vs_droid.corr()
#google_play_df.pivot(index= 'Category', columns='Android Ver', values= 'Rating' )
82/181:
rating_vs_droid = games.groupby(['Android Ver', 'Last Updated']).mean() 
rating_vs_droid.sort_values(by= ['Rating', 'Last Updated'])



sns.distplot(rating_vs_droid['Rating'])
#sns.distplot(rating_vs_droid['Android Ver'])
sns.barplot(x=rating_vs_droid['Rating'], y=rating_vs_droid['Last Updated'])

#rating_vs_droid.corr()
#google_play_df.pivot(index= 'Category', columns='Android Ver', values= 'Rating' )
82/182:
rating_vs_droid = games.groupby(['Android Ver', 'Last Updated']).mean() 
rating_vs_droid.sort_values(by= ['Rating', 'Last Updated'])


rating_vs_droid = sns.load_dataset("rating_vs_droid")
sns.distplot(rating_vs_droid['Rating'])
#sns.distplot(rating_vs_droid['Android Ver'])
sns.barplot(x=rating_vs_droid['Rating'], y=rating_vs_droid['Last Updated'], data)

#rating_vs_droid.corr()
#google_play_df.pivot(index= 'Category', columns='Android Ver', values= 'Rating' )
82/183:
rating_vs_droid = games.groupby(['Android Ver', 'Last Updated']).mean() 
rating_vs_droid.sort_values(by= ['Rating', 'Last Updated'])


rating_vs_droid = sns.load_dataset("rating_vs_droid")
sns.distplot(rating_vs_droid['Rating'])
#sns.distplot(rating_vs_droid['Android Ver'])
sns.barplot(x='Rating', y='Last Updated', data=rating_vs_droid)

#rating_vs_droid.corr()
#google_play_df.pivot(index= 'Category', columns='Android Ver', values= 'Rating' )
82/184:
rating_vs_droid = games.groupby(['Android Ver', 'Last Updated']).mean() 
rating_vs_droid.sort_values(by= ['Rating', 'Last Updated'])


play_data = sns.load_dataset("google_play_df")
sns.distplot(rating_vs_droid['Rating'])
#sns.distplot(rating_vs_droid['Android Ver'])
sns.barplot(x='Rating', y='Last Updated', data=rating_vs_droid)

#rating_vs_droid.corr()
#google_play_df.pivot(index= 'Category', columns='Android Ver', values= 'Rating' )
82/185:
rating_vs_droid = games.groupby(['Android Ver', 'Last Updated']).mean() 
rating_vs_droid.sort_values(by= ['Rating', 'Last Updated'])


sns.distplot(rating_vs_droid['Rating'])
#sns.distplot(rating_vs_droid['Android Ver'])
sns.barplot(x='Rating', y='Last Updated', data=rating_vs_droid)

#rating_vs_droid.corr()
#google_play_df.pivot(index= 'Category', columns='Android Ver', values= 'Rating' )
82/186:
rating_vs_droid = games.groupby(['Android Ver', 'Last Updated']).mean() 
rating_vs_droid.sort_values(by= ['Rating', 'Last Updated'])


#*sns.distplot(rating_vs_droid['Rating'])
sns.distplot(rating_vs_droid['Android Ver'])
#sns.barplot(x='Rating', y='Last Updated', data=rating_vs_droid)
82/187:
rating_vs_droid = games.groupby(['Android Ver', 'Last Updated']).mean() 
rating_vs_droid.sort_values(by= ['Rating', 'Last Updated'])


#*sns.distplot(rating_vs_droid['Rating'])
sns.distplot(rating_vs_droid['Last Updated'])
#sns.barplot(x='Rating', y='Last Updated', data=rating_vs_droid)
82/188:
rating_vs_droid = games.groupby(['Android Ver', 'Last Updated']).mean() 
rating_vs_droid.sort_values(by= ['Rating', 'Last Updated'])


sns.distplot(rating_vs_droid['Rating'])

#sns.barplot(x='Rating', y='Last Updated', data=rating_vs_droid)
82/189:
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline

import seaborn as sns
82/190:
google_play_df = pd.read_csv("data/google-play-store-apps/googleplaystore.csv")
google_play_df.head()
82/191:
google_play_reviews_df = pd.read_csv("data/google-play-store-apps/googleplaystore_user_reviews.csv")
google_play_reviews_df.head()
82/192: google_play_reviews_df['Sentiment'].unique()
82/193: google_play_reviews_df['Sentiment'].unique()
82/194:
rating_vs_droid = games.groupby(['Android Ver', 'Last Updated']).mean() 
rating_vs_droid.sort_values(by= ['Rating', 'Last Updated'])


sns.distplot(rating_vs_droid['Rating'])

sns.barplot(x='Rating', y='Last Updated', data=rating_vs_droid)
82/195:
rating_vs_droid = games.groupby(['Android Ver', 'Last Updated']).mean() 
print(rating_vs_droid.sort_values(by= ['Rating', 'Last Updated']))


sns.distplot(rating_vs_droid['Rating'])

sns.barplot(x='Rating', y='Last Updated', data=rating_vs_droid)
82/196:
rating_vs_droid = games.groupby(['Android Ver', 'Last Updated']).mean() 
print(rating_vs_droid.sort_values(by= ['Rating', 'Last Updated']))


google_play_df['Last Updated'] = pd.to_datetime(df['Last Updated'])
sns.distplot(rating_vs_droid['Rating'])

sns.barplot(x='Rating', y='Last Updated', data=rating_vs_droid)
82/197:
rating_vs_droid = games.groupby(['Android Ver', 'Last Updated']).mean() 
print(rating_vs_droid.sort_values(by= ['Rating', 'Last Updated']))


google_play_df['Last Updated'] = pd.to_datetime(google_play_df['Last Updated'])
sns.distplot(rating_vs_droid['Rating'])

sns.barplot(x='Rating', y='Last Updated', data=rating_vs_droid)
82/198:
rating_vs_droid = games.groupby(['Android Ver', 'Last Updated']).mean() 
print(rating_vs_droid.sort_values(by= ['Rating', 'Last Updated']))


google_play_df['Last Updated'] = pd.to_datetime(google_play_df['Last Updated'])
sns.distplot(rating_vs_droid['Rating'])

#sns.barplot(x='Rating', y='Last Updated', data=rating_vs_droid)
82/199:
rating_vs_droid = games.groupby(['Android Ver', 'Last Updated']).mean() 
print(rating_vs_droid.sort_values(by= ['Rating', 'Last Updated']))


games['Last Updated'] = pd.to_datetime(games['Last Updated'])

sns.distplot(rating_vs_droid['Rating'])

#sns.barplot(x='Rating', y='Last Updated', data=rating_vs_droid)
82/200:
rating_vs_droid = games.groupby(['Android Ver', 'Last Updated']).mean() 
print(rating_vs_droid.sort_values(by= ['Rating', 'Last Updated']))


games['Last Updated'] = pd.to_datetime(games['Last Updated'])
games['year'] = games['date'].dt.year

sns.distplot(rating_vs_droid['Rating'])

sns.barplot(x='Rating', y='Last Updated', data=rating_vs_droid)
82/201:
rating_vs_droid = games.groupby(['Android Ver', 'Last Updated']).mean() 
print(rating_vs_droid.sort_values(by= ['Rating', 'Last Updated']))


games['Last Updated'] = pd.to_datetime(games['Last Updated'])
games['year'] = games['Last Updated'].dt.year

sns.distplot(rating_vs_droid['Rating'])

sns.barplot(x='Rating', y='Last Updated', data=rating_vs_droid)
82/202:
rating_vs_droid = games.groupby(['Android Ver', 'Last Updated']).mean() 
print(rating_vs_droid.sort_values(by= ['Rating', 'Last Updated']))


games['Last Updated'] = pd.to_datetime(games['Last Updated'])
games['year'] = games['Last Updated'].dt.year

sns.distplot(rating_vs_droid['Rating'])

#sns.barplot(x='Rating', y='Last Updated', data=rating_vs_droid)
82/203:
rating_vs_droid = games.groupby(['Android Ver', 'Last Updated']).mean() 
print(rating_vs_droid.sort_values(by= ['Rating', 'Last Updated']))


games['Last Updated'] = pd.to_datetime(games['Last Updated'])
games['year'] = games['Last Updated'].dt.year

sns.distplot(rating_vs_droid['Rating'])

sns.barplot(x='Rating', y='year', data=rating_vs_droid)
82/204:
rating_vs_droid = games.groupby(['Android Ver', 'Last Updated']).mean() 
print(rating_vs_droid.sort_values(by= ['Rating', 'Last Updated']))


games['Last Updated'] = pd.to_datetime(games['Last Updated'])
games['year'] = games['Last Updated'].dt.year

sns.distplot(rating_vs_droid['Rating'])

sns.barplot(x='Rating', y='year', data=games)
82/205:
rating_vs_droid = games.groupby(['Android Ver', 'Last Updated']).mean() 
print(rating_vs_droid.sort_values(by= ['Rating', 'Last Updated']))


games['Last Updated'] = pd.to_datetime(games['Last Updated'])
games['year'] = games['Last Updated'].dt.year

sns.distplot(rating_vs_droid['Rating'])

sns.barplot(x='year', y='Rating', data=games)
82/206:
rating_vs_droid = games.groupby(['Android Ver', 'Last Updated']).mean() 
print(rating_vs_droid.sort_values(by= ['Rating', 'Last Updated']))


games['Last Updated'] = pd.to_datetime(games['Last Updated'])
games['year'] = games['Last Updated'].dt.year



sns.barplot(x='year', y='Rating', data=games)
82/207: sns.distplot(rating_vs_droid['Rating'])
82/208:
rating_vs_droid = games.groupby(['Android Ver', 'Last Updated']).mean() 
print(rating_vs_droid.sort_values(by= ['Rating', 'Last Updated']))


games['Last Updated'] = pd.to_datetime(games['Last Updated'])
games['Last Update By Year'] = games['Last Updated'].dt.year


sns.barplot(x='Last Update By Year', y='Rating', data=games)
82/209:
rating_vs_droid = games.groupby(['Android Ver', 'Last Updated']).mean() 
print(rating_vs_droid.sort_values(by= ['Rating', 'Last Updated' ], ascending=False))


games['Last Updated'] = pd.to_datetime(games['Last Updated'])
games['Last Update By Year'] = games['Last Updated'].dt.year


sns.barplot(x='Last Update By Year', y='Rating', data=games)
82/210:
rating_vs_droid = games.groupby(['Android Ver', 'Last Updated']).mean() 


games['Last Updated'] = pd.to_datetime(games['Last Updated'])
games['Last Update By Year'] = games['Last Updated'].dt.year

print(rating_vs_droid.sort_values(by= ['Rating', 'Last Update By Year' ], ascending=False))

sns.barplot(x='Last Update By Year', y='Rating', data=games)
82/211:
rating_vs_droid = games.groupby(['Android Ver', 'Last Updated']).mean() 


games['Last Updated'] = pd.to_datetime(games['Last Updated'])
games['Last Update By Year'] = games['Last Updated'].dt.year

print(rating_vs_droid.sort_values(by= ['Rating', 'Last Update By Year' ]))

sns.barplot(x='Last Update By Year', y='Rating', data=games)
82/212:
rating_vs_droid = games.groupby(['Android Ver', 'Last Updated']).mean() 


games['Last Updated'] = pd.to_datetime(games['Last Updated'])
games['Last Update By Year'] = games['Last Updated'].dt.year

print(rating_vs_droid.sort_values(by= ['Rating', 'Last Update By Year' ], ascending=False))

sns.barplot(x='Last Update By Year', y='Rating', data=games)
82/213:
rating_vs_droid = games.groupby(['Android Ver', 'Last Updated']).mean() 


games['Last Updated'] = pd.to_datetime(games['Last Updated']) #Converts date fron datatype string to date
games['Last App Update By Year'] = games['Last Updated'].dt.year #extracts the year

print(rating_vs_droid.sort_values(by= ['Rating', 'Last App Update By Year' ], ascending=False)) #sorts dataframe by the review and year of app update

sns.barplot(x='Last Update By Year', y='Rating', data=games)
82/214:
rating_vs_droid = games.groupby(['Android Ver', 'Last Updated']).mean() 


games['Last Updated'] = pd.to_datetime(games['Last Updated']) #Converts date fron datatype string to date
games['Last App Update By Year'] = games['Last Updated'].dt.year #extracts the year

print(rating_vs_droid.sort_values(by= ['Rating', 'Last App Update By Year' ], ascending=False)) #sorts dataframe by the review and year of app update

sns.barplot(x='Last App Update By Year', y='Rating', data=games)
82/215: jupyter nbconvert
82/216:
rating_vs_droid = games.groupby(['Android Ver', 'Last Updated']).mean() 


games['Last Updated'] = pd.to_datetime(games['Last Updated']) #Converts date fron datatype string to date
games['Last App Update By Year'] = games['Last Updated'].dt.year #extracts the year

print(rating_vs_droid.sort_values(by= ['Rating', 'Last App Update By Year' ], ascending=False)) #sorts dataframe by the review and year of app update

sns.barplot(x='Last App Update By Year', y='Rating', data=games) #Barplot of Last App Update By Year vs. App Rating
82/217:
#print(google_play_df.isna().sum()) #Inital check for NaNs
#print(google_play_df['Rating'].unique()) #Shows all unique values to discover the placeholder data

google_play_df['Rating'] = google_play_df['Rating'].fillna(google_play_df['Rating'].median()) #fills the 1474 NaNs in rating with the median
google_play_df.isna().sum() #Final check for NaNs = 0
google_play_df.head()
82/218:
rating_vs_droid = games.groupby(['Android Ver', 'Last Updated']).mean() 


games['Last Updated'] = pd.to_datetime(games['Last Updated']) #Converts date fron datatype string to date
games['Last App Update By Year'] = games['Last Updated'].dt.year #extracts the year

print(rating_vs_droid.sort_values(by= ['Rating', 'Last App Update By Year' ], ascending=False)) #sorts dataframe by the review and year of app update

sns.barplot(x='Last App Update By Year', y='Rating', data=games) #Barplot of Last App Update By Year vs. App Rating
83/1:
# Your code here
import pandas as pd
import matplotlib.pyplot as plt
%matplotlib inline
83/2:
# Your code here
import pandas as pd
import matplotlib.pyplot as plt
%matplotlib inline

df = pd.read_csv('titanic.csv')
df.head()
83/3:
# Your code here
df.info()
83/4:
# Your code here
df['Age'].mean()
83/5:
# Your code here
df['Age'].mean().meadian().std()
83/6:
# Your code here
df['Age'].mean().median().std()
83/7:
# Your code here
df['Age'].mean()
df['Age'].median()
df['Age'].std()
83/8:
# Your code here
mean = df['Age'].mean()
median = df['Age'].median()
std = df['Age'].std()

print(mean)
print(median)
print(std)
83/9:
# Your code here
mean = df['Age'].mean()
median = df['Age'].median()
std = df['Age'].std()

print(mean)
print(median)
print(std)

df['Age'].plot.hist()
83/10:
# Your code here
df.isna().sum()
83/11:
# Your code here
df.isna().sum()
age_replace = df['Age'].fillna(df['Age'].mean())
print(age_replace)
83/12:
# Your code here

age_replace = df['Age'].fillna(df['Age'].mean())
print(age_replace)
df.isna().sum()
83/13:
# Your code here

df['Age'].fillna(df['Age'].mean())
#print(age_replace)
df.isna().sum()
83/14:
# Your code here

age_replace = df['Age'].fillna(df['Age'].mean())
print(age_replace)
83/15:
# Your code here

age_replace = df['Age'].fillna(df['Age'].mean())
print(age_replace)
mean = df['Age'].mean()
median = df['Age'].median()
std = df['Age'].std()

print(mean)
print(median)
print(std)
83/16:
# Your code here

age_replace = df['Age'].fillna(df['Age'].mean())
print(age_replace)
mean = age_replace.mean()
median = age_replace.median()
std = age_replace.std()

print(mean)
print(median)
print(std)
83/17:
# Your code here

age_replace = df['Age'].fillna(df['Age'].mean())
print(age_replace)
mean = age_replace.mean()
median = age_replace.median()
std = age_replace.std()

print(mean)
print(median)
print(std)

age_replace.plot.hist()
83/18:
# Your code here
median_replace = df['Age'].fillna(df['Age'].median())
83/19:
# Your code here
median_replace = df['Age'].fillna(df['Age'].median())
print(median_replace.mean())
print(median_replace.median())
print(median_replace.std())
83/20:
# Your code here
median_replace = df['Age'].fillna(df['Age'].median())
print(median_replace.mean())
print(median_replace.median())
print(median_replace.std())

median_replace.plot.hist()
83/21:
# Your code here
drop_row = df['Age'].dropna()
drop_row.head()
83/22:
# Your code here
drop_row = df['Age'].dropna()

print(drop_row.mean())
print(drop_row.median())
print(drop_row.std())
83/23:
# Your code here
drop_row = df['Age'].dropna()

print(drop_row.mean())
print(drop_row.median())
print(drop_row.std())

drop_row.plot.hist()
84/1:
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
%matplotlib inline
84/2:
heroes_df = pd.read_csv('heroes_information.csv')
powers_df = pd.read_csv('super_hero_powers.csv')

heroes_df.head()
powers_df.head()
84/3:
heroes_df = pd.read_csv('heroes_information.csv')
powers_df = pd.read_csv('super_hero_powers.csv')

print(heroes_df.head())
print(powers_df.head())
84/4:
heroes_df = pd.read_csv('heroes_information.csv')
powers_df = pd.read_csv('super_hero_powers.csv')

heroes_df.head()
powers_df.head()
84/5:
heroes_df = pd.read_csv('heroes_information.csv')
heroes_df.head()
84/6:
powers_df = pd.read_csv('super_hero_powers.csv')
powers_df.head()
84/7: heroes_df = heroes_df.drop(columns =['Unnamed: 0'])
84/8:
heroes_df = heroes_df.drop(columns =['Unnamed: 0'])
heroes_df.head()
84/9: heroes_df = heroes_df.drop(columns =['Unnamed: 0']).head()
84/10: heroes_df = heroes_df.drop(columns =['Unnamed: 0']).head()
84/11:
heroes_df = heroes_df.drop(['Unnamed: 0'], axis=1)
.head()
84/12: heroes_df = heroes_df.drop(['Unnamed: 0'], axis=1).head()
84/13:
heroes_df = heroes_df.drop(['Unnamed: 0'], axis=1)
heroes_df.head()
84/14:
heroes_df = heroes_df.drop('Unnamed: 0', axis=1)
heroes_df.head()
84/15:
heroes_df = heroes_df.drop('Unnamed: 0')
heroes_df.head()
84/16:
del heroes_df['Unnamed: 0']
heroes_df.head()
84/17:
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
%matplotlib inline
84/18:
heroes_df = pd.read_csv('heroes_information.csv')
heroes_df.head()
84/19:
powers_df = pd.read_csv('super_hero_powers.csv')
powers_df.head()
84/20:
del heroes_df['Unnamed: 0']
heroes_df.head()
84/21: heroes_df.shape
84/22:
heroes_df.shape #(734,10)
heroes_df.describe
84/23:
heroes_df.shape #(734,10)
heroes_df.describe()
84/24:
heroes_df.shape #(734,10)
heroes_df.info
#heroes_df.describe()
84/25:
heroes_df.shape #(734,10)
heroes_df.info()
#heroes_df.describe()
84/26:
heroes_df.shape #(734,10)
print(heroes_df.info())
print(heroes_df.describe())
84/27: powers_df.shape
84/28:
powers_df.shape #(667, 168)
print(powers_df.info())
print(powers_df.describe())
84/29:
powers_df.shape #(667, 168)
#print(powers_df.info())
print(powers_df.describe())
84/30:
powers_df.shape #(667, 168)
#print(powers_df.info())
powers_df.describe()
84/31:
powers_df.shape #(667, 168)
print(powers_df.info())
powers_df.describe()
84/32:
powers_df.shape #(667, 168)
powers_df.info()
#powers_df.describe()
84/33:
powers_df.shape #(667, 168)
powers_df.info()
powers_df.describe()
84/34:
#Heroes
heroes_df.isna().sum()
#['Publisher'].median()
84/35:
#Heroes
heroes_df.isna().sum()
heroes_df['Publisher']
#['Publisher'].median()
84/36:
#Heroes
heroes_df.isna().sum()
heroes_df['Publisher'].unique()
#['Publisher'].median()
84/37:
#Heroes
heroes_df.isna().sum()
#heroes_df['Publisher'].unique()
heroes_df['Publisher'].fillns(heroes_df['Publisher'].median())
84/38:
#Heroes
heroes_df.isna().sum()
#heroes_df['Publisher'].unique()
heroes_df['Publisher'].fillna(heroes_df['Publisher'].median())
84/39:
#Heroes
heroes_df.isna().sum()
#heroes_df['Publisher'].unique()
heroes_df['Publisher'].fillna(heroes_df['Publisher'].mode())
84/40:
#Heroes- Weight
heroes_df['Weight'].unique()
84/41:
#Heroes- Publisher
heroes_df.isna().sum()
#heroes_df['Publisher'].unique()
heroes_df['Publisher'] = heroes_df['Publisher'].fillna(heroes_df['Publisher'].mode())
84/42:
#Heroes- Weight
heroes_df['Weight'] = heroes_df['Weight'].dropna()
84/43: heroes_df.info()
84/44:
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
%matplotlib inline
84/45:
heroes_df = pd.read_csv('heroes_information.csv')
heroes_df.head()
84/46:
powers_df = pd.read_csv('super_hero_powers.csv')
powers_df.head()
84/47:
del heroes_df['Unnamed: 0']
heroes_df.head()
84/48:
heroes_df.shape #(734,10)
print(heroes_df.info())
print(heroes_df.describe())
84/49:
powers_df.shape #(667, 168)
powers_df.info()
powers_df.describe()
84/50:
#Heroes- Publisher
heroes_df.isna().sum()
#heroes_df['Publisher'].unique()
heroes_df['Publisher'] = heroes_df['Publisher'].fillna(heroes_df['Publisher'].mode())
84/51:
#Heroes- Weight
heroes_df['Weight'] = heroes_df['Weight'].dropna()
84/52: heroes_df.info()
84/53: powers_df.info()
84/54: powers_df.unique()
84/55:
dups = powers_df[powers_df.duplicated()]
print(len(duplicates))
powers_df.head()
84/56:
dups = powers_df[powers_df.duplicated()]
print(len(dups))
powers_df.head()
84/57:
#Powers
duplicated = powers_df[powers_df.duplicated()]
print(len(duplicated))
powers_df.head()
84/58:
#Powers
duplicated_powers = powers_df[powers_df.duplicated()]
print(len(duplicated_powers))
powers_df.head()
84/59:
duplicated_heroes = heroes_df[heroes_df.duplicated()]
print(len(duplicated_heroes))
duplicated_heroes.head()
84/60:
duplicated_heroes = heroes_df[heroes_df.duplicated()]
print(len(duplicated_heroes))
duplicated_heroes.head()

duplicated_heroes.dropna()
84/61:
duplicated_heroes = heroes_df[heroes_df.duplicated()]
#print(len(duplicated_heroes))


duplicated_heroes.dropna()
duplicated_heroes.head()
84/62:
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
%matplotlib inline
84/63:
heroes_df = pd.read_csv('heroes_information.csv')
heroes_df.head()
84/64:
powers_df = pd.read_csv('super_hero_powers.csv')
powers_df.head()
84/65:
del heroes_df['Unnamed: 0']
heroes_df.head()
84/66:
heroes_df.shape #(734,10)
print(heroes_df.info())
print(heroes_df.describe())
84/67:
powers_df.shape #(667, 168)
powers_df.info()
powers_df.describe()
84/68:
#Heroes- Publisher
heroes_df.isna().sum()
#heroes_df['Publisher'].unique()
heroes_df['Publisher'] = heroes_df['Publisher'].fillna(heroes_df['Publisher'].mode())
84/69:
#Heroes- Weight
heroes_df['Weight'] = heroes_df['Weight'].dropna()
84/70:
#Heroes
duplicated_heroes = heroes_df[heroes_df.duplicated()]
#print(len(duplicated_heroes))

duplicated_heroes.dropna() #Extraneous value, heights and weights can't be negative
duplicated_heroes.head()
84/71:
#Powers
duplicated_powers = powers_df[powers_df.duplicated()]
print(len(duplicated_powers))
powers_df.head()
84/72:
#Heroes
for col in heroes_df.columns:
    print(col, '\n', heroes_df[col].value_counts(normalize=True).head(), '\n\n')
84/73:
#Powers
duplicated_powers = powers_df[powers_df.duplicated()]
print(len(duplicated_powers))
powers_df.head()
84/74:
for col in powers_df.columns:
    print(col, '\n',powers_df[col].value_counts(normalize=True).head(), '\n\n')
86/1:
# Your code here
import pandas as pd

import sqlite3
conn = sqlite3.connect('planets.db')
cur = conn.cursor()
86/2:
# Your code here
cur.execute("""SELECT name, color FROM planets;""")
df = pd.DataFrame(cur.fetchall())
df.head()
86/3:
# Your code here
cur.execute("""SELECT name, color FROM planets;""")
df = pd.DataFrame(cur.fetchall())
df.columns = [x[0] for x in cur.description]
df.head()
86/4:
# Your code here
cur.execute("""SELECT * FROM planets WHERE mass > 1.00""")
df = pd.DataFrame(cur.fetchall())
df.columns = x[0] for x in cur.description]
df
86/5:
# Your code here
cur.execute("""SELECT * FROM planets WHERE mass > 1.00""")
df = pd.DataFrame(cur.fetchall())
df.columns = [x[0] for x in cur.description]
df
86/6:
# Your code here
cur.execute("""SELECT name, mass FROM planets WHERE mass <= 1.00;""")
df = pd.DataFrame(cur.fetchall())
df.columns = [x[0] for x in cur.description]
df
86/7:
# Your code here
cur.execute("""SELECT name, color FROM planets WHERE num_or_moons > 10;""")
df = pd.DataFrame(cur.fetchall())
df.columns = [x[0] for x in cur.description]
df
86/8:
# Your code here
cur.execute("""SELECT name, color FROM planets WHERE num_of_moons > 10;""")
df = pd.DataFrame(cur.fetchall())
df.columns = [x[0] for x in cur.description]
df
86/9:
# Your code here
cur.execute("""SELECT name FROM planets WHERE num_of_moons >= 1 AND mass < 1;""")
df = pd.DataFRame(cur.fetchall())
df.columns = [x[0] for x cur.description]
df
86/10:
# Your code here
cur.execute("""SELECT name FROM planets WHERE num_of_moons >= 1 AND mass < 1;""")
df = pd.DataFRame(cur.fetchall())
df.columns = [x[0] for x in cur.description]
df
86/11:
# Your code here
cur.execute("""SELECT name FROM planets WHERE num_of_moons >= 1 AND mass < 1;""")
df = pd.DataFrame(cur.fetchall())
df.columns = [x[0] for x in cur.description]
df
86/12:
# Your code here
cur.execute("""SELECT name, color FROM planets 
               WHERE color = 'blue'OR color = 'light blue'
                OR color = 'dark blue';""")
df = pd.DataFrame(cur.fetchall())
df.columns = [x[0] for x in cur.description]
df
86/13:
# Your code here
curr.execute("""SELECT name, color, num_of_moons FROM planets
                WHERE rings = 0
                ORDER BY mass DESC
                LIMIT 4;""")
df = pd.DataFrame(cur.fetchall())
df.columns = [x[0] for x in cur.description]
df
86/14:
# Your code here
cur.execute("""SELECT name, color, num_of_moons FROM planets
                WHERE rings = 0
                ORDER BY mass DESC
                LIMIT 4;""")
df = pd.DataFrame(cur.fetchall())
df.columns = [x[0] for x in cur.description]
df
87/1:
#Your code here; import sqlite, create a connection and then a cursor object.
import sqlite3
conn = sqlite3.connect('dog.db')
cur = conn.cursor()
87/2:
#Your code here
cur.execute("""SELECT name, breed FROM dogs WHERE gender = 'F';""").fetchall()
87/3:
#Your code here
cur.execute("""SELECT name, breed FROM dog WHERE gender = 'F';""").fetchall()
87/4:
#Your code here; import sqlite, create a connection and then a cursor object.
import sqlite3
conn = sqlite3.connect('dogs.db')
cur = conn.cursor()
87/5:
#Your code here
cur.execute("""SELECT name, breed FROM dog WHERE gender = 'F';""").fetchall()
87/6:
#Your code here
cur.execute("""SELECT name, breed FROM dogs WHERE gender = 'F';""").fetchall()
87/7:
#Your code here
cur.execute("""SELECT name FROM dogs ORDER BY;""").fetchall()
87/8:
#Your code here
cur.execute("""SELECT name FROM dogs ORDER BY name;""").fetchall()
87/9:
#Your code here
cur.execute("""SELECT * FROM dogs WHERE name IS null;""").fetchall()
87/10: #Your code here
87/11:
#Your code here
cur.execute("""SELECT name, breed FROM dogs WHERE hungry = 1 ORDER BY age""").fetchall()
87/12:
#Your code here
cur.execute("""SELECT name, age, temperament FROM dogs ORDERBY age DESC LIMIT 1""").fetchall()
87/13:
#Your code here
cur.execute("""SELECT name, age, temperament FROM dogs ORDER BY age DESC LIMIT 1""").fetchall()
87/14:
#Your code here
cur.execute("""SELECT * FROM dogs ORDER BY age LIMIT 3;""").fetchall()
87/15:
#Your code here
cur.execute("""SELECT name, breed FROM dogs WHERE age BETWEEN 5 and 10 ORDER BY age DESC;""").fetchall()
87/16:
#Your code here
cur.execute("""SELECT name, age, hungry FROM dogs WHERE age BETWEEN 2 AND 7 ORDER BY name;""").fetchall()
88/1:
# Your code here
import sqlite3
import pandas as pd

conn = sqlite3.Connection('babe_ruth.db')
cur = conn.cursor()
88/2:
# Your code here
cur.execute("""SELECT COUNT(year) FROM babe_ruth_stats;""")
88/3:
# Your code here
cur.execute("""SELECT COUNT(year) FROM babe_ruth_stats;""")
df = pd.DataFrame(cur.fetch_all())
df.columns = [x[0] for x in cur.description]
df.head()
88/4:
# Your code here
import sqlite3
import pandas as pd

conn = sqlite3.Connection('babe_ruth.db')
cur = conn.cursor()
88/5:
# Your code here
cur.execute("""SELECT COUNT(year) FROM babe_ruth_stats;""")
df = pd.DataFrame(cur.fetch_all())
df.columns = [x[0] for x in cur.description]
df.head()
88/6:
# Your code here
cur.execute("""SELECT COUNT(year) FROM babe_ruth_stats;""")
df = pd.DataFrame(cur.fetchall())
df.columns = [x[0] for x in cur.description]
df.head()
88/7:
# Your code here
cur.execute("""SELECT team, COUNT(year) FROM babe_ruth_stats
                      WHERE team = 'NY';""")
df = pd.DataFrame(cur.fetchall())
df.columns = [x[0] for x in cur.description]
df.head()
88/8:
# Your code here
cur.execute("""SELECT * FROM babe_ruth_stats
                      HAVING max(HR);""")
df = pd.DataFrame(cur.fetchall())
df.columns = [x[0] for x in cur.description]
df.head()
88/9:
# Your code here
cur.execute("""SELECT * FROM babe_ruth_stats
                      GROUP BY year
                      HAVING max(HR);""")
df = pd.DataFrame(cur.fetchall())
df.columns = [x[0] for x in cur.description]
df.head()
88/10:
# Your code here
cur.execute("""SELECT * FROM babe_ruth_stats
                      GROUP BY year
                      HAVING max(HR)
                      ORDER BY max(HR)
                      LIMIT 1;""")
df = pd.DataFrame(cur.fetchall())
df.columns = [x[0] for x in cur.description]
df.head()
88/11:
# Your code here
cur.execute("""SELECT * FROM babe_ruth_stats
                      GROUP BY year
                      HAVING max(HR)
                      ORDER BY max(HR) DESC
                      LIMIT 1;""")
df = pd.DataFrame(cur.fetchall())
df.columns = [x[0] for x in cur.description]
df.head()
88/12:
# Your code here
cur.execute("""SELECT * FROM babe_ruth_stats
                      GROUP BY year
                      HAVING min(HR)
                      ORDER BY min(HR)
                      LIMIT 1""")
df = pd.DataFrame(cur.fetchall())
df.columns = [x[0] for x in cur.description]
df.head()
88/13:
# Your code here
cur.execute("""SELECT SUM(HR) FROM babe_ruth_stats;""")
df = pd.DataFrame(cur.fetchall())
df.columns = [x[0] for x in cur.description]
df.head()
88/14:
# Your code here
cur.execute("""SELECT * FROM babe_ruth_stats
                      WHERE games >= 100
                      GROUP BY year
                      HAVING SUM(HR)
                      ORDER BY year
                      LIMIT 5;""")
df = pd.DataFrame(cur.fetchall())
df.columns = [x[0] for x in cur.description]
df.head()
88/15:
# Your code here
cur.execute("""SELECT * FROM babe_ruth_stats
                      GROUP BY year
                      HAVING min(HR)
                      ORDER BY min(HR)
                      """)
df = pd.DataFrame(cur.fetchall())
df.columns = [x[0] for x in cur.description]
df.head()
88/16:
# Your code here
cur.execute("""SELECT * FROM babe_ruth_stats
                      GROUP BY year
                      HAVING min(HR)
                      ORDER BY min(HR)
                      LIMIT 1""")
df = pd.DataFrame(cur.fetchall())
df.columns = [x[0] for x in cur.description]
df.head()
88/17:
# Your code here
cur.execute("""SELECT * FROM babe_ruth_stats
                      WHERE games > 100
                      ORDER BY HR
                      LIMIT 5;""")
df = pd.DataFrame(cur.fetchall())
df.columns = [x[0] for x in cur.description]
df.head()
88/18:
# Your code here
cur.execute("""SELECT AVG(AVG) AS career_average
                      FROM babe_ruth_stats;""")
df = pd.DataFrame(cur.fetchall())
df.columns = [x[0] for x in cur.description]
df.head()
88/19:
# Your code here
cur.execute("""SELECT SUM(years) AS num_years
                      SUM(hits) AS total_hits
                      FROM babe_ruth_stats
                      ORDER BY team;""")
df = pd.DataFrame(cur.fetchall())
df.columns = [x[0] for x in cur.description]
df.head()
88/20:
# Your code here
cur.execute("""SELECT SUM(years) AS num_years,
                      SUM(hits) AS total_hits
                      FROM babe_ruth_stats
                      ORDER BY team;""")
df = pd.DataFrame(cur.fetchall())
df.columns = [x[0] for x in cur.description]
df.head()
88/21:
# Your code here
cur.execute("""SELECT SUM(year) AS num_years,
                      SUM(hits) AS total_hits
                      FROM babe_ruth_stats
                      ORDER BY team;""")
df = pd.DataFrame(cur.fetchall())
df.columns = [x[0] for x in cur.description]
df.head()
88/22:
# Your code here
cur.execute("""SELECT hits + BB AS on_base, year
                      FROM babe_ruth_stats
                      WHERE on_base > 300;""")
df = pd.DataFrame(cur.fetchall())
df.columns = [x[0] for x in cur.description]
df.head()
90/1:
# Your code here
import sqlite3
import pandas as pd

conn = sqlite3.connect('data.sqlite')
cur = conn.cursor()
90/2:
# Your code here
cur.execute("""SELECT lastName, firstName FROM employees
                       JOIN offices
                       USING(officeCode) 
                       WHERE city = 'Boston';""")
df = pd.DataFrame(curr.fetchall())
df.columns = [i[0] for i in cur.description]
df.head()
90/3:
# Your code here
cur.execute("""SELECT lastName, firstName FROM employees
                       JOIN offices
                       USING(officeCode) 
                       WHERE city = 'Boston';""")
df = pd.DataFrame(cur.fetchall())
df.columns = [i[0] for i in cur.description]
df.head()
90/4:
# Your code here
cur.execute("""SELECT employeeNumber FROM employees
                      JOIN offices
                      USING(officeCode)
                      WHERE employeeNumber IS null
                      GROUP BY officeCode;""")
df = pd.DataFrame(cur.fetchall())
df.columns = [i[0] for i in cur.description]
df.head()
90/5:
# Your code here
cur.execute("""SELECT employeeNumber FROM employees
                      JOIN offices
                      USING(officeCode)
                      WHERE employeeNumber IS null
                      GROUP BY city;""")
df = pd.DataFrame(cur.fetchall())
df.columns = [i[0] for i in cur.description]
df.head()
90/6:
# Your code here
cur.execute("""SELECT lastName, firstName FROM employees
                      JOIN offices
                      USING(officeCode)
                      WHERE employeeNumber IS null
                      GROUP BY city;""")
df = pd.DataFrame(cur.fetchall())
df.columns = [i[0] for i in cur.description]
df.head()
90/7:
# Your code here
cur.execute("""SELECT lastName, firstName FROM employees
                      JOIN offices
                      USING(officeCode)
                      GROUP BY officeCode
                      HAVING employeeNumber = 0;""")
df = pd.DataFrame(cur.fetchall())
df.columns = [i[0] for i in cur.description]
df.head()
90/8:
# Your code here
cur.execute("""SELECT lastName, firstName FROM employees
                       JOIN offices
                       USING(officeCode) 
                       WHERE city = 'Boston';""")
df = pd.DataFrame(cur.fetchall())
df.columns = [i[0] for i in cur.description]
df.head()
90/9:
# Your code here
cur.execute("""SELECT o.officeCode, o.city, COUNT(e.employeeNumber) 
                      AS n_employees
                      FROM offices AS o
                      LEFT JOIN employees AS e
                      USING(officeCode)
                      GROUP BY officeCode
                      HAVING n_employees = 0;""")
df = pd.DataFrame(cur.fetchall())
df.columns = [i[0] for i in cur.description]
df.head()
90/10:
# Your code here
#Display the customers who have paid over $100

cur.execute("""SELECT c.customerNumber, SUM(p.amount) AS total_spend
                      FROM customers as c
                      LEFT JOIN payments AS p
                      USING(amount)
                      GROUP BY customerNumber
                      HAVING SUM(amount) > 100;""")
df = pd.DataFrame(cur.fetchall())
df.columns = [i[0] for i in cur.description]
df.head()
90/11:
# Your code here
#Display the customers who have paid over $100

cur.execute("""SELECT c.customerNumber, SUM(p.amount) AS total_spend
                      FROM customers as c
                      LEFT JOIN payments AS p
                      USING(customerNumber)
                      GROUP BY customerNumber
                      HAVING SUM(amount) > 100;""")
df = pd.DataFrame(cur.fetchall())
df.columns = [i[0] for i in cur.description]
df.head()
90/12:
# Your code here
#How many times was each productcode purchased?

cur.execute("""SELECT p.productCode, SUM(o.quantityOrdered)
                      FROM products AS p
                      JOIN orderdetails
                      USING(productCode)
                      ORDER BY productCode;""")
df = pd.DataFrame(cur.fetchall())
df.columns = [i[0] for i in cur.description]
df.head()
90/13:
# Your code here
#How many times was each productcode purchased?

cur.execute("""SELECT p.productCode, SUM(o.quantityOrdered)
                      FROM products AS p
                      JOIN orderdetails AS o
                      USING(productCode)
                      ORDER BY productCode;""")
df = pd.DataFrame(cur.fetchall())
df.columns = [i[0] for i in cur.description]
df.head()
90/14:
# Your code here
#How many employees DONT live in Boston?

cur.execute("""SELECT o.officeCode, COUNT(e.employeeNumber)
                    FROM offices AS o
                    JOIN employees AS e
                    USING(officeCode)
                    WHERE city != Boston
                    ORDER BY city;""")
df = pd.DataFrame((cur.fetchall()))
df.columns = [i[0] for i in cur.description]
df.head()
90/15:
# Your code here
#How many employees DONT live in Boston?

cur.execute("""SELECT o.officeCode, COUNT(e.employeeNumber)
                    FROM offices AS o
                    JOIN employees AS e
                    USING(officeCode)
                    WHERE city IS NOT Boston
                    ORDER BY city;""")
df = pd.DataFrame((cur.fetchall()))
df.columns = [i[0] for i in cur.description]
df.head()
90/16:
# Your code here
#How many employees DONT live in Boston?

cur.execute("""SELECT o.officeCode, COUNT(e.employeeNumber)
                    FROM offices AS o
                    LEFT JOIN employees AS e
                    USING(officeCode)
                    WHERE city IS NOT Boston
                    ORDER BY city;""")
df = pd.DataFrame((cur.fetchall()))
df.columns = [i[0] for i in cur.description]
df.head()
90/17:
# Your code here
#How many employees DONT live in Boston?

cur.execute("""SELECT o.officeCode, COUNT(e.employeeNumber)
                    FROM offices AS o
                    LEFT JOIN employees AS e
                    USING(officeCode)
                    WHERE city != Boston;
                    """)
df = pd.DataFrame((cur.fetchall()))
df.columns = [i[0] for i in cur.description]
df.head()
90/18:
# Your code here
import sqlite3
import pandas as pd

conn = sqlite3.connect('data.sqlite')
cur = conn.cursor()
90/19:
# Your code here
cur.execute("""SELECT lastName, firstName FROM employees
                       JOIN offices
                       USING(officeCode) 
                       WHERE city = 'Boston';""")
df = pd.DataFrame(cur.fetchall())
df.columns = [i[0] for i in cur.description]
df.head()
90/20:
# Your code here
cur.execute("""SELECT o.officeCode, o.city, COUNT(e.employeeNumber) 
                      AS n_employees
                      FROM offices AS o
                      LEFT JOIN employees AS e
                      USING(officeCode)
                      GROUP BY officeCode
                      HAVING n_employees = 0;""")
df = pd.DataFrame(cur.fetchall())
df.columns = [i[0] for i in cur.description]
df.head()
90/21:
# Your code here
#Display the customers who have paid over $100

cur.execute("""SELECT c.customerNumber, SUM(p.amount) AS total_spend
                      FROM customers as c
                      LEFT JOIN payments AS p
                      USING(customerNumber)
                      GROUP BY customerNumber
                      HAVING SUM(amount) > 100;""")
df = pd.DataFrame(cur.fetchall())
df.columns = [i[0] for i in cur.description]
df.head()
90/22:
# Your code here
#How many times was each productcode purchased?

cur.execute("""SELECT p.productCode, SUM(o.quantityOrdered)
                      FROM products AS p
                      JOIN orderdetails AS o
                      USING(productCode)
                      ORDER BY productCode;""")
df = pd.DataFrame(cur.fetchall())
df.columns = [i[0] for i in cur.description]
df.head()
90/23:
# Your code here
#How many employees DONT live in Boston?

cur.execute("""SELECT o.officeCode, COUNT(e.employeeNumber)
                    FROM offices AS o
                    LEFT JOIN employees AS e
                    USING(officeCode)
                    WHERE city = Boston;
                    """)
df = pd.DataFrame((cur.fetchall()))
df.columns = [i[0] for i in cur.description]
df.head()
90/24:
# Your code here
#How many employees DONT live in Boston?

cur.execute("""SELECT o.officeCode, COUNT(e.employeeNumber)
                    FROM offices AS o
                    LEFT JOIN employees AS e
                    USING(officeCode)
                    WHERE city != 'Boston';
                    """)
df = pd.DataFrame((cur.fetchall()))
df.columns = [i[0] for i in cur.description]
df.head()
90/25:
# Your code here
#How many employees DONT live in Boston?

cur.execute("""SELECT o.officeCode, o.city, COUNT(e.employeeNumber)
                    FROM offices AS o
                    LEFT JOIN employees AS e
                    USING(officeCode)
                    WHERE city != 'Boston';
                    """)
df = pd.DataFrame((cur.fetchall()))
df.columns = [i[0] for i in cur.description]
df.head()
91/1:
# Your code here
import sqlite3
import pandas as pd

conn = sqlite3.connect('data.sqlite')
cur = conn.cursor()
91/2:
# Your code here
cur.execute("""SELECT e.firstName, e.lastName, o.city, o.state
                      FROM employees AS e
                      LEFT JOIN offices as o
                      USING(officeCode)
                      ORDER BY first name, last name;""")
df = pd.DataFrame(cur.fetchall())
df.column = [i[0] for i in cur.description]
df.head()
91/3:
# Your code here
cur.execute("""SELECT e.firstName, e.lastName, o.city, o.state
                      FROM employees AS e
                      LEFT JOIN offices as o
                      USING(officeCode)
                      ORDER BY firstName, lastName;""")
df = pd.DataFrame(cur.fetchall())
df.column = [i[0] for i in cur.description]
df.head()
91/4:
# Your code here
cur.execute("""SELECT e.firstName, e.lastName, o.city, o.state
                      FROM employees AS e
                      LEFT JOIN offices as o
                      USING(officeCode)
                      ORDER BY firstName, lastName;""")
df = pd.DataFrame(cur.fetchall())
df.columns = [i[0] for i in cur.description]
df.head()
91/5:
# Your code here
cur.execute("""SELECT * FROM customers
            JOIN orders
            USING(customerNumber);""")
df = pd.DataFrame(cur.fetchall())
df.columns = [i[0] for i in cur.description]
df.head()
91/6:
# Your code here
cur.execute("""SELECT * FROM customers
                JOIN payments
                USING(customerNumber)
                ORDER BY amount DESC;""")
df = pd.DataFrame(cur.fetchall())
df.columns = [i[0] for i in cur.description]
df.head()
91/7:
# Your code here
cur.execute("""SELECT e.firstName, e.lastName, o.city, o.state
                      FROM employees AS e
                      LEFT JOIN offices as o
                      USING(officeCode)
                      ORDER BY firstName, lastName;""")
df = pd.DataFrame(cur.fetchall())
df.columns = [i[0] for i in cur.description]
print('Number of results:', len(df))
df.head()
91/8:
# Your code here
cur.execute("""SELECT * FROM customers
            JOIN orders
            USING(customerNumber);""")
df = pd.DataFrame(cur.fetchall())
df.columns = [i[0] for i in cur.description]
print('Number of results:', len(df))
df.head()
91/9:
# Your code here
cur.execute("""SELECT * FROM customers
                JOIN payments
                USING(customerNumber)
                ORDER BY amount DESC;""")
df = pd.DataFrame(cur.fetchall())
df.columns = [i[0] for i in cur.description]
print('Number of results:', len(df))
df.head()
91/10:
# Your code here
cur.execute("""SELECT * FROM customers
               JOIN orders
               USING(customerNumber)
               JOIN orderdetails
               USING(orderNUmber)
               JOIN products
               USING(productCode)
               ORDER BY orderDate DESC;""")
df = pd.DataFrame(cur.fetchall())
df.columns = [i[0] for i in cur.description]
print('Number of results:', len(df))
df.head()
93/1:
# Your code here; import the necessary packages
import sqlite3
import pandas as pd
93/2:
# Your code here; create the connection and cursor
conn = sqlite3.Connection('data.sqlite')
cur = conn.cursor()
93/3:
# Your code here; use a subquery. No join is necessary 
cur.execute("""SELECT customerNumber, contactLast, contactFirstName
                    FROM customers WHERE customerNumber IN (SELECT customerNumber 
                                                                   FROM orders
                                                                   WHERE orderDate = ;'2003-01-31');""")
93/4:
# Your code here; use a subquery. No join is necessary 
cur.execute("""SELECT customerNumber, contactLast, contactFirstName
                    FROM customers WHERE customerNumber IN (SELECT customerNumber 
                                                                   FROM orders
                                                                   WHERE orderDate = '2003-01-31');""")
93/5:
# Your code here; use a subquery. No join is necessary 
cur.execute("""SELECT customerNumber, contactLastName, contactFirstName
                    FROM customers WHERE customerNumber IN (SELECT customerNumber 
                                                                   FROM orders
                                                                   WHERE orderDate = '2003-01-31');""")
93/6:
# Your code here; use a subquery. No join is necessary 
cur.execute("""SELECT customerNumber, contactLastName, contactFirstName
                    FROM customers WHERE customerNumber IN (SELECT customerNumber 
                                                                   FROM orders
                                                                   WHERE orderDate = '2003-01-31');""")
df = pd.DataFrame(cur.fetchall())
df.columns = [i[0] for i in cur.description]
df.head()
93/7:
# Your code here
cur.execute("""SELECT productName, productCode FROM products
                      WHERE productCode IN (SELECT productCode, SUM(quantityOrdered) 
                                            FROM orderdetails
                                            JOIN products
                                            USING(productCode)
                                            GROUP BY productCode
                                            ORDER BY SUM(quantity));""")
93/8:
# Your code here
cur.execute("""SELECT productName, productCode FROM products
                      WHERE productCode IN (SELECT productCode, SUM(quantityOrdered) 
                                            FROM orderdetails
                                            JOIN products
                                            USING(productCode)
                                            GROUP BY productCode
                                            ORDER BY SUM(quanity));""")
93/9:
# Your code here
cur.execute("""SELECT productName, productCode FROM products
                      WHERE productCode IN (SELECT productCode, SUM(quantityOrdered) 
                                            FROM orderdetails
                                            JOIN products
                                            USING(productCode)
                                            GROUP BY productCode
                                            ORDER BY SUM(quantityOrdered));""")
93/10:
# Your code here
cur.execute("""SELECT productName, productCode FROM products
                      WHERE productCode IN (SELECT productCode 
                                            FROM orderdetails
                                            JOIN products
                                            USING(productCode)
                                            GROUP BY productCode
                                            ORDER BY SUM(quantityOrdered));""")
93/11:
# Your code here
cur.execute("""SELECT productName, productCode FROM products
                      WHERE productCode IN (SELECT productCode 
                                            FROM orderdetails
                                            JOIN products
                                            USING(productCode)
                                            GROUP BY productCode
                                            ORDER BY SUM(quantityOrdered));""")
df = pd.DataFrame(cur.fetchall())
df.columns = [x[0] for in x cur.description]
df
93/12:
# Your code here
cur.execute("""SELECT productName, productCode FROM products
                      WHERE productCode IN (SELECT productCode 
                                            FROM orderdetails
                                            JOIN products
                                            USING(productCode)
                                            GROUP BY productCode
                                            ORDER BY SUM(quantityOrdered));""")
df = pd.DataFrame(cur.fetchall())
df.columns = [x[0] for x in cur.description]
df
93/13:
# Your code here
cur.execute("""SELECT productName, productCode FROM products
                      WHERE productCode IN (SELECT productCode 
                                            FROM orderdetails
                                            JOIN products
                                            USING(productCode)
                                            GROUP BY productName
                                            ORDER BY SUM(quantityOrdered));""")
df = pd.DataFrame(cur.fetchall())
df.columns = [x[0] for x in cur.description]
df
93/14:
# Your code here:
# Hint: because one of the tables we'll be joining has duplicate customer numbers, you should use DISTINCT
cur.execute("""SELECT COUNT(DISTINCT customerNumber), orderNumber 
               FROM orders
               JOIN orderdetails
               USING(orderNumber)
               JOIN products
               USING(productCode)
               ORDER BY customerNumber DESC
               """)
93/15:
# Your code here:
# Hint: because one of the tables we'll be joining has duplicate customer numbers, you should use DISTINCT
cur.execute("""SELECT COUNT(DISTINCT customerNumber), orderNumber 
               FROM orders
               JOIN orderdetails
               USING(orderNumber)
               JOIN products
               USING(productCode)
               ORDER BY customerNumber DESC
               """)
df = pd.DataFrame(cur.fetchall())
df.columns = [i[0] for i in cur.description]
df
93/16:
# Your code here:
# Hint: because one of the tables we'll be joining has duplicate customer numbers, you should use DISTINCT
cur.execute("""SELECT COUNT(DISTINCT customerNumber), p.productName 
               FROM orders
               JOIN orderdetails
               USING(orderNumber)
               JOIN products AS p
               USING(productCode)
               ORDER BY COUNT(DISTINCT customerNumber) DESC
               """)
df = pd.DataFrame(cur.fetchall())
df.columns = [i[0] for i in cur.description]
df
94/1:
# Your code here
import pandas as pd
import numpy as np

import matplotlib.pyplot as plt
%matplotlib inline
94/2: df = read_csv('titanic.csv')
94/3: df = pd.read_csv('titanic.csv')
94/4:
df = pd.read_csv('titanic.csv')
df.head()
94/5:
# Preview values first to ensure proper encoding when slicing
df.loc[df['Pclass'] == 2 and df['Pclass'] == 3]
df.head()
94/6:
# Preview values first to ensure proper encoding when slicing
class_df = df.loc[df['Pclass'] == 2 and df['Pclass'] == 3]
class_df.head()
94/7:
# Preview values first to ensure proper encoding when slicing
class_df = df.loc[df['Pclass'] == 2, df['Pclass'] == 3]
class_df.head()
94/8:
# Preview values first to ensure proper encoding when slicing
class_df = df.loc[df['Pclass'] == 2 & df['Pclass'] == 3]
class_df.head()
94/9:
# Preview values first to ensure proper encoding when slicing
class_df = df[df['Pclass'] == 2 & df['Pclass'] == 3]
class_df.head()
94/10:
df = pd.read_csv('titanic.csv', index_col=0)
df.head()
94/11:
# Preview values first to ensure proper encoding when slicing
df['Pclass'].unique()
94/12:
no_first_class_df = df[df['Pclass'] == '2' & df['Pclass'] == '3']
no_first_class_df.head()
94/13:
no_first_class_df = df[df['Pclass'].isin(['2','3'])
no_first_class_df.head()
94/14:
# Preview values first to ensure proper encoding when slicing
df['Pclass'].unique()
94/15: no_first_class_df = df[df['Pclass'].isin(['2','3'])
94/16:
no_first_class_df = df[df['Pclass'].isin(['2','3'])]
no_first_class_df.head()
94/17: fares_50_to_100_df = df[(df['Fare'] >= 50) & (df['Fare'] => 100)]
94/18: fares_50_to_100_df = df[(df['Fare'] >= 50) & (df['Fare'] <= 100)]
94/19:
fares_50_to_100_df = df[(df['Fare'] >= 50) & (df['Fare'] <= 100)]
fares_50_to_100_df.head()
94/20:
fares_50_to_100_df['Fare'].hist()
plt.xlabel('Fare', color='red')
plt.ylabel('Frequency', fontsize=12) 
plt.title('Distribution of Fares');
94/21:
# Checking column names for reference
df['Sex'].unique()
94/22: poor_male_survivors_df = df[(df['Sex'] == 'male') & (df['Pclass'] == '2' | df['Pclass'] == '3')]
94/23:
#poor_male_survivors_df = df[(df['Sex'] == 'male') & (df['Pclass'] == '2' | df['Pclass'] == '3')]
poor_male_survivors_df = df.isin({'Pclass': [2,3]})
poor_male_survivors_df
94/24:
#poor_male_survivors_df = df[(df['Sex'] == 'male') & (df['Pclass'] == '2' | df['Pclass'] == '3')]
poor_male_survivors_df = df['Pclass'].isin({'Pclass': [2,3]})
poor_male_survivors_df
94/25:
#poor_male_survivors_df = df[(df['Sex'] == 'male') & (df['Pclass'] == '2' | df['Pclass'] == '3')]
poor_male_survivors_df = df[df.isin({'Pclass': [2,3]})]
poor_male_survivors_df
94/26:
#poor_male_survivors_df = df[(df['Sex'] == 'male') & (df['Pclass'] == '2' | df['Pclass'] == '3')]
poor_male_survivors_df = [df.isin({'Pclass': [2,3]})]
poor_male_survivors_df
94/27:
#poor_male_survivors_df = df[(df['Sex'] == 'male') & (df['Pclass'] == '2' | df['Pclass'] == '3')]
poor_male_survivors_df = df[(df['Pclass'].isin(['2','3']) & df['Sex'].isin('male')
poor_male_survivors_df
94/28:
#poor_male_survivors_df = df[(df['Sex'] == 'male') & (df['Pclass'] == '2' | df['Pclass'] == '3')]
poor_male_survivors_df = df[(df['Pclass'].isin(['2','3']) & df['Sex'].isin('male'))
poor_male_survivors_df.head()
94/29:
#poor_male_survivors_df = df[(df['Sex'] == 'male') & (df['Pclass'] == '2' | df['Pclass'] == '3')]
poor_male_survivors_df = df[(df['Pclass'].isin(['2','3']) & df['Sex'].isin('male'))]
poor_male_survivors_df.head()
94/30:
#poor_male_survivors_df = df[(df['Sex'] == 'male') & (df['Pclass'] == '2' | df['Pclass'] == '3')]
poor_male_survivors_df = df[(df['Pclass'].isin(['2','3']) & df['Sex'].isin(['male']))]
poor_male_survivors_df.head()
94/31:
# Your code here
import pandas as pd
import numpy as np

import matplotlib.pyplot as plt
%matplotlib inline
94/32:
df = pd.read_csv('titanic.csv', index_col=0)
df.head()
94/33:
# Preview values first to ensure proper encoding when slicing
df['Pclass'].unique()
94/34:
no_first_class_df = df[df['Pclass'].isin(['2','3'])]
no_first_class_df.head()
94/35:
fares_50_to_100_df = df[(df['Fare'] >= 50) & (df['Fare'] <= 100)]
fares_50_to_100_df.head()
94/36:
fares_50_to_100_df['Fare'].hist()
plt.xlabel('Fare', color='red')
plt.ylabel('Frequency', fontsize=12) 
plt.title('Distribution of Fares');
94/37:
# Checking column names for reference
df['Sex'].unique()
94/38:
#poor_male_survivors_df = df[(df['Sex'] == 'male') & (df['Pclass'] == '2' | df['Pclass'] == '3')]
poor_male_survivors_df = df[(df['Pclass'].isin(['2','3']) & df['Sex'].isin(['male']))]
poor_male_survivors_df.head()
94/39:
# Your code here
df['Age'].unique()
94/40: # Your code here
94/41:
women_and_children_df = df[(df['Sex'].isin(['female'])) | (df['Sex'] & df['Age'] < 18)]
adult_males_df = None
94/42:
women_and_children_df = df[(df['Sex'].isin(['female'])) | (df['Age'] < 18)]
adult_males_df = None
94/43:
women_and_children_df = df[(df['Sex'].isin(['female'])) | (df['Age'] < 15)]
adult_males_df = df[(df['Sex'].isin(['male'])) & (df['Age'] > 15)]
94/44:
women_and_children_df = df[(df['Sex'].isin(['female'])) | (df['Age'] < 15)]
adult_males_df = df[(df['Sex'].isin(['male'])) & (df['Age'] > 15)]

women_and_children_df
94/45:
women_and_children_df = df[(df['Sex'].isin(['female'])) | (df['Age'] < 15)]
adult_males_df = df[(df['Sex'].isin(['male'])) & (df['Age'] > 15)]

women_and_children_df
adult_males_df
94/46:
# Your code here
women_and_children_df.hist(column= 'Survived')
adult_males_df.hist(column= 'Survived')
94/47:
first_class_df = df['Pclass'].isin(['1'])
second_third_class_df = df['Pclass'].isin(['2','3'])
94/48:
# Your code here
first_class_df.plt.hist(column= 'Survived')
second_third_class_df.plt.hist(column= 'Survived')
94/49:
# Your code here
first_class_df.hist(column= 'Survived')
second_third_class_df.hist(column= 'Survived')
94/50:
first_class_df = df[df['Pclass'].isin(['1'])]
second_third_class_df = df[df['Pclass'].isin(['2','3'])]
94/51:
# Your code here
first_class_df.hist(column= 'Survived')
second_third_class_df.hist(column= 'Survived')
94/52:
from pandasql import sqldf
pysqldf = lambda q: sqldf(q. globals())

query_string = """SELECT * 
                FROM titanic
                WHERE Passenger >= 500"""
high_passenger_number_df = pysqldf(query_string)
high_passenger_number_df.head()
94/53:
from pandasql import sqldf
pysqldf = lambda query_string: sqldf(query_string. globals())

query_string = """SELECT * 
                FROM titanic
                WHERE Passenger >= 500"""
high_passenger_number_df = pysqldf(query_string)
high_passenger_number_df.head()
94/54:
from pandasql import sqldf
pysqldf = lambda query_string: sqldf(query_string, globals())

query_string = """SELECT * 
                FROM titanic
                WHERE Passenger >= 500"""
high_passenger_number_df = pysqldf(query_string)
high_passenger_number_df.head()
94/55:
from pandasql import sqldf
pysqldf = lambda q: sqldf(q, globals())

query_string = """SELECT * 
                FROM titanic
                WHERE Passenger >= 500"""
high_passenger_number_df = pysqldf(query_string)
high_passenger_number_df.head()
94/56:
from pandasql import sqldf
pysqldf = lambda q: sqldf(q, globals())

#query_string = """SELECT * 
#                FROM titanic
#                WHERE Passenger >= 500"""
#high_passenger_number_df = pysqldf(query_string)
#high_passenger_number_df.head()
df['Passenger'].unique()
94/57:
from pandasql import sqldf
pysqldf = lambda q: sqldf(q, globals())

#query_string = """SELECT * 
#                FROM titanic
#                WHERE Passenger >= 500"""
#high_passenger_number_df = pysqldf(query_string)
#high_passenger_number_df.head()
df['PassengerId'].unique()
94/58:
from pandasql import sqldf
pysqldf = lambda q: sqldf(q, globals())

query_string = """SELECT * 
                FROM titanic
                WHERE Passenger >= 500"""
high_passenger_number_df = pysqldf(query_string)
high_passenger_number_df.head()
94/59:
from pandasql import sqldf
pysqldf = lambda q: sqldf(q, globals())

query_string = """SELECT * 
                FROM titanic
                WHERE PassengerId >= 500"""
high_passenger_number_df = pysqldf(query_string)
high_passenger_number_df.head()
94/60:
query_string = 'PassengerId >= 500'
high_passenger_number_df = df.query(query_string)
high_passenger_number_df.head()
94/61:
female_children_df = df.query('Sex == Female' & 'Age < 15')
female_children_df.head()
94/62:
female_children_df = df.query('Sex == Female' & 'Age' < 15)
female_children_df.head()
94/63:
female_children_df = df.query('Sex == 'Female'' & 'Age <= 15'')
female_children_df.head()
94/64:
female_children_df = df.query('Sex == "female" & 'Age <= 15'')
female_children_df.head()
94/65:
female_children_df = df.query('Sex == "female" & Age <= 15')
female_children_df.head()
94/66:
df = df.eval('Age_x_Fare = Age * Fare', inplace = True)
df.head()
94/67:
df.eval('Age_x_Fare = Age * Fare', inplace = True)
df.head()
94/68:
# Your code here
import pandas as pd
import numpy as np

import matplotlib.pyplot as plt
%matplotlib inline
94/69:
df = pd.read_csv('titanic.csv', index_col=0)
df.head()
94/70:
# Preview values first to ensure proper encoding when slicing
df['Pclass'].unique()
94/71:
no_first_class_df = df[df['Pclass'].isin(['2','3'])]
no_first_class_df.head()
94/72:
fares_50_to_100_df = df[(df['Fare'] >= 50) & (df['Fare'] <= 100)]
fares_50_to_100_df.head()
94/73:
fares_50_to_100_df['Fare'].hist()
plt.xlabel('Fare', color='red')
plt.ylabel('Frequency', fontsize=12) 
plt.title('Distribution of Fares');
94/74:
# Checking column names for reference
df['Sex'].unique()
94/75:
#poor_male_survivors_df = df[(df['Sex'] == 'male') & (df['Pclass'] == '2' | df['Pclass'] == '3')]
poor_male_survivors_df = df[(df['Pclass'].isin(['2','3']) & df['Sex'].isin(['male']))]
poor_male_survivors_df.head()
94/76:
women_and_children_df = df[(df['Sex'].isin(['female'])) | (df['Age'] < 15)]
adult_males_df = df[(df['Sex'].isin(['male'])) & (df['Age'] > 15)]

women_and_children_df
adult_males_df
94/77:
# Your code here
women_and_children_df.hist(column= 'Survived')
adult_males_df.hist(column= 'Survived')
94/78:
first_class_df = df[df['Pclass'].isin(['1'])]
second_third_class_df = df[df['Pclass'].isin(['2','3'])]
94/79:
# Your code here
first_class_df.hist(column= 'Survived')
second_third_class_df.hist(column= 'Survived')
94/80:
query_string = 'PassengerId >= 500'
high_passenger_number_df = df.query(query_string)
high_passenger_number_df.head()
94/81:
female_children_df = df.query('Sex == "female" & Age <= 15')
female_children_df.head()
94/82:
df.eval('Age_x_Fare = Age * Fare', inplace = True)
df.head()
94/83:  !pip install pandasql
94/84:
# Your code here
from pandasql import sqldf
94/85: pysqldf = lambda q: sqldf(q, globals())
94/86:
q = """SELECT Name 
       FROM titanic
       LIMIT 10;"""

passenger_names = pysqldf(q)
passenger_names
94/87:
# Your code here
import pandas as pd
import numpy as np

import matplotlib.pyplot as plt
%matplotlib inline
94/88:
df = pd.read_csv('titanic.csv', index_col=0)
df.head()
94/89:
# Preview values first to ensure proper encoding when slicing
df['Pclass'].unique()
94/90:
no_first_class_df = df[df['Pclass'].isin(['2','3'])]
no_first_class_df.head()
94/91:
fares_50_to_100_df = df[(df['Fare'] >= 50) & (df['Fare'] <= 100)]
fares_50_to_100_df.head()
94/92:
fares_50_to_100_df['Fare'].hist()
plt.xlabel('Fare', color='red')
plt.ylabel('Frequency', fontsize=12) 
plt.title('Distribution of Fares');
94/93:
# Checking column names for reference
df['Sex'].unique()
94/94:
#poor_male_survivors_df = df[(df['Sex'] == 'male') & (df['Pclass'] == '2' | df['Pclass'] == '3')]
poor_male_survivors_df = df[(df['Pclass'].isin(['2','3']) & df['Sex'].isin(['male']))]
poor_male_survivors_df.head()
94/95:
women_and_children_df = df[(df['Sex'].isin(['female'])) | (df['Age'] < 15)]
adult_males_df = df[(df['Sex'].isin(['male'])) & (df['Age'] > 15)]

women_and_children_df
adult_males_df
94/96:
# Your code here
women_and_children_df.hist(column= 'Survived')
adult_males_df.hist(column= 'Survived')
94/97:
first_class_df = df[df['Pclass'].isin(['1'])]
second_third_class_df = df[df['Pclass'].isin(['2','3'])]
94/98:
# Your code here
first_class_df.hist(column= 'Survived')
second_third_class_df.hist(column= 'Survived')
94/99:
query_string = 'PassengerId >= 500'
high_passenger_number_df = df.query(query_string)
high_passenger_number_df.head()
94/100:
female_children_df = df.query('Sex == "female" & Age <= 15')
female_children_df.head()
94/101:
df.eval('Age_x_Fare = Age * Fare', inplace = True)
df.head()
94/102:
q = """SELECT Name 
       FROM titanic
       LIMIT 10;"""

passenger_names = pysqldf(q)
passenger_names
94/103:
q = """SELECT Name 
       FROM titanic
       LIMIT 10;"""

passenger_names = pysqldf(q)
94/104:
q = """SELECT Name 
       FROM df
       LIMIT 10;"""

passenger_names = pysqldf(q)
passenger_names
94/105:
q2 = """SELECT Name, Fare
        FROM df
        WHERE Sex = 'male' & Survived = 1
        LIMIT = 30;"""

sql_surviving_males = pysqldf(q2)
sql_surviving_males
94/106:
q2 = """SELECT Name, Fare
        FROM df
        WHERE Sex = 'male' AND Survived = 1
        LIMIT = 30;"""

sql_surviving_males = pysqldf(q2)
sql_surviving_males
94/107:
q2 = """SELECT Name, Fare
        FROM df
        WHERE Sex = 'male' AND Survived = 1
        LIMIT 30;"""

sql_surviving_males = pysqldf(q2)
sql_surviving_males
94/108:
# Write your queries in these variables to keep your code well-formatted and readable
q3 = """SELECT Pclass 
        FROM df
        WHERE Sex = 'female' AND Survived = 1;"""
q4 = """SELECT Pclass
        FROM df
        WHERE SEX = 'female' AND Survived = 0;"""

survived_females_by_pclass_df = pysqldf(q3)
died_females_by_pclass_df = pysqldf(q4)

survived_females_by_pclass_df.hist(column= 'Survived')
died_females_by_pclass_df.hist(column= 'Survived')


# Create and label the histograms for each below!
94/109:
# Write your queries in these variables to keep your code well-formatted and readable
q3 = """SELECT Pclass 
        FROM df
        WHERE Sex = 'female' AND Survived = 1;"""
q4 = """SELECT Pclass
        FROM df
        WHERE SEX = 'female' AND Survived = 0;"""

survived_females_by_pclass_df = pysqldf(q3)
died_females_by_pclass_df = pysqldf(q4)

survived_females_by_pclass_df.hist(column= 'Pclass')
died_females_by_pclass_df.hist(column= 'Pclass')


# Create and label the histograms for each below!
94/110:
# Write your queries in these variables to keep your code well-formatted and readable
q3 = """SELECT Pclass, COUNT(*) 
        FROM df
        WHERE Sex = 'female' AND Survived = 1;"""
q4 = """SELECT Pclass, COUNT(*)
        FROM df
        WHERE SEX = 'female' AND Survived = 0;"""

survived_females_by_pclass_df = pysqldf(q3)
died_females_by_pclass_df = pysqldf(q4)

survived_females_by_pclass_df.hist(column= 'Pclass')
died_females_by_pclass_df.hist(column= 'Pclass')


# Create and label the histograms for each below!
94/111:
# Write your queries in these variables to keep your code well-formatted and readable
q3 = """SELECT Pclass, COUNT(*) 
        FROM df
        WHERE Sex = 'female' AND Survived = 1;"""
q4 = """SELECT Pclass, COUNT(*)
        FROM df
        WHERE SEX = 'female' AND Survived = 0;"""

survived_females_by_pclass_df = pysqldf(q3)
died_females_by_pclass_df = pysqldf(q4)

survived_females_by_pclass_df.hist()
died_females_by_pclass_df.hist()


# Create and label the histograms for each below!
94/112:
# Write your queries in these variables to keep your code well-formatted and readable
q3 = """SELECT Pclass, COUNT(*) 
        FROM df
        WHERE Sex = 'female' AND Survived = 1;"""
q4 = """SELECT Pclass, COUNT(*)
        FROM df
        WHERE SEX = 'female' AND Survived = 0;"""

survived_females_by_pclass_df = pysqldf(q3)
died_females_by_pclass_df = pysqldf(q4)

survived_females_by_pclass_df.hist(column = 'COUNT(*)')
died_females_by_pclass_df.hist(column = 'COUNT(*)')


# Create and label the histograms for each below!
95/1:
# Import necessary packages
import sqlite3
conn = sqlite3.connect('school.db')
cur = conn.cursor()
95/2:
# Import necessary packages
import sqlite3
conn = sqlite3.connect('school.sqlite')
cur = conn.cursor()
95/3:
# Create the database school.sqlite 
ls
95/4:
# Your code here
cur.execute("""CREATE contactInfo (id INTEGER PRIMARY KEY,
               firstName TEXT
               lastName TEXT,
               role TEXT,
               telephone TEXT,
               street TEXT,
               city TEXT,
               zip INTEGER)""")
95/5:
# Your code here
cur.execute("""CREATE contactInfo (
                                    id INTEGER PRIMARY KEY,
                                    firstName TEXT
                                    lastName TEXT,
                                    role TEXT,
                                    telephone TEXT,
                                    street TEXT,
                                    city TEXT,
                                    zip INTEGER )""")
95/6:
# Your code here
cur.execute("""CREATE contactInfo (
                                    id INTEGER PRIMARY KEY,
                                    firstName TEXT,
                                    lastName TEXT,
                                    role TEXT,
                                    telephone TEXT,
                                    street TEXT,
                                    city TEXT,
                                    zip INTEGER )""")
95/7:
# Your code here
cur.execute("""CREATE TABLE contactInfo (
                                    id INTEGER PRIMARY KEY,
                                    firstName TEXT,
                                    lastName TEXT,
                                    role TEXT,
                                    telephone TEXT,
                                    street TEXT,
                                    city TEXT,
                                    zip INTEGER )""")
95/8:
# Load the list of dictionaries; just run this cell
import pickle

with open('contact_list.pickle', 'rb') as f:
    contacts = pickle.load(f)
95/9:
# Create the database school.sqlite 
for i in contacts:
    contactInfo.append(i)
95/10:
# Import necessary packages
import sqlite3
conn = sqlite3.connect('school.sqlite')
cur = conn.cursor()
95/11:
# Create the database school.sqlite 
for i in contacts:
    contactInfo.append(i)
95/12:
# Iterate over the contact list and populate the contactInfo table here
for i in contacts:
    contactInfo.append(i)
95/13:
# Your code here
cur.execute("""CREATE TABLE contactInfo (
                                    id INTEGER PRIMARY KEY,
                                    firstName TEXT,
                                    lastName TEXT,
                                    role TEXT,
                                    telephone TEXT,
                                    street TEXT,
                                    city TEXT,
                                    zip INTEGER )""")
95/14:
# Load the list of dictionaries; just run this cell
import pickle

with open('contact_list.pickle', 'rb') as f:
    contacts = pickle.load(f)
95/15:
# Iterate over the contact list and populate the contactInfo table here
for i in contacts:
    contactInfo.append(i)
95/16:
# Import necessary packages
import sqlite3
import pandas as pd
95/17:
# Create the database school.sqlite 
conn = sqlite3.connect('school.sqlite')
cur = conn.cursor()
95/18:
# Iterate over the contact list and populate the contactInfo table here
for i in contacts:
    firstName = i['firstName']
    lastName = i['lastName']
    role = i['role']
    telephone = i['telephone']
    street = i['street']
    city = i['city']
    zip = i['zip']
    
cur.execute("""INSERT INTO contactInfo (firstName, lastName, role, telephone, street, city, zip)
                VALUES ('{}', '{}', '{}', '{}', '{}', '{}', '{}', '{}');""" .format(firstName, lastName, role, telephone, street, city, zip)
95/19:
# Iterate over the contact list and populate the contactInfo table here
for i in contacts:
    firstName = i['firstName']
    lastName = i['lastName']
    role = i['role']
    telephone = i['telephone']
    street = i['street']
    city = i['city']
    zip = i['zip']
    
cur.execute("""INSERT INTO contactInfo (firstName, lastName, role, telephone, street, city, zip)
                VALUES ('{}', '{}', '{}', '{}', '{}', '{}', '{}', '{}');""".format(firstName, lastName, role, telephone, street, city, zip)
95/20:
# Iterate over the contact list and populate the contactInfo table here
for i in contacts:
    firstName = i['firstName']
    lastName = i['lastName']
    role = i['role']
    telephone = i['telephone']
    street = i['street']
    city = i['city']
    zip = i['zip']
    
cur.execute("""INSERT INTO contactInfo (firstName, lastName, role, telephone, street, city, zip)
                VALUES ('{}', '{}', '{}', '{}', '{}', '{}', '{}');""".format(firstName, lastName, role, telephone, street, city, zip)
95/21:
# Iterate over the contact list and populate the contactInfo table here
for i in contacts:
    firstName = i['firstName']
    lastName = i['lastName']
    role = i['role']
    telephone = i['telephone']
    street = i['street']
    city = i['city']
    zip = i['zip']
    
cur.execute("""INSERT INTO contactInfo (firstName, lastName, role, telephone, street, city, zip)
                VALUES ('{}', '{}', '{}', '{}', '{}', '{}', '{}', '{}');""".format(firstName, lastName, role, telephone, street, city, zip))
95/22:
# Iterate over the contact list and populate the contactInfo table here
for i in contacts:
    firstName = i['firstName']
    lastName = i['lastName']
    role = i['role']
    telephone = i['telephone ']
    street = i['street']
    city = i['city']
    zip = i['zip']
    
cur.execute("""INSERT INTO contactInfo (firstName, lastName, role, telephone, street, city, zip)
                VALUES ('{}', '{}', '{}', '{}', '{}', '{}', '{}', '{}');""".format(firstName, lastName, role, telephone, street, city, zip))
95/23:
# Iterate over the contact list and populate the contactInfo table here
for i in contacts:
    firstName = i['firstName']
    lastName = i['lastName']
    role = i['role']
    telephone = i['telephone ']
    street = i['street']
    city = i['city']
    zip = i['zip ']
    
cur.execute("""INSERT INTO contactInfo (firstName, lastName, role, telephone, street, city, zip)
                VALUES ('{}', '{}', '{}', '{}', '{}', '{}', '{}', '{}');""".format(firstName, lastName, role, telephone, street, city, zip))
95/24:
# Iterate over the contact list and populate the contactInfo table here
for i in contacts:
    firstName = i['firstName']
    lastName = i['lastName']
    role = i['role']
    telephone = i['telephone ']
    street = i['street']
    city = i['city']
    zip = i['zipcode ']
    
cur.execute("""INSERT INTO contactInfo (firstName, lastName, role, telephone, street, city, zip)
                VALUES ('{}', '{}', '{}', '{}', '{}', '{}', '{}', '{}');""".format(firstName, lastName, role, telephone, street, city, zip))
95/25:
# Iterate over the contact list and populate the contactInfo table here
for i in contacts:
    firstName = i['firstName']
    lastName = i['lastName']
    role = i['role']
    telephone = i['telephone ']
    street = i['street']
    city = i['city']
    zip = i['zipcode ']
    
cur.execute("""INSERT INTO contactInfo (firstName, lastName, role, telephone, street, city, zip)
                VALUES ('{}', '{}', '{}', '{}', '{}', '{}', '{}', '{}');""".format(firstName, lastName, role, telephone, street, city, zipcode))
95/26:
# Iterate over the contact list and populate the contactInfo table here
for i in contacts:
    firstName = i['firstName']
    lastName = i['lastName']
    role = i['role']
    telephone = i['telephone ']
    street = i['street']
    city = i['city']
    zip = i['zipcode ']
    
cur.execute("""INSERT INTO contactInfo (firstName, lastName, role, telephone, street, city, zipcode)
                VALUES ('{}', '{}', '{}', '{}', '{}', '{}', '{}', '{}');""".format(firstName, lastName, role, telephone, street, city, zip))
95/27:
# Iterate over the contact list and populate the contactInfo table here
for i in contacts:
    firstName = i['firstName']
    lastName = i['lastName']
    role = i['role']
    telephone = i['telephone ']
    street = i['street']
    city = i['city']
    zip = i['zipcode ']
    
cur.execute("""INSERT INTO contactInfo (firstName, lastName, role, telephone, street, city, zipcode)
                VALUES ('{}', '{}', '{}', '{}', '{}', '{}', '{}');""".format(firstName, lastName, role, telephone, street, city, zip))
95/28:
# Iterate over the contact list and populate the contactInfo table here
for i in contacts:
    firstName = i['firstName']
    lastName = i['lastName']
    role = i['role']
    telephone = i['telephone ']
    street = i['street']
    city = i['city']
    zip = i['zipcode ']
    
cur.execute("""INSERT INTO contactInfo (firstName, lastName, role, telephone, street, city, zip)
                VALUES ('{}', '{}', '{}', '{}', '{}', '{}', '{}');""".format(firstName, lastName, role, telephone, street, city, zipcode))
95/29:
# Iterate over the contact list and populate the contactInfo table here
for i in contacts:
    firstName = i['firstName']
    lastName = i['lastName']
    role = i['role']
    telephone = i['telephone ']
    street = i['street']
    city = i['city']
    zip = i['zipcode ']
    
cur.execute("""INSERT INTO contactInfo (firstName, lastName, role, telephone, street, city, zip)
                VALUES ('{}', '{}', '{}', '{}', '{}', '{}', '{}');""".format(firstName, lastName, role, telephone, street, city, zip))
95/30:
# Your code here 
cur.fetchall()
95/31:
# Your code here 
cur.execute("""SELECT * FROM contactInfo;""").fetchall()
95/32:
# Your code here
conn.commit()
95/33:
# Create the grades table
cur.execute("""CREATE TABLE grades (
                                    userId INTEGER,
                                    courseId INTEGER,
                                    grade TEXT
                                    PRIMARY KEY(userID, courseId));
                                    """)
95/34:
# Create the grades table
cur.execute("""CREATE TABLE grades (
                                    userId INTEGER,
                                    courseId INTEGER,
                                    grade TEXT
                                    PRIMARY KEY(userID, courseId);
                                    """)
95/35:
# Create the grades table
cur.execute("""CREATE TABLE grades (
                                    userId INTEGER,
                                    courseId INTEGER,
                                    grade TEXT
                                    PRIMARY KEY(userID, courseId);)
                                    """)
95/36:
# Create the grades table
cur.execute("""CREATE TABLE grades (
                                    userId INTEGER,
                                    courseId INTEGER,
                                    grade TEXT
                                    PRIMARY KEY(userID, courseId))
                                    """)
95/37:
# Create the grades table
cur.execute("""CREATE TABLE grades (
                                    userId INTEGER,
                                    courseId INTEGER,
                                    grade TEXT
                                    PRIMARY KEY(userID, courseId) );
                                    """)
95/38:
# Create the grades table
cur.execute("""CREATE TABLE grades (
                                    userId INTEGER NOT NULL,
                                    courseId INTEGER NOT NULL,
                                    grade INTEGER,
                                    PRIMARY KEY(userID, courseId) );
                                    """)
95/39:
# Your code here 
cur.execute("""SELECT * FROM contactInfo;""")
df = pd.DataFrame(cur.fetchall())
df
95/40:
# Your code here 
cur.execute("""SELECT * FROM contactInfo;""")
df = pd.DataFrame(cur.fetchall())
df.columns = [x[0] for x in cur.description]
df
95/41:
# Iterate over the contact list and populate the contactInfo table here
for i in contacts:
    firstName = i['firstName']
    lastName = i['lastName']
    role = i['role']
    telephone = i['telephone ']
    street = i['street']
    city = i['city']
    zip = i['zipcode ']
    
    cur.execute("""INSERT INTO contactInfo (firstName, lastName, role, telephone, street, city, zip)
                VALUES ('{}', '{}', '{}', '{}', '{}', '{}', '{}');""".format(firstName, lastName, role, telephone, street, city, zip))
95/42:
# Your code here 
cur.execute("""SELECT * FROM contactInfo;""")
df = pd.DataFrame(cur.fetchall())
df.columns = [x[0] for x in cur.description]
df
95/43:
# Find the duplicate entry
df.duplicates()
95/44:
# Find the duplicate entry
df.duplicated()
95/45:
# Your code here
conn.commit()
95/46:
# Find the duplicate entry
df.duplicated()
95/47:
# Find the duplicate entry
cur.execute("""SELECT fristName, lastName, telephone, COUNT(*)
               FROM contactInfo
               GROUP BY firstName, lastName, telephone
               HAVING COUNT(*) > 1;"""),fetchall()
95/48:
# Find the duplicate entry
cur.execute("""SELECT firstName, lastName, telephone, COUNT(*)
               FROM contactInfo
               GROUP BY firstName, lastName, telephone
               HAVING COUNT(*) > 1;"""),fetchall()
95/49:
# Find the duplicate entry
cur.execute("""SELECT firstName, lastName, telephone, COUNT(*)
               FROM contactInfo
               GROUP BY firstName, lastName, telephone
               HAVING COUNT(*) > 1;""").fetchall()
95/50:
# Delete the duplicate entry
cur.execute("""DELETE FROM contactInfo WHERE telephone = '5179695576' AND telephone = '3259909290'""")
95/51:
# Check that the duplicate entry was removed
cur.execute("""SELECT * FROM contactInfo;""").fetchall()
95/52:
# Check that the duplicate entry was removed
cur.execute("""SELECT firstName, lastName, telephone, COUNT(*)
               FROM contactInfo
               GROUP BY firstName, lastName, telephone
               HAVING COUNT(*) > 1;""").fetchall()
95/53:
# Delete the duplicate entry
cur.execute("""DELETE FROM contactInfo WHERE telephone = '5179695576' AND telephone = '3259909290'""")
95/54:
# Check that the duplicate entry was removed
cur.execute("""SELECT firstName, lastName, telephone, COUNT(*)
               FROM contactInfo
               GROUP BY firstName, lastName, telephone
               HAVING COUNT(*) > 1;""").fetchall()
95/55:
# Update Ed's address
cur.execute("""UPDATE contactInfo SET street = '2910 Simpson Avenue York' WHERE street = '3478 Be Sreet',
                                  SET zip = 17403 WHERE zip = 48933);
                                    """)
95/56:
# Update Ed's address
cur.execute("""UPDATE contactInfo SET street = '2910 Simpson Avenue York' WHERE street = '3478 Be Sreet',
                                  SET zip = 17403 WHERE zip = 48933;
                                    """)
95/57:
# Update Ed's address
cur.execute("""UPDATE contactInfo SET street = '2910 Simpson Avenue York' WHERE street = '3478 Be Sreet',
                                  SET zip = 17403 WHERE zip = 48933;""")
95/58:
# Update Ed's address
cur.execute("""UPDATE contactInfo SET street = '2910 Simpson Avenue York',
                                      city = 'York'
                                      state = 'PA'
                                      zip = 17403 
                                  WHERE firstName = 'Ed' AND lastName = 'Lyman';""")
95/59:
# Update Ed's address
cur.execute("""UPDATE contactInfo SET street = '2910 Simpson Avenue York',
                                      city = 'York',
                                      state = 'PA',
                                      zip = 17403 
                                  WHERE firstName = 'Ed' AND lastName = 'Lyman';""")
95/60:
# Update Ed's address
cur.execute("""UPDATE contactInfo SET street = '2910 Simpson Avenue York',
                                      city = 'York',            
                                      zip = 17403 
                                  WHERE firstName = 'Ed' AND lastName = 'Lyman';""")
95/61:
# Query the database to ensure the change was made
cur.execute("""SELECT * FROM contactInfo""")
df = pd.DataFrame(cur.fetchall())
df.columns = [x[0] for x in cur.description]
95/62:
# Query the database to ensure the change was made
cur.execute("""SELECT * FROM contactInfo""")
df = pd.DataFrame(cur.fetchall())
df.columns = [x[0] for x in cur.description]
df
95/63:
# Update Ed's address
cur.execute("""UPDATE contactInfo SET street = '2910 Simpson Avenue',
                                      city = 'York',            
                                      zip = 17403 
                                  WHERE firstName = 'Ed' AND lastName = 'Lyman';""")
95/64:
# Query the database to ensure the change was made
cur.execute("""SELECT * FROM contactInfo""")
df = pd.DataFrame(cur.fetchall())
df.columns = [x[0] for x in cur.description]
df
95/65:
# Your code here
conn.commit()
97/1:
import pandas as pd

import sqlite3
conn = sqlite3.connect('data.sqlite')
cur = conn.cursor()
97/2:
import pandas as pd

import sqlite3
conn = sqlite3.connect('data.sqlite')
c = conn.cursor()
97/3:
# For the first query, the boilerplate for getting 
# the query into a DataFrame has been provided for you
c.execute("""SELECT contactFirstName, contactLastNight, phone, addressLine1, creditLimit
                    FROM customers 
                    WHERE creditLimit > 25000;""")
df = pd.DataFrame(c.fetchall())
df.columns = [x[0] for x in c.description]
df
97/4:
# For the first query, the boilerplate for getting 
# the query into a DataFrame has been provided for you
c.execute("""SELECT contactFirstName, contactLastName, phone, addressLine1, creditLimit
                    FROM customers 
                    WHERE creditLimit > 25000;""")
df = pd.DataFrame(c.fetchall())
df.columns = [x[0] for x in c.description]
df
97/5:
cur.execute("""SELECT state, AVG(creditLimit)
                      FROM customers
                      GROUP BY state;""")
df = pd.DataFrame(cur.fetchall())
df.columns = [x[0] for x in cur.description]
df
97/6:
cur.execute("""SELECT c.customerNumber, c.customerName, o.orderNumber, o.status, od.quantityOrdered
                      FROM customers AS c
                      LEFT JOIN orders AS o
                      USING(customerNumber)
                      LEFT JOIN orderdetails AS od
                      USING(orderNumber);""")
df = pd.DataFrame(cur.fetchall())
df.columns = [x[0] for x in cur.description]
df.head()
97/7:
cur.execute("""SELECT c.customerName, c.customerName, od.productCode, p.productName, COUNT(od.quantityOrdered)
                      FROM customers AS c
                      JOIN orders AS o
                      USING(customerNumber)
                      JOIN orderdetails AS od
                      USING(orderNumber)
                      JOIN products AS p
                      USING(productCode)
                      GROUP BY customerName
                      HAVING COUNT(od.quantityOrdered) >= 10
                      ORDER BY COUNT(od.quantityOrdered) DESC;""")

df = pd.DataFrame(cur.fetchall())
df.columns = [x[0] for x in cur.description]
df
97/8:
cur.execute("""SELECT c.customerName, c.customerName, od.productCode, p.productName, COUNT(od.quantityOrdered)
                      FROM customers AS c
                      JOIN orders AS o
                      USING(customerNumber)
                      JOIN orderdetails AS od
                      USING(orderNumber)
                      JOIN products AS p
                      USING(productCode)
                      GROUP BY c.customerName
                      HAVING COUNT(od.quantityOrdered) >= 10
                      ORDER BY COUNT(od.quantityOrdered) DESC;""")

df = pd.DataFrame(cur.fetchall())
df.columns = [x[0] for x in cur.description]
df
97/9:
cur.execute("""SELECT c.customerName, c.customerName, od.productCode, p.productName, COUNT(od.quantityOrdered)
                      FROM customers AS c
                      JOIN orders AS o
                      USING(customerNumber)
                      JOIN orderdetails AS od
                      USING(orderNumber)
                      JOIN products AS p
                      USING(productCode)
                      GROUP BY o.customerName
                      HAVING COUNT(od.quantityOrdered) >= 10
                      ORDER BY COUNT(od.quantityOrdered) DESC;""")

df = pd.DataFrame(cur.fetchall())
df.columns = [x[0] for x in cur.description]
df
97/10:
cur.execute("""SELECT c.customerName, c.customerName, od.productCode, p.productName, COUNT(od.quantityOrdered)
                      FROM customers AS c
                      JOIN orders AS o
                      USING(customerNumber)
                      JOIN orderdetails AS od
                      USING(orderNumber)
                      JOIN products AS p
                      USING(productCode)
                      GROUP BY c.customerName
                      HAVING COUNT(od.quantityOrdered) >= 10
                      ORDER BY COUNT(od.quantityOrdered) DESC;""")

df = pd.DataFrame(cur.fetchall())
df.columns = [x[0] for x in cur.description]
df
97/11:
cur.execute("""SELECT c.customerName, c.customerNumber, od.productCode, p.productName, COUNT(od.quantityOrdered)
                      FROM customers AS c
                      JOIN orders AS o
                      USING(customerNumber)
                      JOIN orderdetails AS od
                      USING(orderNumber)
                      JOIN products AS p
                      USING(productCode)
                      GROUP BY c.customerName
                      HAVING COUNT(od.quantityOrdered) >= 10
                      ORDER BY COUNT(od.quantityOrdered) DESC;""")

df = pd.DataFrame(cur.fetchall())
df.columns = [x[0] for x in cur.description]
df
97/12:
cur.execute("""SELECT c.customerName, o.customerNumber, od.productCode, p.productName, COUNT(od.quantityOrdered)
                      FROM customers AS c
                      JOIN orders AS o
                      USING(customerNumber)
                      JOIN orderdetails AS od
                      USING(orderNumber)
                      JOIN products AS p
                      USING(productCode)
                      GROUP BY customerName
                      HAVING COUNT(od.quantityOrdered) >= 10
                      ORDER BY COUNT(od.quantityOrdered) DESC;""")

df = pd.DataFrame(cur.fetchall())
df.columns = [x[0] for x in cur.description]
df
97/13:
cur.execute("""SELECT c.customerName, o.customerNumber, od.productCode, p.productName, COUNT(od.quantityOrdered)
                      FROM customers AS c
                      JOIN orders AS o
                      USING(customerNumber)
                      JOIN orderdetails AS od
                      USING(orderNumber)
                      JOIN products AS p
                      USING(productCode)
                      GROUP BY customerNumber
                      HAVING COUNT(od.quantityOrdered) >= 10
                      ORDER BY COUNT(od.quantityOrdered) DESC;""")

df = pd.DataFrame(cur.fetchall())
df.columns = [x[0] for x in cur.description]
df
97/14:
cur.execute("""SELECT c.customerName, o.customerNumber, od.productCode, p.productName, COUNT(od.quantityOrdered)
                      FROM customers AS c
                      JOIN orders AS o
                      USING(customerNumber)
                      JOIN orderdetails AS od
                      USING(orderNumber)
                      JOIN products AS p
                      USING(productCode)
                      GROUP BY customerName, customerNumber
                      HAVING COUNT(od.quantityOrdered) >= 10
                      ORDER BY COUNT(od.quantityOrdered) DESC;""")

df = pd.DataFrame(cur.fetchall())
df.columns = [x[0] for x in cur.description]
df
97/15:
cur.execute("""SELECT c.customerName, o.customerNumber, od.productCode, p.productName, SUM(od.quantityOrdered)
                      FROM customers AS c
                      JOIN orders AS o
                      USING(customerNumber)
                      JOIN orderdetails AS od
                      USING(orderNumber)
                      JOIN products AS p
                      USING(productCode)
                      GROUP BY customerName, customerNumber
                      HAVING COUNT(od.quantityOrdered) >= 10
                      ORDER BY SUM(od.quantityOrdered) DESC;""")

df = pd.DataFrame(cur.fetchall())
df.columns = [x[0] for x in cur.description]
df
97/16:
cur.execute("""SELECT c.customerName, o.customerNumber, od.productCode, p.productName, SUM(od.quantityOrdered)
                      FROM customers AS c
                      JOIN orders AS o
                      USING(customerNumber)
                      JOIN orderdetails AS od
                      USING(orderNumber)
                      JOIN products AS p
                      USING(productCode)
                      GROUP BY c.customerNumber, productCode
                      HAVING COUNT(od.quantityOrdered) >= 10
                      ORDER BY SUM(od.quantityOrdered) DESC;""")

df = pd.DataFrame(cur.fetchall())
df.columns = [x[0] for x in cur.description]
df
97/17:
cur.execute("""SELECT c.customerName, o.customerNumber, od.productCode, p.productName, SUM(od.quantityOrdered)
                      FROM customers AS c
                      JOIN orders AS o
                      USING(customerNumber)
                      JOIN orderdetails AS od
                      USING(orderNumber)
                      JOIN products AS p
                      USING(productCode)
                      GROUP BY c.customerNumber, customerName
                      HAVING COUNT(od.quantityOrdered) >= 10
                      ORDER BY SUM(od.quantityOrdered) DESC;""")

df = pd.DataFrame(cur.fetchall())
df.columns = [x[0] for x in cur.description]
df
97/18:
cur.execute("""SELECT c.customerName, o.customerNumber, od.productCode, p.productName, SUM(od.quantityOrdered)
                      FROM customers AS c
                      JOIN orders AS o
                      USING(customerNumber)
                      JOIN orderdetails AS od
                      USING(orderNumber)
                      JOIN products AS p
                      USING(productCode)
                      GROUP BY c.customerNumber, customerName
                      HAVING COUNT(od.quantityOrdered) >= 10
                      ORDER BY od.quantityOrdered DESC;""")

df = pd.DataFrame(cur.fetchall())
df.columns = [x[0] for x in cur.description]
df
97/19:
cur.execute("""SELECT firstName, lastName, employeeNumber, officeCode
                       FROM employees WHERE officeCode IN (SELECT officeCode
                                                           FROM offices
                                                           JOIN employees
                                                           USING(officeCode)
                                                           HAVING COUNT(employeeNumber) < 5;)""")
97/20:
cur.execute("""SELECT firstName, lastName, employeeNumber, officeCode
                       FROM employees WHERE officeCode IN (SELECT officeCode
                                                           FROM offices
                                                           JOIN employees
                                                           USING(officeCode)
                                                           HAVING COUNT(employeeNumber) < 5);""")
97/21:
cur.execute("""SELECT firstName, lastName, employeeNumber, officeCode
                       FROM employees WHERE officeCode IN (SELECT officeCode
                                                           FROM offices
                                                           JOIN employees
                                                           USING(officeCode)
                                                           GROUP BY officeCode
                                                           HAVING COUNT(employeeNumber) < 5);""")
97/22:
cur.execute("""SELECT firstName, lastName, employeeNumber, officeCode
                       FROM employees WHERE officeCode IN (SELECT officeCode
                                                           FROM offices
                                                           JOIN employees
                                                           USING(officeCode)
                                                           GROUP BY officeCode
                                                           HAVING COUNT(employeeNumber) < 5);"""
           )
df = pd.DataFrame(cur.fetchall())
df.columns = [x[0] for x in cur.description]
df.head()
100/1: pip install pymongo
101/1: import pymongo
101/2:
myclient = pymongo.MongoClient("mongodb://127.0.0.1:27017/")
mydb = myclient['example_database']
101/3: print(myclient.list_database_names())
101/4: mycollection = mydb['example_collection']
101/5:
example_customer_data = {'name': 'John Doe', 'address': '123 elm street', 'age': 28}

results = mycollection.insert_one(example_customer_data)
results
101/6: results.inserted_id
101/7: results.inserted_id
101/8:
customer_2 = {'name': 'Jane Doe', 'address': '234 elm street', 'age': 7}
customer_3 = {'name': 'Santa Claus', 'address': 'The North Pole', 'age': 547}
customer_4 = {'name': 'John Doe jr.', 'address': '', 'age': 0.5}

list_of_customers = [customer_2, customer_3, customer_4]

results_2 = mycollection.insert_many(list_of_customers)
101/9: results_2.inserted_ids
101/10:
query_1 = mycollection.find({})
for x in query_1:
    print(x)
101/11:
query_2 = mycollection.find({}, {'_id': 1, 'name': 1, 'address': 1})
for item in query_2:
    print(item)
101/12:
query_3 = mycollection.find({}, {'age': 0})
for item in query_3:
    print(item)
101/13:
query_4 = mycollection.find({'name': 'Santa Claus'})
for item in query_4:
    print(item)
101/14:
query_5 = mycollection.find({"age": {"$gt": 20}})
for item in query_5:
    print(item)
101/15:
deletion_2 = mycollection.delete_one({'age': {'$lt': 10}})
print(deletion_2.deleted_count)
101/16:
query_6 = mycollection.find({})
for item in query_6:
    print(item)
101/17: mycollection.delete_many({})
103/1: import pymongo
103/2:
import pymongo
myclient = pymongo.MongoClient("mongodb://127.0.0.1:27017/")
my_db = myclient['lab_db']
103/3:
import pymongo
myclient = pymongo.MongoClient("mongodb://127.0.0.1:27017/")
mydb = myclient['lab_db']
103/4: mycollection = mydb['lab_collection']
103/5:
customer_1 = {'name': 'John Smith', 'Email': 'j.smith@thesmiths.com', 'Mailing_Address': '123 mulberry lane', 'Balance': 0.0, 'Notes': 'Called technical support, issue not yet resolved'}
customer_2 = {'name': 'Jane Smith', 'Email': 'jane_smith@thesmiths.com', 'Mailing_Address': '', 'Balance': 25.0, 'Notes': ''}
customer_3 = {'name': 'Adam Enbar', 'Email': 'adam@theflatironschool.com', 'Mailing_Address': '11 Broadway', 'Balance': 14.99, 'Notes': 'Set up on recurring billing cycle'}
customer_4 = {'name': 'Avi Flombaum', 'Email': 'avi@theflatironschool.com', 'Mailing_Address': '11 Broadway', 'Balance': 0.0, 'Notes': ''}
customer_5 = {'name': 'Steven S.', 'Email': 'steven.s@gmail.net', 'Mailing_Address': '', 'Balance': -20.23, 'Notes': 'Refunded for overpayment due to price match guarantee'}

all_records = [customer_1, customer_2, customer_3, customer_4, customer_5]

insertion_results = mycollection.insert_many(all_records)
103/6: insertion_results.inserted_ids
103/7:
query_1 = mycollection.find({})
for x in query_1:
    print(x)
103/8:
query_2 = mycollection.find({'name': 'John Smith'})
for item in query_2:
    print(item)
103/9:
query_3 = mycollection.find({'name': 1, 'Email': 1, 'Balance': {'$gt':0.0 }})
for item in query_3:
    print(item)
103/10:
query_3 = mycollection.find({'name': 1, 'Email': 1, 'Balance': {"$gt": 0.0 }})
for item in query_3:
    print(item)
103/11:
query_3 = mycollection.find({'Balance': 1, 'name': 1, 'Email': 1, {'Balance': {"$gt": 0.0 }})
for item in query_3:
    print(item)
103/12:
query_3 = mycollection.find({'Balance': 1, 'name': 1, 'Email': 1}, {'Balance': {"$gt": 0.0 }})
for item in query_3:
    print(item)
103/13:
query_3 = mycollection.find({'Balance': 1, 'name': 1, 'Email': 1}, {'Balance': {"$gt": 0}})
for item in query_3:
    print(item)
103/14:
query_3 = mycollection.find({'Balance': 1, 'name': 1, 'Email': 1}, {'Balance': {"$gt": 0}},)
for item in query_3:
    print(item)
103/15:
query_3 = mycollection.find({'Balance': {"$gt": 0}}, {'Balance': 1, 'name': 1, 'Email': 1})
for item in query_3:
    print(item)
103/16:
record_to_update_1 = {'name': 'John Smith'}
update_1 = {'$set': {'address': '367 55th St., apt 2A'}}

mycollection.update_1(record_to_update_1, update_1)
103/17:
record_to_update_1 = {'name': 'John Smith'}
update_1 = {'$set': {'address': '367 55th St., apt 2A'}}

mycollection.update_one(record_to_update_1, update_1)
103/18:
query_4 = mycollection.find({'name': 'John Smith'})
for item in query_4:
    print(item)
103/19:
record_to_update_1 = {'name': 'John Smith'}
update_1 = {'$set': {'Mailing_Address': '367 55th St., apt 2A'}}

mycollection.update_one(record_to_update_1, update_1)
103/20:
query_4 = mycollection.find({'name': 'John Smith'})
for item in query_4:
    print(item)
103/21:
names_list = None
birthdays_list = None

def update_birthdays(names, birthdays):
    for i in range(len(names)):
        record_to_update = {'name' : names_list[i]}
        updates = {'$set': {'Birthday': birthdays_list[i]}}
        mycollection.update_many(record_to_update, updates)
         
    return
update_birthdays(names_list, birthdays_list)
103/22:
names_list = None
birthdays_list = None

def update_birthdays(names, birthdays):
    for i in range(len(names_list)):
        record_to_update = {'name' : names_list[i]}
        updates = {'$set': {'Birthday': birthdays_list[i]}}
        mycollection.update_many(record_to_update, updates)
         
    return
update_birthdays(names_list, birthdays_list)
103/23:
query_5 = mycollection.find({}, {'name': 1})
for item in query_5:
    print(item)
103/24: query_5 = None
103/25:
names_list = ['John Smith', 'Jane Smith', 'Adam Enbar', 'Avi Flombaum', 'Steven S.']
birthdays_list = ['02/20/1986', '07/07/1983', '12/02/1982', '04/17/1983', '08/30/1991']

def update_birthdays(names, birthdays):
    for i in range(len(names_list)):
        record_to_update = {'name' : names_list[i]}
        updates = {'$set': {'Birthday': birthdays_list[i]}}
        mycollection.update_many(record_to_update, updates)
         
    return
update_birthdays(names_list, birthdays_list)
103/26:
query_5 = mycollection.find({}, {'Birthday': 1})
for item in query_5:
    print(item)
104/1:
#Your code here
import json
import pandas as pd
104/2:
f = open('nyc_2001_campaign_finance.json')
data = json.load(f)
print(type(data))
104/3:
f = open('nyc_2001_campaign_finance.json')
data = json.load(f)
104/4:
### Your code here
print(type(data))
104/5:
#Your code here
data,keys()
104/6:
#Your code here
data.keys()
104/7:
#Your code here
data.keys()
print(type(data['data']))
104/8:
#Your code here
data['data'][0]
104/9:
# Your code here
data['meta']['view']['columns']
104/10:
# Your code here
data['meta']['view']['columns'][0]
104/11:
#Your code here
pd.DataFrame.from_dict(data['meta', 'data'])
104/12:
#Your code here
pd.DataFrame.from_dict(data['meta','data'])
105/1: df = pd.DataFrame('stuff')
105/2:
import json
from pymongo import MongoClient
105/3: client = MongoClient(host= 'localhost', port=27017)
105/4: client.list_database_names()
105/5: apr = client['AprFT']
105/6: aprft = client['AprFT']
105/7: client.list_database_names()
105/8: students = aprft['students']
105/9: type(students)
105/10: apft.list_collection_names()
105/11: aprft.list_collection_names()
105/12:
#schema
student1 = {"name": "Heather", "state": "Texas"}
student2 = {"name": "Thomas", "state": "California"}
student3 = {"name": "Erica", "state": "California"}
105/13: students.insert_one(student1)
105/14: client.list_database_names()
105/15: aprft.list_collection_names()
105/16: students.insert_one(student2)
105/17: students.insert_one(student3)
105/18: client.list_database_names()
105/19: aprft.list_collection_names()
105/20:
#schema
student1 = {"name": "Heather", "state": "Texas"}
student2 = {"name": "Thomas", "state": "California"}
student3 = {"name": "Erica", "state": "California"}
student4 = {"name": "Megan", "county": "London"}
105/21: students.insert_one(student4)
105/22:
student_list = [{"name": "leighanna", "state": "Michigan"},
               {"name": "payson", "state": "Ohio"},
               {"name": "edward", "province": "British Columbia"}]
105/23: students.insert_many(student_list)
105/24: students.count() #count the num of docs
105/25:
for res in students.find(filter={}):
    print(res)
105/26:
#Find edward
for res in students.find({'name': 'edward'}):
    print(res)
105/27:
#find students who's names start with 'e' or 'E'
for res in students.find(filter={"name": {'regex': "^e", "$options": "i"}"}})
                                 print(res)
105/28:
#find students who's names start with 'e' or 'E'
for res in students.find(filter={"name": {'regex': "^e", "$options": "i"}})
                                 print(res)
105/29:
#find students who's names start with 'e' or 'E'
for res in students.find(filter={"name": {'$regex': "^e", "$options": "i"}})
                                 print(res)
106/1:
#Your code here
import json

f = open('ny_times_movies.json', 'r')
data = json.load(f)
106/2:
#Your code here
results = data['response']['results']
106/3:
#Your code here
results = data['results']
106/4:
#Your code here
results = data['results']
print(type(results), len(results))
106/5:
#Your code here
import pandas as pd

df = pd.DataFrame(data['results'])
df.head()
#results = data['results']
#print(type(results), len(results))
106/6:
#Your code here
df['byline'].unique()
106/7:
#Your code here
critics = df['byline'].unique()
len(critics)
106/8:
#Your code here
print(critics = df['byline'].unique())
print(len(critics))
106/9:
#Your code here
critics = df['byline'].unique())
print(len(critics)
106/10:
#Your code here
critics = df['byline'].unique()
print(len(critics)
106/11:
#Your code here
critics = df['byline'].unique()
print(len(critics))
106/12:
#Your code here
keys = df.link.iloc[0].keys()
new_cols = []
for key in keys:
    new_col = 'review_url'
    df[new_col] = df.link.map(lambda x: x[key])
    new_cols.append(new_col)
df[new_cols].head()
106/13:
#Your code here
keys = df.link.iloc[0].keys()
new_cols = []
for key in keys:
    new_col = 'review_url {}'.format(key)
    df[new_col] = df.link.map(lambda x: x[key])
    new_cols.append(new_col)
df[new_cols].head()
106/14:
#Your code here
len(df['review_url'])
104/13:
#Your code here
pd.DataFrame.from_dict(data['meta'],['data'])
104/14:
#Your code here
import json
import pandas as pd
104/15:
f = open('nyc_2001_campaign_finance.json')
data = json.load(f)
104/16:
### Your code here
print(type(data))
104/17:
#Your code here
data.keys()
print(type(data['data']))
104/18:
#Your code here
data['data'][0]
104/19:
# Your code here
data['meta']['view']['columns'][0]
104/20:
#Your code here
pd.DataFrame.from_dict(data['meta'],['data'])
104/21:
#Your code here
pd.DataFrame.from_dict(data['meta'],data['data'])
104/22:
#Your code here
df = pd.DataFrame(data['data'])
cols = [i['name'] for i in data['meta']['view']['columns']]
df.columns = cols
df.head()
104/23:
#Your code here
df.meta.iloc[0]
107/1:
#Your code here 
import json

f = open('output.json')
data = json.load(f)
107/2:
#Your code here 
import json

f = open('disease_data.json')
data = json.load(f)
107/3:
#Your code here
data.keys()
107/4:
#Your code here
data.keys()
type(data['meta'])
107/5:
#Your code here
data.keys()
print(type(data['meta']))
data['meta'].keys()
107/6:
#Your code here
data.keys()
print(type(data['meta']))
data['meta'].keys()
for key in data['meta'].keys():
    print(key, type(data['meta'][key]))
107/7:
for key in data['meta'].keys():
    print(key, type(data['meta'][key]))
107/8:
#Your code here
data.keys()
print(type(data['meta']))
data['meta'].keys()
107/9:
print(type(data['data']))
data['data'].keys()
107/10: print(type(data['data']))
107/11: type(data['data']['class'])
107/12: type(data['data'][class])
107/13: len(data['data'])
107/14: data['data'][0]
107/15:
#Your code here
import pandas as pd
107/16:
df = pd.DataFrame(data['meta']['view'])
df.head()
107/17:
df = pd.DataFrame(data['meta'])
df.head()
107/18: for key in data['meta'].keys():
107/19:
for key in data['meta'].keys():
    print(key, type(data['meta'][key]))
107/20:
data['data'][0]
len(data['data'][0])
107/21:
print(len(data['data'][0]))
data['data'][0]
107/22:
df = pd.DataFrame(data['data'])
print(df.shape)
df.columns = [item['name'] for item in data['meta']['view']['columns']]
print(df.columns)
df.head()
108/1:
# Code here
!pip install requests
108/2: import requests
108/3:
# Code here 
resp = requests.get('https://www.google.com')
108/4: # Code here
108/5:
# Code here 
resp.status_code == requests.codes.ok
108/6:
# Code here 
print (resp.text)
108/7:
# Code here 
dict(resp.headers)
108/8:
# Code here 
print(resp.headers['Data'])
print(resp.headers['server'])
108/9:
# Code here 
print(resp.headers['Date'])
print(resp.headers['server'])
108/10:
# Code here 
r = requests.get('httpbin.org/get')

response = r.json()
print(response['args'])
print(response['headers'])
print(response['headers']['Accept'])
print(response['headers']['Accept-Encoding'])
print(response['headers']['Host'])
print(response['headers']['User-Agent'])
print(response['origin'])
print(response['url'])
108/11:
# Code here 
r = requests.get('http://httpbin.org/get')

response = r.json()
print(response['args'])
print(response['headers'])
print(response['headers']['Accept'])
print(response['headers']['Accept-Encoding'])
print(response['headers']['Host'])
print(response['headers']['User-Agent'])
print(response['origin'])
print(response['url'])
108/12:
# Code here 
print(r.headers['Access-Control-Allow-Credentials'])  
print(r.headers['Access-Control-Allow-Origin'])  
print(r.headers['CONNECTION'])  
print(r.headers['content-length'])  
print(r.headers['Content-Type'])  
print(r.headers['Date'])  
print(r.headers['server']
108/13:
# Code here 
print(r.headers['Access-Control-Allow-Credentials'])  
print(r.headers['Access-Control-Allow-Origin'])  
print(r.headers['CONNECTION'])  
print(r.headers['content-length'])  
print(r.headers['Content-Type'])  
print(r.headers['Date'])  
print(r.headers['server'])
108/14:
# Code here 
credentials = {'user_name': 'FlatironSchool', 'password': 'learnlovecode'}  
r = requests.get('http://httpbin.org/get', params=credentials)

print(r.url)  
print(r.text)
108/15:
# Code here  
import requests

url = 'http://httpbin.org/post'  
file_list = [  
    ('image', ('fi.png', open('images/fi.png', 'rb'), 'image/png')),
    ('image', ('fi2.jpeg', open('images/fi2.jpeg', 'rb'), 'image/png'))
]

r = requests.post(url, files=file_list)  
print(r.text)
109/1:
def solution(str):
    for index in len(range(str)):
        if len(str) % 2 == 0:
          x = index[str][0:2:len(str)+1]
          lst.append(x)
        else len(str) % 2 != 0:
           x = index[str][0:2:len(str)]
           lst.append(x)
           last_in = str[-1] + '_'
           lst.append(last_in)
    return
109/2:
def solution(str):
    for index in len(range(str)):
        if len(str) % 2 == 0:
          x = index[str][0:2:len(str)+1]
          lst.append(x)
        else len(str) % 2 == 1:
           x = index[str][0:2:len(str)]
           lst.append(x)
           last_in = str[-1] + '_'
           lst.append(last_in)
    return
109/3:
def solution(str):
    for index in len(range(str)):
        if len(str) % 2 == 0:
              x = index[str][0:2:len(str)+1]
              lst.append(x)
        else len(str) % 2 != 0:
               x = index[str][0:2:len(str)]
               lst.append(x)
               last_in = str[-1] + '_'
               lst.append(last_in)
    return
109/4:
def solution(str):
    lst = []
    for index in len(range(str)):
        if len(str) % 2 == 0:
              x = index[str][0:2:len(str)+1]
              lst.append(x)
        else len(str) % 2 != 0:
               x = index[str][0:2:len(str)]
               lst.append(x)
               last_in = str[-1] + '_'
               lst.append(last_in)
    return
109/5:
def solution(str):
    lst = []
    n = 2
    for index in range(0, len(str), n):
        if len(str) % 2 == 0:
            lst.append(index : index + n) 
        else len(str) % 2 == 1:
            lst.append(index : index + n{}.format('_')) 
    return
109/6:
def solution(str):
    lst = []
    n = 2
    for index in range(0, len(str), n):
        if len(str) % 2 == 0:
            lst.append(str[index : index + n]) 
        else len(str) % 2 == 1:
            lst.append(str[index : index + n{}.format('_')]) 
    return
109/7:
def solution(str):
    lst = []
    n = 2
    for index in range(0, len(str), n):
        if len(str) % 2 == 0:
            lst.append(str[index : index + n]) 
        else 
            lst.append(str[index : index + n{}.format('_')]) 
    return
109/8:
def solution(str):
    lst = []
    n = 2
    for index in range(0, len(str), n):
        if len(str) % 2 == 0:
            lst.append(str[index : index + n]) 
        else: 
            lst.append(str[index : index + n{}.format('_')]) 
    return
109/9:
def solution(str):
    lst = []
    n = 2
    for index in range(0, len(str), n):
        if len(str) % 2 == 0:
            lst.append(str[index : index + n]) 
        else: 
            lst.append(str[index : index + n])
            lst[-1] = {}.format('_')
    return
109/10:
str = 'abcdef'
solution(str)
109/11:
def solution(str):
    lst = []
    n = 2
    for index in range(0, len(str), n):
        if len(str) % 2 == 0:
            lst.append(str[index : index + n]) 
        else: 
            lst.append(str[index : index + n])
            lst[-1] = {}.format('_')
        print(lst)
    return
109/12:
str = 'abcdef'
solution(str)
109/13:
def solution(str):
    lst = []
    n = 2
    for index in range(0, len(str), n):
        if len(str) % 2 == 0:
            lst.append(str[index : index + n]) 
        else: 
            lst.append(str[index : index + n])
            lst[-1] = {}.format('_')
    print(lst)
    return
109/14:
str = 'abcdef'
solution(str)
109/15:
str = 'abcdefg'
solution(str)
109/16:
def solution(str):
    lst = []
    n = 2
    for index in range(0, len(str), n):
        if len(str) % 2 == 0:
            lst.append(str[index : index + n]) 
        else: 
            lst.append(str[index : index + n])
            lst[-1] + '_'
    print(lst)
    return
109/17:
str = 'abcdefg'
solution(str)
109/18:
def solution(str):
    lst = []
    n = 2
    for index in range(0, len(str), n):
        if len(str) % 2 == 0:
            lst.append(str[index : index + n]) 
        else: 
            lst.append(str[index : index + n])
            lst[-1] = lst[-1] + '_'
    print(lst)
    return
109/19:
str = 'abcdefg'
solution(str)
109/20:
def solution(str):
    lst = []
    n = 2
    for index in range(0, len(str), n):
        if len(str) % 2 == 0:
            lst.append(str[index : index + n]) 
        else: 
            lst.append(str[index : index + (n+'_')])
         
    print(lst)
    return
109/21:
str = 'abcdefg'
solution(str)
109/22:
def solution(str):
    lst = []
    n = 2
    for index in range(0, len(str), n):
        if len(str) % 2 == 0:
            lst.append(str[index : index + n]) 
        else: 
            lst.append(str[index : index + n])
         
    print(lst)
    return
109/23:
str = 'abcdefg'
solution(str)
109/24:
def solution(str):
    lst = []
    n = 2
    for index in range(0, len(str), n):
        if len(str) % 2 == 0:
            lst.append(str[index : index + n]) 
        else: 
            lst.append(str[index : index + n])
            lst[-1] + '_'
         
    print(lst)
    return
109/25:
str = 'abcdefg'
solution(str)
109/26:
def solution(str):
    lst = []
    n = 2
    for index in range(0, len(str), n):
        if len(str) % 2 == 0:
            lst.append(str[index : index + n]) 
        else: 
            lst.append(str[index : index + n])
            lst[-1] = lst[-1] + '_'
         
    print(lst)
    return
109/27:
str = 'abcdefg'
solution(str)
109/28:
def solution(str):
    lst = []
    n = 2
    for index in range(0, len(str), n):
        if len(str) % 2 == 0:
            lst.append(str[index : index + n]) 
        else: 
            lst.append(str[index : index + n])
            lst.append('_')
         
    print(lst)
    return
109/29:
str = 'abcdefg'
solution(str)
109/30:
def solution(str):
    lst = []
    n = 2
    for index in range(0, len(str), n):
        if len(str) % 2 == 0:
            lst.append(str[index : index + n]) 
        else: 
            lst.append(str[index : index + n])
            lst = lst + '_'
         
    print(lst)
    return
109/31:
str = 'abcdefg'
solution(str)
109/32:
def solution(str):
    lst = []
    n = 2
    for index in range(0, len(str), n):
        if len(str) % 2 == 0:
            lst.append(str[index : index + n]) 
        else: 
            lst.append(str[index : index + n])
            lst + '_'
         
    print(lst)
    return
109/33:
def solution(str):
    lst = []
    n = 2
    for index in range(0, len(str), n):
        if len(str) % 2 == 0:
            lst.append(str[index : index + n]) 
        else: 
            lst.append(str[index : index + n])
            lst[-1].append('_')
         
    print(lst)
    return
109/34:
str = 'abcdefg'
solution(str)
109/35:
def solution(str):
    lst = []
    n = 2
    for index in range(0, len(str), n):
        if len(str) % 2 == 0:
            lst.append(str[index : index + n]) 
        else: 
            lst.append(str[index : index + n])
            lst[-1] + ('_')
         
    print(lst)
    return
109/36:
str = 'abcdefg'
solution(str)
109/37:
def solution(str):
    lst = []
    n = 2
    for index in range(0, len(str), n):
        if len(str) % 2 == 0:
            lst.append(str[index : index + n]) 
        else: 
            lst.append(str[index : index + n])
        lst[-1] + ('_')
         
    print(lst)
    return
109/38:
str = 'abcdefg'
solution(str)
109/39:
def solution(str):
    lst = []
    n = 2
    for index in range(0, len(str), n):
        if len(str) % 2 == 0:
            lst.append(str[index : index + n]) 
        else: 
            lst.append(str[index : index + n])
        lst[-1] = lst[-1] + ('_')
         
    print(lst)
    return
109/40:
str = 'abcdefg'
solution(str)
109/41:
def solution(str):
    lst = []
    n = 2
    for index in range(0, len(str), n):
        if len(str) % 2 == 0:
            lst.append(str[index : index + n]) 
        else: 
            lst.append(str[index : index + n])
    lst[-1] = lst[-1] + ('_')
         
    print(lst)
    return
109/42:
str = 'abcdefg'
solution(str)
109/43:
def solution(str):
    lst = []
    n = 2
    for index in range(0, len(str), n):
        if len(str) % 2 == 0:
            lst.append(str[index : index + n]) 
        else: 
            lst.append(str[index : index + n])
    lst[-1] = lst[-1] + ('_')
         
    print(lst)
    return
109/44:
str = 'abcdefg'
solution(str)
109/45:
str = 'abcdef'
solution(str)
109/46:
def solution(str):
    lst = []
    n = 2
    for index in range(0, len(str), n):
        if len(str) % 2 == 0:
            lst.append(str[index : index + n]) 
        else: 
            lst.append(str[index : index + n])
            lst.append(lst[-1] + ('_'))
         
    print(lst)
    return
109/47:
str = 'abcdef'
solution(str)
109/48:
str = 'abcdefg'
solution(str)
109/49:
def solution(str):
    lst = []
    n = 2
    for index in range(0, len(str), n):
        if len(str) % 2 == 0:
            lst.append(str[index : index + n]) 
        else: 
            lst.append(str[index : index + n])
            lst[-1] + ('_')
         
    print(lst)
    return
109/50:
str = 'abcdefg'
solution(str)
111/1:
# Your Code Here
import requests

resp = requests.get('http://api.open-notify.org/iss-now.json')
111/2:
# Your comments 
resp.status_code == requests.codes.ok
111/3:
# Your Code Here
print (resp.text)
111/4:
# Your Code Here
import requests

resp = requests.get('http://api.open-notify.org/iss-now.json')

print(response.status_code)
111/5:
# Your Code Here
import requests

resp = requests.get('http://api.open-notify.org/iss-now.json')

print(resp.status_code)
111/6:
# Your Code Here
response = requests.get('iss-pass.json')

print(response.status_code)
111/7:
# Your Code Here
response = requests.get('http://iss-pass.json')

print(response.status_code)
111/8:
# Your Code Here
import requests

resp = requests.get('http://api.open-notify.org/iss-now.json')

print(resp.status_code)
111/9:
# Your comments 
resp.status_code == requests.codes.ok
111/10:
# Your Code Here
print (resp.text)
111/11:
# Your Code Here
response = requests.get('/iss-now.json')

print(response.status_code)
111/12:
# Your Code Here
response = requests.get('http:///iss-now.json')

print(response.status_code)
111/13:
# Your Code Here
response = requests.get('http://iss-now.json')

print(response.status_code)
111/14:
# Your Code Here
response = requests.get('http://open-notify.org/iss-pass.json')

print(response.status_code)
111/15:
# Your comments 
response.status_code == requests.codes.ok
111/16:
# Your Code Here
lat_lon = {'lat': 40.71, 'lon' : -74}
response = requests.get('http://open-notify.org/iss-pass.json', params=lat_lon)

print(response.status_code)
111/17:
# Check the API and interpret your results - when will ISS pass over NEW York next ?
response.status_code == requests.codes.ok
111/18:
# Your Code Here
lat_lon = {'lat': 40.71, 'lon' : -74}
response = requests.get('http://api.open-notify.org/iss-pass.json', params=lat_lon)

print(response.status_code)
111/19:
# Check the API and interpret your results - when will ISS pass over NEW York next ?
response.status_code == requests.codes.ok
111/20:
# Your Code Here
response = requests.get('http://api.open-notify.org/iss-pass.json')

print(response.status_code)
111/21:
# Your comments 
response.status_code == requests.codes.ok
111/22:
# Check the API and interpret your results - when will ISS pass over NEW York next ?
response.status_code == requests.codes.ok

print (resp.text)
111/23:
# Your Code Here
response = requests.get('http://api.open-notify.org/astros.json')

print(response.status_code)
111/24:
# Interpret the Results - How many people are in space and what are their names
print (resp.text)
111/25:
# Your Code Here
response = requests.get('http://api.open-notify.org/astros.json')
print(response.status_code)

print(dict(response.headers))
111/26:
# Check the API and interpret your results - when will ISS pass over NEW York next ?
response.status_code == requests.codes.ok
print (resp.text)

print(dict(response.headers))
111/27:
# Your Code Here
lat_lon = {'lat': 40.71, 'lon' : -74}
response = requests.get('http://api.open-notify.org/iss-pass.json', params=lat_lon)
print(response.status_code)

print(dict(response.headers))
111/28:
# Check the API and interpret your results - when will ISS pass over NEW York next ?
response.status_code == requests.codes.ok
print (resp.text)
111/29:
# Check the API and interpret your results - when will ISS pass over NEW York next ?
response.status_code == requests.codes.ok

print(dict(response.headers))
print (resp.text)
111/30:
# Check the API and interpret your results - when will ISS pass over NEW York next ?
response.status_code == requests.codes.ok

#print(dict(response.headers))
print (resp.text)
111/31:
# Check the API and interpret your results - when will ISS pass over NEW York next ?
response.status_code == requests.codes.ok

print(dict(response.headers))
print (resp.text)
112/1:
import json

def get_keys(path):
    with open(path) as f:
        return json.load(f)
112/2:
keys = get_keys("/Users/ericagabriel/.secret/yelp_api.json")

api_key = keys['api_key']

#While you may wish to print out these API keys to check that they imported properly,
#be sure to clear the output before uploading to Github. 
#Again, you don't want your keys stolen!!!
112/3:
keys = get_keys("/Users/ericagabriel/.secret/yelp_api.json")

api_key = keys['api_key']

print(api_key)

#While you may wish to print out these API keys to check that they imported properly,
#be sure to clear the output before uploading to Github. 
#Again, you don't want your keys stolen!!!
112/4:
keys = get_keys("/Users/ericagabriel/.secret/yelp_api.json")

api_key = keys['api_key']

print(key)

#While you may wish to print out these API keys to check that they imported properly,
#be sure to clear the output before uploading to Github. 
#Again, you don't want your keys stolen!!!
112/5:
keys = get_keys("/Users/ericagabriel/.secret/yelp_api.json")

api_key = keys['api_key']

print(keys)

#While you may wish to print out these API keys to check that they imported properly,
#be sure to clear the output before uploading to Github. 
#Again, you don't want your keys stolen!!!
112/6:
keys = get_keys("/Users/ericagabriel/.secret/yelp_api.json")

api_key = keys['api_key']



#While you may wish to print out these API keys to check that they imported properly,
#be sure to clear the output before uploading to Github. 
#Again, you don't want your keys stolen!!!
112/7:
import requests
term = 'Mexican'
location = 'Astoria NY'
SEARCH_LIMIT = 10

url = 'https://api.yelp.com/v3/businesses/search'

headers = {
        'Authorization': 'Bearer {}'.format(api_key),
    }

url_params = {
                'term': term.replace(' ', '+'),
                'location': location.replace(' ', '+'),
                'limit': SEARCH_LIMIT
            }
response = requests.get(url, headers=headers, params=url_params)
print(response)
print(type(response.text))
print(response.text[:1000])
112/8: response.json().keys()
112/9:
for key in response.json().keys():
    print(key)
    value = response.json()[key] #Use standard dictionary formatting
    print(type(value)) #What type is it?
    print('\n\n') #Separate out data
112/10: response.json()['businesses'][:2]
112/11: response.json()['total']
112/12: response.json()['region']
112/13:
import pandas as pd

df = pd.DataFrame.from_dict(response.json()['businesses'])
print(len(df)) #Print how many rows
print(df.columns) #Print column names
df.head() #Previews the first five rows. 
#You could also write df.head(10) to preview 10 rows or df.tail() to see the bottom
113/1:
import json

#Our previous function for loading our api key file
def get_keys(path):
    with open(path) as f:
        return json.load(f)
113/2:
keys = get_keys("/Users/ericagabriel/.secret/yelp_api.json")

api_key = keys['api_key']

#While you may wish to print out these api keys to check that they imported properly,
#be sure to clear the output before uploading to Github. 
#Again, you don't want your keys stolen!!!
113/3: import requests
113/4:
url = #This will be our next step
header = {"Authorization" : "Bearer {}".format(api_key)}
response = requests.get(url, header=header)
113/5:
url = 'https://api.yelp.com/v3/businesses/search'

headers = {
        'Authorization': 'Bearer {}'.format(api_key),
    }

url_params = {
                'location': 'NYC'
            }
response = requests.get(url, headers=headers, params=url_params)
113/6:
url = 'https://api.yelp.com/v3/businesses/search'

headers = {
        'Authorization': 'Bearer {}'.format(api_key),
    }

url_params = {
                'location': 'NYC',
                'term' : 'pizza',
                'limit' : 50,
                'price' : "1,2,3,4",
                'open_now' : True
            }
response = requests.get(url, headers=headers, params=url_params)
115/1:
import folium

lat = 51.51
long = -0.14

#Create a map of the area
base_map = folium.Map([lat, long], zoom_start=13)
base_map
115/2:
import numpy as np

#Generate some random locations to add to our map
x = [lat + np.random.uniform(-.1,.1) for i in range(20)]
y = [long + np.random.uniform(-.1,.1) for i in range(20)]
points = list(zip(x, y))
for p in points:
    lat = p[0]
    long = p[1]
    marker = folium.Marker(location=[lat, long])
    marker.add_to(base_map)
base_map
115/3:
for p in points:
    lat = p[0]
    long = p[1]
    popup_text = "Latitude: {}, Longitude: {}".format(lat,long)
    popup = folium.Popup(popup_text, parse_html=True)
    marker = folium.Marker(location=[lat, long], popup=popup)
    marker.add_to(base_map)
base_map
117/1:
import json
import requests

import pandas as pd

from pymongo import mongoClient
117/2:
import json
import requests

import pandas as pd

from pymongo import MongoClient
117/3:
#Scrape an item

#Step 1: get a url and its params
# Parse url and find paramters = "https://www.ebay.com/sch/i.html?_from=R40&_trksid=p2380057.m570.l1313.TR1.TRC0.A0.H0.Xheadphones+noise+cancelling+bluetooth+wireless.TRS0&_nkw=headphones+noise+cancelling+bluetooth+wireless&_sacat=0"
url = "https://www.ebay.com/sch/i.html"
#Use Postman or this site https://www.freeformatter.com/url-parser-query-string-splitter.html
params = {"_nkw": "headphones noise cancelling bluetooth wireless"}
#validate that the shortened url gets you to the priginal page
117/4:
# make a request and start scrapping
r = requests.get(url=url.params=params)
117/5:
# make a request and start scrapping
r = requests.get(url=url, params=params)
117/6: r.status_code
117/7: r.content
117/8:
#r.content is just the html file of the webpage
r.content(:3000)
117/9:
#r.content is just the html file of the webpage
r.content
117/10:
#Import Libraries

import json
import requests

import pandas as pd

from bs4 import BeautifulSoup
from pymongo import MongoClient
117/11:
#Step 2: Parse HTML

#make a soup object
webpage_soup = BeautifulSoup(r.content,'html.parser')
117/12:
webpage_soup.find_all("div", attrs={"class": "srp-river-results"})
results = results_list[0]
117/13:
results_list = webpage_soup.find_all("div", attrs={"class": "srp-river-results"})
results = results_list[0]
117/14:
results.find_all("li",  attrs={"class": "s-item"})
len(results)
117/15:
results.find_all("div",  attrs={"class": "s-item_wrapper clearfix"})
len(results)
117/16:
results.find_all("div",  attrs={"class": "s-item_wrapper clearfix"})
len(results)
117/17:
results_boxes = webpage_soup.find_all("div", attrs={"class": "srp-river-results"})
results = results_boxes[0]
117/18:
results.find_all("div",  attrs={"class": "s-item_wrapper clearfix"})
len(results)
117/19:
results.find_all("div",  attrs={"class": "s-item__wrapper clearfix"})
len(results)
117/20:
results_list = webpage_soup.find_all("div", attrs={"class": "srp-river-results"})
results = results_list[0]
117/21:
result_boxes = results.find_all("div",  attrs={"class": "s-item__wrapper clearfix"})
len(results_boxes)
117/22: results
117/23:
result_boxes = results.find_all("div",  attrs={"class": "s-item__wrapper"})
len(results_boxes)
117/24:
first_box = result_boxes[0]
name = first_box.find("h3", attrs={"class": "s-item_title" })
price = first_box.find("span", attrs{"class": "s-item__price"})
name, price
117/25:
first_box = result_boxes[0]
name = first_box.find("h3", attrs={"class": "s-item_title" })
price = first_box.find("span", attrs={"class": "s-item__price"})
name, price
117/26:
result_boxes = results.find_all("div",  attrs={"class": "s-item__wrapper"})
len(results_boxes)
117/27:
first_box = result_boxes[0]

name = first_box.find("h3", attrs={"class": "s-item__title" })
price = first_box.find("span", attrs={"class": "s-item__price"})
name, price
117/28:
first_box = result_boxes[0]

name = first_box.find("h3", attrs={"class": "s-item__title" }).text
price = first_box.find("span", attrs={"class": "s-item__price"})
name, price
117/29:
first_box = result_boxes[0]

name = first_box.find("h3", attrs={"class": "s-item__title" }).text
price = first_box.find("span", attrs={"class": "s-item__price"}).text
name, price
117/30:
for box in result_boxes:
    name = first_box.find("h3", attrs={"class": "s-item__title" }).text   #.text returns just the text that you want
    price = first_box.find("span", attrs={"class": "s-item__price"}).text
    print(name, price)
    print("\n\n")
117/31:
for box in result_boxes:
    name = box.find("h3", attrs={"class": "s-item__title" }).text   #.text returns just the text that you want
    price = box.find("span", attrs={"class": "s-item__price"}).text
    print(name, price)
    print("\n\n")
117/32:
list_of_data = []
for box in result_boxes:
    data = {}  #make it data scientitst friendly
    
    data['name'] = box.find("h3", attrs={"class": "s-item__title" }).text   #.text returns just the text that you want
    data['price'] = box.find("span", attrs={"class": "s-item__price"}).text
    print(name, price)
    print("\n\n")
117/33:
list_of_data = []
for box in result_boxes:
    data = {}  #make it data scientitst friendly
    
    data['name'] = box.find("h3", attrs={"class": "s-item__title" }).text   #.text returns just the text that you want
    data['price'] = box.find("span", attrs={"class": "s-item__price"}).text
    list_of_data.append(data)
list_of_data
    #print(name, price)
    #print("\n\n")
117/34:
def get_list_of_data(result_boxes):
    list_of_data = []
    for box in result_boxes:
        data = {}  #make it data scientitst friendly
    
        data['name'] = box.find("h3", attrs={"class": "s-item__title" }).text   #.text returns just the text that you want
        data['price'] = box.find("span", attrs={"class": "s-item__price"}).text
        list_of_data.append(data)
    list_of_data
    return list_of_data
    #print(name, price)
    #print("\n\n")
117/35: df = pd.DataFrame(get_list_of_data(result_boxes))
117/36: pd.DataFrame(get_list_of_data(result_boxes))
117/37:
#Lets store our datafram as a CSV
df.to_csv('ebay_earbuds.csv', index=False)
117/38:
#tsv
df.to_csv('ebay_earbuds.tsv', index= False, sep= '\t')
117/39:
#text
df.to_csv('ebay_earbuds.txt')
117/40:
#text
df.to_csv('ebay_earbuds.txt', index= False)
117/41:
#json
df.to_json('ebay_earbuds.json', lines= True, orient= 'records')
119/1:
from bs4 import BeautifulSoup
import requests
119/2:
def retrieve_titles(soup):
    #Your code here
    warning = soup.find('div', class_="alert alert-warning")
    book_container = warning.nextSibling.nextSibling
    titles = [h3.find('a').attrs['title'] for h3 in book_container.findAll('h3')]
119/3: import re
119/4:
def retrieve_ratings(soup):
    #Your code here
    warning = soup.find('div', class_="alert alert-warning")
    book_container = warning.nextSibling.nextSibling
    regex = re.compile("star-rating (.*)")
    start_ratings = []
    for p in book_container.findAll('p', {"class" : regex}):
        star_ratings.append(p.attrs['class'][-1])
119/5:
def retrieve_prices(soup):
    #Your code here
    warning = soup.find('div', class_="alert alert-warning")
    book_container = warning.nextSibling.nextSibling
    prices = [p.text for p in book_container.findAll('p', class_='price_color')]
    prices = [float(p[1:]) for p in prices]
119/6:
def retrieve_availabilities(soup):
    #Your code here
    warning = soup.find('div', class_="alert alert-warning")
    book_container = warning.nextSibling.nextSibling
    avails = [a.text.strip() for a in book_container.findAll('p', class_="instock availability")]
119/7:
#Your code here
df = pd.DataFrame()
for i in range(2,51):
    url = 'http://books.toscrape.com/catalogue/page-{}.html'.format(i)
    html_page = requests.get(url)
    soup = BeautifulSoup(html_page.content, 'html.parser')
    warning = soup.fin('div', class_='alert alert-warning')
    book_container = warning.nextSibling.nextSibling
    new_titles = retrieve_titles(book_container)
    new_star_ratings = retrieve_ratings(book_container)
    new_prices = retrieve_prices(book_container)
    new_avails = retrieve_availabilities(book_container)
119/8: import pandas as pd
119/9:
#Your code here
df = pd.DataFrame()
for i in range(2,51):
    url = 'http://books.toscrape.com/catalogue/page-{}.html'.format(i)
    html_page = requests.get(url)
    soup = BeautifulSoup(html_page.content, 'html.parser')
    warning = soup.fin('div', class_='alert alert-warning')
    book_container = warning.nextSibling.nextSibling
    new_titles = retrieve_titles(book_container)
    new_star_ratings = retrieve_ratings(book_container)
    new_prices = retrieve_prices(book_container)
    new_avails = retrieve_availabilities(book_container)
119/10:
#Your code here
df = pd.DataFrame()
for i in range(2,51):
    url = 'http://books.toscrape.com/catalogue/page-{}.html'.format(i)
    html_page = requests.get(url)
    soup = BeautifulSoup(html_page.content, 'html.parser')
    warning = soup.find('div', class_='alert alert-warning')
    book_container = warning.nextSibling.nextSibling
    new_titles = retrieve_titles(book_container)
    new_star_ratings = retrieve_ratings(book_container)
    new_prices = retrieve_prices(book_container)
    new_avails = retrieve_availabilities(book_container)
119/11:
from bs4 import BeautifulSoup
import requests
119/12: import re
119/13:
def retrieve_titles(soup):
    #Your code here
    warning = soup.find('div', class_="alert alert-warning")
    book_container = warning.nextSibling.nextSibling
    titles = [h3.find('a').attrs['title'] for h3 in book_container.findAll('h3')]
119/14:
def retrieve_ratings(soup):
    #Your code here
    warning = soup.find('div', class_="alert alert-warning")
    book_container = warning.nextSibling.nextSibling
    regex = re.compile("star-rating (.*)")
    start_ratings = []
    for p in book_container.findAll('p', {"class" : regex}):
        star_ratings.append(p.attrs['class'][-1])
119/15:
def retrieve_availabilities(soup):
    #Your code here
    warning = soup.find('div', class_="alert alert-warning")
    book_container = warning.nextSibling.nextSibling
    avails = [a.text.strip() for a in book_container.findAll('p', class_="instock availability")]
119/16: import pandas as pd
119/17:
#Your code here
df = pd.DataFrame()
for i in range(2,51):
    url = 'http://books.toscrape.com/catalogue/page-{}.html'.format(i)
    html_page = requests.get(url)
    soup = BeautifulSoup(html_page.content, 'html.parser')
    warning = soup.find('div', class_='alert alert-warning')
    book_container = warning.nextSibling.nextSibling
    new_titles = retrieve_titles(book_container)
    new_star_ratings = retrieve_ratings(book_container)
    new_prices = retrieve_prices(book_container)
    new_avails = retrieve_availabilities(book_container)
119/18:
def retrieve_titles(soup):
    #Your code here
    warning = soup.find('div', class_="alert alert-warning")
    book_container = warning.nextSibling.nextSibling
    titles = [h3.find('a').attrs['title'] for h3 in book_container.findAll('h3')]
    return titles
119/19:
def retrieve_ratings(soup):
    #Your code here
    warning = soup.find('div', class_="alert alert-warning")
    book_container = warning.nextSibling.nextSibling
    regex = re.compile("star-rating (.*)")
    start_ratings = []
    for p in book_container.findAll('p', {"class" : regex}):
        star_ratings.append(p.attrs['class'][-1])
    return star_ratings
119/20:
def retrieve_prices(soup):
    #Your code here
    warning = soup.find('div', class_="alert alert-warning")
    book_container = warning.nextSibling.nextSibling
    prices = [p.text for p in book_container.findAll('p', class_='price_color')]
    prices = [float(p[1:]) for p in prices]
    return prices
119/21:
def retrieve_availabilities(soup):
    #Your code here
    warning = soup.find('div', class_="alert alert-warning")
    book_container = warning.nextSibling.nextSibling
    avails = [a.text.strip() for a in book_container.findAll('p', class_="instock availability")]
    return avails
119/22: import pandas as pd
119/23:
#Your code here
df = pd.DataFrame()
for i in range(2,51):
    url = 'http://books.toscrape.com/catalogue/page-{}.html'.format(i)
    html_page = requests.get(url)
    soup = BeautifulSoup(html_page.content, 'html.parser')
    warning = soup.find('div', class_='alert alert-warning')
    book_container = warning.nextSibling.nextSibling
    new_titles = retrieve_titles(book_container)
    new_star_ratings = retrieve_ratings(book_container)
    new_prices = retrieve_prices(book_container)
    new_avails = retrieve_availabilities(book_container)
119/24:
def retrieve_ratings(soup):
    #Your code here
    warning = soup.find('div', class_="alert alert-warning")
    book_container = warning.nextSibling.nextSibling
    regex = re.compile("star-rating (.*)")
     star_dict = {'One': 1, 'Two': 2, 'Three':3, 'Four': 4, 'Five'}
    start_ratings = []
    for p in book_container.findAll('p', {"class" : regex}):
        star_ratings.append(p.attrs['class'][-1])
    star_ratings = [star_dict[s] for s in star_ratings]             
    return star_ratings
119/25:
def retrieve_ratings(soup):
    #Your code here
    warning = soup.find('div', class_="alert alert-warning")
    book_container = warning.nextSibling.nextSibling
    regex = re.compile("star-rating (.*)")
    star_dict = {'One': 1, 'Two': 2, 'Three':3, 'Four': 4, 'Five'}
    start_ratings = []
    for p in book_container.findAll('p', {"class" : regex}):
        star_ratings.append(p.attrs['class'][-1])
    star_ratings = [star_dict[s] for s in star_ratings]             
    return star_ratings
119/26:
def retrieve_ratings(soup):
    #Your code here
    warning = soup.find('div', class_="alert alert-warning")
    book_container = warning.nextSibling.nextSibling
    regex = re.compile("star-rating (.*)")
    star_dict = {'One': 1, 'Two': 2, 'Three':3, 'Four': 4, 'Five': 5}
    start_ratings = []
    for p in book_container.findAll('p', {"class" : regex}):
        star_ratings.append(p.attrs['class'][-1])
    star_ratings = [star_dict[s] for s in star_ratings]             
    return star_ratings
119/27:
def retrieve_prices(soup):
    #Your code here
    warning = soup.find('div', class_="alert alert-warning")
    book_container = warning.nextSibling.nextSibling
    prices = [p.text for p in book_container.findAll('p', class_='price_color')]
    prices = [float(p[1:]) for p in prices]
    return prices
119/28:
def retrieve_availabilities(soup):
    #Your code here
    warning = soup.find('div', class_="alert alert-warning")
    book_container = warning.nextSibling.nextSibling
    avails = [a.text.strip() for a in book_container.findAll('p', class_="instock availability")]
    return avails
119/29: import pandas as pd
119/30:
#Your code here
df = pd.DataFrame()
for i in range(1,51):
    url = 'http://books.toscrape.com/catalogue/page-{}.html'.format(i)
    html_page = requests.get(url)
    soup = BeautifulSoup(html_page.content, 'html.parser')
    #warning = soup.find('div', class_='alert alert-warning')
    #book_container = warning.nextSibling.nextSibling
    new_titles = retrieve_titles(soup)
    new_star_ratings = retrieve_ratings(soup)
    new_prices = retrieve_prices(soup)
    new_avails = retrieve_availabilities(soup)
119/31:
def retrieve_ratings(soup):
    #Your code here
    warning = soup.find('div', class_="alert alert-warning")
    book_container = warning.nextSibling.nextSibling
    regex = re.compile("star-rating (.*)")
    star_dict = {'One': 1, 'Two': 2, 'Three':3, 'Four': 4, 'Five': 5}
    star_ratings = []
    for p in book_container.findAll('p', {"class" : regex}):
        star_ratings.append(p.attrs['class'][-1])
    star_ratings = [star_dict[s] for s in star_ratings]             
    return star_ratings
119/32:
#Your code here
df = pd.DataFrame()
for i in range(1,51):
    url = 'http://books.toscrape.com/catalogue/page-{}.html'.format(i)
    html_page = requests.get(url)
    soup = BeautifulSoup(html_page.content, 'html.parser')
    #warning = soup.find('div', class_='alert alert-warning')
    #book_container = warning.nextSibling.nextSibling
    new_titles = retrieve_titles(soup)
    new_star_ratings = retrieve_ratings(soup)
    new_prices = retrieve_prices(soup)
    new_avails = retrieve_availabilities(soup)
119/33:
#Your code here

for i in range(1,51):
    url = 'http://books.toscrape.com/catalogue/page-{}.html'.format(i)
    html_page = requests.get(url)
    soup = BeautifulSoup(html_page.content, 'html.parser')
    #warning = soup.find('div', class_='alert alert-warning')
    #book_container = warning.nextSibling.nextSibling
    new_titles = retrieve_titles(soup)
    new_star_ratings = retrieve_ratings(soup)
    new_prices = retrieve_prices(soup)
    new_avails = retrieve_availabilities(soup)
df = pd.DataFrame(new_titles, new_star_ratings, new_prices, new_avails)
df.columns = ['Title', 'Star_Rating', 'Price_(pounds)', 'Availability']
print(len(df))
df.head()
119/34:
#Your code here

for i in range(1,51):
    url = 'http://books.toscrape.com/catalogue/page-{}.html'.format(i)
    html_page = requests.get(url)
    soup = BeautifulSoup(html_page.content, 'html.parser')
    #warning = soup.find('div', class_='alert alert-warning')
    #book_container = warning.nextSibling.nextSibling
    new_titles = retrieve_titles(soup)
    new_star_ratings = retrieve_ratings(soup)
    new_prices = retrieve_prices(soup)
    new_avails = retrieve_availabilities(soup)
df = pd.DataFrame([new_titles, new_star_ratings, new_prices, new_avails]).transpose()
df.columns = ['Title', 'Star_Rating', 'Price_(pounds)', 'Availability']
print(len(df))
df.head()
120/1: # Load the https://www.residentadvisor.net/events page in your browser.
120/2: # Open the inspect element feature in your browser
120/3:
from bs4 import BeautifulSoup
import requests

import re
120/4: import pandas as pd
120/5:
def scrape_events(events_page_url):
    #Your code here
    html_page = requests.get('https://www.residentadvisor.net/events')
    soup = BeautifulSoup(html_page.content, 'html_parser')
    #df.columns = ["Event_Name", "Venue", "Event_Date", "Number_of_Attendees"]
    #return df
120/6:
def #scrape_events(events_page_url):
    #Your code here
    html_page = requests.get('https://www.residentadvisor.net/events')
    soup = BeautifulSoup(html_page.content, 'html_parser')
    warning = soup.find('div', class_='clearfix')
    warning
    #df.columns = ["Event_Name", "Venue", "Event_Date", "Number_of_Attendees"]
    #return df
120/7:
#def scrape_events(events_page_url):
    #Your code here
    html_page = requests.get('https://www.residentadvisor.net/events')
    soup = BeautifulSoup(html_page.content, 'html_parser')
    warning = soup.find('div', class_='clearfix')
    warning
    #df.columns = ["Event_Name", "Venue", "Event_Date", "Number_of_Attendees"]
    #return df
120/8:
from bs4 import BeautifulSoup
import requests

import re
120/9: import pandas as pd
120/10:
#def scrape_events(events_page_url):
    #Your code here
    html_page = requests.get('https://www.residentadvisor.net/events')
    soup = BeautifulSoup(html_page.content, 'html_parser')
    warning = soup.find('div', class_='clearfix')
    warning
    #df.columns = ["Event_Name", "Venue", "Event_Date", "Number_of_Attendees"]
    #return df
120/11:
#def scrape_events(events_page_url):
    #Your code here
    html_page = requests.get('https://www.residentadvisor.net/events')
    soup = BeautifulSoup(html_page.content, 'html.parser')
    warning = soup.find('div', class_='clearfix')
    warning
    #df.columns = ["Event_Name", "Venue", "Event_Date", "Number_of_Attendees"]
    #return df
120/12:
#def scrape_events(events_page_url):
    #Your code here
    html_page = requests.get('https://www.residentadvisor.net/events')
    soup = BeautifulSoup(html_page.content, 'html.parser')
    warning = soup.find('div', class_='clearfix')
    event_container = warning.nextSibling.nextSibling
    event_container
    #df.columns = ["Event_Name", "Venue", "Event_Date", "Number_of_Attendees"]
    #return df
120/13:
#def scrape_events(events_page_url):
    #Your code here
    html_page = requests.get('https://www.residentadvisor.net/events')
    soup = BeautifulSoup(html_page.content, 'html.parser')
    warning = soup.find('div', class_='null')
    event_container = warning.nextSibling.nextSibling
    event_container
    #df.columns = ["Event_Name", "Venue", "Event_Date", "Number_of_Attendees"]
    #return df
120/14:
#def scrape_events(events_page_url):
    #Your code here
    html_page = requests.get('https://www.residentadvisor.net/events')
    soup = BeautifulSoup(html_page.content, 'html.parser')
    warning = soup.find('div', class_='aspNetHidden')
    event_container = warning.nextSibling.nextSibling
    event_container
    #df.columns = ["Event_Name", "Venue", "Event_Date", "Number_of_Attendees"]
    #return df
120/15:
#def scrape_events(events_page_url):
    #Your code here
    html_page = requests.get('https://www.residentadvisor.net/events')
    soup = BeautifulSoup(html_page.content, 'html.parser')
    warning = soup.find('div', class_='content-list events-border')
    event_container = warning.nextSibling.nextSibling
    event_container
    #df.columns = ["Event_Name", "Venue", "Event_Date", "Number_of_Attendees"]
    #return df
120/16:
from bs4 import BeautifulSoup
import requests

import re
120/17: import pandas as pd
120/18:
#def scrape_events(events_page_url):
    #Your code here
    html_page = requests.get('https://www.residentadvisor.net/events')
    soup = BeautifulSoup(html_page.content, 'html.parser')
    warning = soup.find('div', class_='content-list events-border')
    event_container = warning.nextSibling.nextSibling
    event_container
    #df.columns = ["Event_Name", "Venue", "Event_Date", "Number_of_Attendees"]
    #return df
121/1:
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
121/2: imbd_name = pd.read_csv('imbd.name.basics.csv')
122/1:
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline

import seaborn as sns
122/2:
imbd_name_df = pd.read_csv('imbd.name.basics.csv')
imbd_name_df.head()
122/3:
imbd_name_df = pd.read_csv('imbd.name.basics.csv')
imbd_name_df.head()
122/4:
imbd_name_df = pd.read_csv('/Users/ericagabriel/Downloads/Mod1 Project Data/imbd.name.basics.csv')
imbd_name_df.head()
122/5:
imbd_name_df = pd.read_csv('/Users/ericagabriel/Downloads/Mod1ProjectData/imbd.name.basics.csv')
imbd_name_df.head()
122/6:
imbd_name_df = pd.read_csv('Users/ericagabriel/Downloads/Mod1ProjectData/imbd.name.basics.csv')
imbd_name_df.head()
122/7:
imbd_name_df = pd.read_csv('/Users/ericagabriel/Downloads/imbd.name.basics.csv')
imbd_name_df.head()
122/8:
imbd_name_df = pd.read_csv('imbd.name.basics.csv')
imbd_name_df.head()
122/9:


imbd_name_df = pd.read_csv('imbd.name.basics.csv')
imbd_name_df.head()
122/10:
import gzip

f = gzip.open('imbd.name.basics.csv.gz', 'rb')
file_content= f.read()
#imbd_name_df = pd.read_csv('imbd.name.basics.csv')
#imbd_name_df.head()
print file_content
122/11:
import gzip

f = gzip.open('imbd.name.basics.csv.gz', 'rb')
file_content= f.read()
#imbd_name_df = pd.read_csv('imbd.name.basics.csv')
#imbd_name_df.head()
print(file_content)
122/12:
import gzip

f = gzip.open('imbd.name.basics.csv.gz', 'rb')
file_content= f.read()
#imbd_name_df = pd.read_csv('imbd.name.basics.csv')
#imbd_name_df.head()
print (file_content)
122/13:
import gzip

f = gzip.open('imbd.name.basics.csv.gz', 'rb')
file_content= f.read()
#imbd_name_df = pd.read_csv('imbd.name.basics.csv')
#imbd_name_df.head()
print file_content
122/14:
import gzip

f = gzip.open('imbd.name.basics.csv.gz', 'rb')
file_content= f.read()
#imbd_name_df = pd.read_csv('imbd.name.basics.csv')
#imbd_name_df.head()
print (file_content)
122/15:
#import gzip

#f = gzip.open('imbd.name.basics.csv.gz', 'rb')
#file_content= f.read()
imbd_name_df = pd.read_csv('imbd.name.basics.csv')
imbd_name_df.head()
#print (file_content)
122/16:
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline


import seaborn as sns
122/17:
#import gzip

#f = gzip.open('imbd.name.basics.csv.gz', 'rb')
#file_content= f.read()
imbd_name_df = pd.read_csv('imbd.name.basics.csv')
imbd_name_df.head()
#print (file_content)
122/18:
#Bom.movie_gross

Bom_gross_df = pd.read_csv('bom.movie_gross.csv')
122/19:
**Erica Gabriel**
Full Time
TBA
Instructor: Rafael Carrasco
Blog Post URL
122/20:
#import gzip

#f = gzip.open('imbd.name.basics.csv.gz', 'rb')
#file_content= f.read()
#print (file_content)
imbd_name_df = pd.read_csv('Users/ericagabriel/Downloads/Mod1 Project Data/imbd.name.basics.csv')
imbd_name_df.head()
122/21:
#import gzip

#f = gzip.open('imbd.name.basics.csv.gz', 'rb')
#file_content= f.read()
#print (file_content)
imbd_name_df = pd.read_csv('Downloads/Mod1 Project Data/imbd.name.basics.csv')
imbd_name_df.head()
122/22:
#import gzip

#f = gzip.open('imbd.name.basics.csv.gz', 'rb')
#file_content= f.read()
#print (file_content)
imbd_name_df = pd.read_csv('Downloads/Mod1ProjectData/imbd.name.basics.csv')
imbd_name_df.head()
122/23:
#import gzip

#f = gzip.open('imbd.name.basics.csv.gz', 'rb')
#file_content= f.read()
#print (file_content)
imbd_name_df = pd.read_csv('/Users/ericagabriel/Downloads/Mod1ProjectData/imbd.name.basics.csv')
imbd_name_df.head()
122/24:
#import gzip

#f = gzip.open('imbd.name.basics.csv.gz', 'rb')
#file_content= f.read()
#print (file_content)
imbd_name_df = pd.read_csv('Users/ericagabriel/Downloads/Mod1ProjectData/imbd.name.basics.csv')
imbd_name_df.head()
122/25: Bom_gross_df = pd.read_csv('zippedData/bom.movie_gross.csv.gz)
122/26: Bom_gross_df = pd.read_csv('zippedData/bom.movie_gross.csv.gz', compression=gzip)
122/27: Bom_gross_df = pd.read_csv('zippedData/bom.movie_gross.csv.gz', compression='gzip')
122/28:
Bom_gross_df = pd.read_csv('zippedData/bom.movie_gross.csv.gz', compression='gzip')
Bom_gross_df.head()
122/29:
#import gzip

#f = gzip.open('imbd.name.basics.csv.gz', 'rb')
#file_content= f.read()
#print (file_content)
imbd_name_df = pd.read_csv('zippedData/imbd.name.basics,csv.gz', compression='gzip')
imbd_name_df.head()
122/30:
#import gzip

#f = gzip.open('imbd.name.basics.csv.gz', 'rb')
#file_content= f.read()
#print (file_content)
imbd_name_df = pd.read_csv('zippedData/imbd.name.basics.csv.gz', compression='gzip')
imbd_name_df.head()
122/31:
#import gzip

#f = gzip.open('imbd.name.basics.csv.gz', 'rb')
#file_content= f.read()
#print (file_content)
imbd_name_df = pd.read_csv('zippedData/imdb.name.basics.csv.gz', compression='gzip')
imbd_name_df.head()
122/32:
imdb_name_df = pd.read_csv('zippedData/imdb.name.basics.csv.gz', compression='gzip')
imdb_name_df.head()
122/33:
imdb_titlea_df = pd.read_csv('zippedData/imdb.title.akas.csv.gz', compression='gzip')
imdb_titlea_df.head()
122/34:
movie_info_df = pd.read_csv('zippedData/rt.movie_info.tsv.gz', delimiter='\t', compression= 'gzip')
movie_info_df.head()
122/35:
title_prinicipals_df = pd.read_csv('zippedData/imdb.title.principals.csv.gz', compression='gzip')
title_prinicipals_df.head()
122/36:
#Data Cleaning
imdb_name_df.info
122/37:
#Data Cleaning
imdb_name_df.describe
122/38:
#Data Cleaning
imdb_name_df.describe()
122/39:
#Data Cleaning
print(imdb_name_df.describe())
imdb_name_df.info()
122/40:
#Data Cleaning
#print(imdb_name_df.describe())
imdb_name_df.info()
122/41: imdb_name_df.drop(columns=['birth_year', 'death_year'])
122/42: imdb_name_df.unique()
122/43: imdb_name_df['primary_profession'].unique()
122/44:
imdb_name_df = imdb_name_df.drop(columns=['birth_year', 'death_year']) #Both of these columns are missing ~85%+ values 
imdb_name_df.head()
122/45: imdb_name_df['primary_profession'] = imdb_name_df['primary_profession'].fillna(imdb_name_df['primary_profession'].mode())
122/46:
imdb_name_df['primary_profession'] = imdb_name_df['primary_profession'].fillna(imdb_name_df['primary_profession'].mode())
imdb_name_df.head()
122/47:
imdb_name_df['primary_profession'] = imdb_name_df['primary_profession'].fillna(imdb_name_df['primary_profession'].mode()) #fill missing categorical values with the mode values 
imdb_name_df['known_for_titles'] = imdb_name_df['known_for_titles'].fillna(imdb_name_df['known_for_titles'].mode()) #fill missing categorical values with the mode values 
imdb_name_df.head()
122/48:
imdb_name_df.info()
#imdb_name_df['primary_profession'].unique()
122/49:
#imdb_name_df.info()
imdb_name_df['primary_profession'].unique()
122/50:
imdb_name_df['primary_profession'].fillna(imdb_name_df['primary_profession'].mode()) #fill missing categorical values with the mode values 
imdb_name_df['known_for_titles'].fillna(imdb_name_df['known_for_titles'].mode()) #fill missing categorical values with the mode values 
imdb_name_df.head()
122/51:
imdb_name_df.info()
#imdb_name_df['primary_profession'].unique()
122/52:
for column in imdb_name_df.columns:
    imdb_name_df[column].fillna(imdb_name_df[column].mode()[0], inplace=True)
#imdb_name_df['primary_profession'] = imdb_name_df['primary_profession'].fillna(imdb_name_df['primary_profession'].mode()) #fill missing categorical values with the mode values 
#imdb_name_df['known_for_titles'] = imdb_name_df['known_for_titles'].fillna(imdb_name_df['known_for_titles'].mode()) #fill missing categorical values with the mode values 
imdb_name_df.head()
122/53:
imdb_name_df.info()
#imdb_name_df['primary_profession'].unique()
122/54: imdb_name_df.value_counts(normalize=True)
122/55: imdb_name_df['nconst'].value_counts(normalize=True)
122/56: imdb_name_df['primary_name'].value_counts(normalize=True)
122/57: imdb_name_df['primary_profession'].value_counts(normalize=True)
122/58: imdb_name_df['nconst'].value_counts()
122/59: imdb_name_df['primary_name'].value_counts()
122/60: imdb_name_df['primary_profession'].value_counts()
122/61: imdb_name_df['known_for_titles'].value_counts()
122/62:
duplicates = imdb_name_df[imdb_name_df.duplicated()]
print(len(duplicates))
duplicates.head()
122/63:
imdb_name_df['primary_name'].value_counts()
duplicates = imdb_name_df[imdb_name_df.duplicated(subset='primary_name')]
print(len(duplicates))
duplicates.tail()
122/64:
#imdb_name_df['primary_name'].value_counts()
duplicates = imdb_name_df[imdb_name_df.duplicated(subset='primary_name')]
print(len(duplicates))
duplicates.tail()
122/65:
#imdb_name_df['primary_name'].value_counts()
duplicates = imdb_name_df[imdb_name_df.duplicated(subset='primary_name')]
print(len(duplicates))
duplicates.head()
122/66:
#imdb_name_df['primary_name'].value_counts()
duplicates = imdb_name_df[imdb_name_df.duplicated(subset='primary_name')]
print(len(duplicates))
duplicates.head(10)
122/67:
imdb_name_df['known_for_titles'].value_counts()
duplicates = imdb_name_df[imdb_name_df.duplicated(subset='known_for_titles')]
print(len(duplicates))
duplicates.head(10)
122/68:
imdb_name_df['known_for_titles'].value_counts()
duplicates = imdb_name_df[imdb_name_df.duplicated(subset='known_for_titles')]
print(len(duplicates))
duplicates.tail(10)
122/69: imdb_name_df['known_for_titles'].value_counts()
122/70: imdb_name_df.loc[imdb_name_df['primary_profession'] == 'miscellaneous', 'Miscellaneous Roles']
122/71: imdb_name_df['miscellaneous_roles'] = imdb_name_df.loc[imdb_name_df['primary_profession'] == 'miscellaneous']
122/72: Bom_gross_df.info() #check for missing values
122/73: Bom_gross_df.astype('int64').dtypes
122/74: Bom_gross_df.astype('foreign_gross': 'int64').dtypes
122/75: Bom_gross_df.astype({'foreign_gross': 'int64'}).dtypes
122/76: Bom_gross_df.astype('foreign_gross': 'int64')
122/77: Bom_gross_df.astype({'foreign_gross': 'int64'})
122/78: Bom_gross_df['foreign_gross'] = Bom_gross_df['foreign_gross'].apply(pd.to_numeric)
122/79: Bom_gross_df['foreign_gross'] = Bom_gross_df['foreign_gross'].astype(int)
122/80: Bom_gross_df['domestic_gross'] = Bom_gross_df['domestic_gross'].fillna(Bom_gross_df['domestic_gross'].median())
122/81: Bom_gross_df['studio'] = Bom_gross_df['studio'].fillna(Bom_gross_df['studio'].median()) #replace NaNs with median values
122/82:
for column in Bom_gross_df.columns: #replace missing values in remaining columns with their modes
    Bom_gross_df[column].fillna(Bom_gross_df[column].mode()[0], inplace=True)
Bom_gross_df.head()
122/83: Bom_gross_df.info()
122/84: Bom_gross_df['foreign_gross'] = Bom_gross_df['foreign_gross'].astype(int)
122/85: Bom_gross_df['foreign_gross'] = Bom_gross_df['foreign_gross'].astype(int64)
122/86: Bom_gross_df['foreign_gross'] = Bom_gross_df['foreign_gross'].astype('int64')
122/87:
Bom_gross_df['foreign_gross'] = pd.to_numeric(Bom_gross_df['foreign_gross'])
#Bom_gross_df['foreign_gross'] = Bom_gross_df['foreign_gross'].astype(int)
122/88:
#convert foreign gross to int64
Bom_gross_df['foreign_gross'] = Bom_gross_df['foreign_gross'].convert_objects(convert_numeric=True)
122/89:
#convert foreign gross to int64
Bom_gross_df['foreign_gross'] = Bom_gross_df['foreign_gross'].astype('int')
122/90:
#convert foreign gross to int64
pd.to_numeric(Bom_gross_df['foreign_gross'])
#Bom_gross_df['foreign_gross'] = Bom_gross_df['foreign_gross'].astype('int')
122/91:
#convert foreign gross to int64
#pd.to_numeric(Bom_gross_df['foreign_gross'])
#Bom_gross_df['foreign_gross'] = Bom_gross_df['foreign_gross'].astype('int')
122/92: Bom_gross_df['title'].unique()
122/93:
Bom_gross_df['title'].unique()
Bom_gross_df['title'].value_counts()
122/94:
duplicates = Bom_gross_df[Bom_gross_df.duplicated()]
print(len(duplicates))
duplicates.head()
122/95:
duplicates = Bom_gross_df[Bom_gross_df.duplicated(subset='title')] #Check for duplicate rows
print(len(duplicates))
duplicates.tail()
122/96:
duplicates = Bom_gross_df[Bom_gross_df.duplicated(subset='title')] #Check for duplicate rows
print(len(duplicates))
duplicates.head()
122/97: Bom_gross_df = duplicates.drop_duplicates()
122/98: Bom_gross_df.info()
122/99: duplicates.drop_duplicates()
122/100: Bom_gross_df.info()
122/101:
Bom_gross_df = pd.read_csv('zippedData/bom.movie_gross.csv.gz', compression='gzip')
Bom_gross_df.head()
122/102: Bom_gross_df.info() #check for missing values
122/103: Bom_gross_df['domestic_gross'] = Bom_gross_df['domestic_gross'].fillna(Bom_gross_df['domestic_gross'].median()) #replace NaNs with median values
122/104:
for column in Bom_gross_df.columns: #replace missing values in remaining columns with their modes
    Bom_gross_df[column].fillna(Bom_gross_df[column].mode()[0], inplace=True)
Bom_gross_df.head()
122/105: Bom_gross_df.info() #Last NaN check
122/106:
duplicates = Bom_gross_df[Bom_gross_df.duplicated()] #Check for duplicate rows
print(len(duplicates))
duplicates.head()
122/107:
duplicates = Bom_gross_df[Bom_gross_df.duplicated(subset='title')] #Check for duplicate rows
print(len(duplicates)) #print count of duplicate titles
duplicates.head()
122/108: duplicates.drop_duplicates()
122/109: Bom_gross_df.info()
122/110: duplicates.drop_duplicates(keep=False)
122/111: Bom_gross_df.info()
122/112: Bom_gross_df.drop_duplicates(keep=False)
122/113: Bom_gross_df.info()
122/114: duplicates.drop_duplicates(keep=False)
122/115: duplicates.drop_duplicates(keep=last)
122/116: duplicates.drop_duplicates(keep='last')
122/117: Bom_gross_df.info()
122/118: #Bom_gross_df.info() #Revisit to drop the 1 duplicta row
122/119: Bom_gross_df['studio'].unique()
122/120:
#Bom_gross_df['studio'].unique()
for col in Bom_gross_df.columns:
    print(col, '\n', Bom_gross_df[col].value_counts().head(), '\n\n')
122/121:
for col in imdb_name_df.columns: #check for extraneous values
    print(col, '\n', imdb_name_df[col].value_counts().head(), '\n\n')
122/122: imdb_titlea_df.info()
122/123:
imdb_titlea_df = imdb_titlea_df.drop(columns=['language', 'attributes']) #Both of these columns are missing ~85%+ values 
imdb_titlea_df.head()
122/124: imdb_titlea_df['is_original_title'].fillna(imdb_titlea_df['is_original_title'].nedian())
122/125: imdb_titlea_df['is_original_title'] = imdb_titlea_df['is_original_title'].fillna(imdb_titlea_df['is_original_title'].median())
122/126:
for column in imdb_titlea_df.columns: #replace missing values in remaining columns with their modes
    imdb_titlea_df[column].fillna(imdb_titlea_df[column].mode()[0], inplace=True)
imdb_titlea_df.head()
122/127: imdb_titlea_df.info()
122/128:
duplicates = imdb_titlea_df[imdb_titlea_df.duplicated()]
print(len(duplicates))
duplicates.head()
122/129:
for col in imdb_titlea_df.columns: #check for extraneous values
    print(col, '\n', imdb_titlea_df[col].value_counts().head(), '\n\n')
122/130:
movie_info_df = pd.read_csv('zippedData/rt.movie_info.tsv.gz', delimiter='\t', compression= 'gzip')
movie_info_df.head()
122/131: movie_info_df.info()
122/132:
for column in movie_info_df.columns: #replace missing values in remaining columns with their modes
    movie_info_df[column].fillna(movie_info_df[column].mode()[0], inplace=True)
movie_info_df.head()
122/133: movie_info_df.info()
122/134:
movie_info_df = pd.read_csv('zippedData/rt.movie_info.tsv.gz', delimiter='\t', compression= 'gzip')
movie_info_df.head()
122/135: movie_info_df.info()
122/136:
for col in movie_info_df.columns: #check for extraneous values
    print(col, '\n', movie_info_df[col].value_counts().head(), '\n\n')
122/137:
#for column in movie_info_df.columns: #replace missing values in remaining columns with their modes
 #   movie_info_df[column].fillna(movie_info_df[column].mode()[0], inplace=True)
movie_info_df.tail()
122/138:
movie_info_df = movie_info_df.drop(columns=['currency']) #This column has null, NaN, and a placeholder value of $340 
movie_info_df.head()
122/139: movie_info_df['box_office'].unique()
122/140:
for col in movie_info_df.columns: #check for extraneous values
    print(col, '\n', movie_info_df[col].value_counts().head(), '\n\n')
122/141:
movie_info_df = movie_info_df.drop(columns=['currency', 'studio']) #The 'currency' column has null, NaN, and a placeholder value of $340, the studio column does not add predictive value 
movie_info_df.head()
122/142:
movie_info_df = pd.read_csv('zippedData/rt.movie_info.tsv.gz', delimiter='\t', compression= 'gzip')
movie_info_df.head()
122/143: movie_info_df.info()
122/144:
#for column in movie_info_df.columns: #replace missing values in remaining columns with their modes
 #   movie_info_df[column].fillna(movie_info_df[column].mode()[0], inplace=True)
#movie_info_df.tail()
122/145:
for col in movie_info_df.columns: #check for extraneous values
    print(col, '\n', movie_info_df[col].value_counts().head(), '\n\n')
122/146:
movie_info_df = movie_info_df.drop(columns=['currency', 'studio']) #The 'currency' column has null, NaN, and a placeholder value of $340, the studio column does not add predictive value 
movie_info_df.head()
122/147:
for column in movie_info_df.columns: #replace missing values in remaining columns with their modes
    movie_info_df[column].fillna(movie_info_df[column].mode()[0], inplace=True)
movie_info_df.tail()
122/148: movie_info_df.info()
122/149:
duplicates = movie_info_df[movie_info_df.duplicated()]
print(len(duplicates))
duplicates.head()
122/150:
duplicates = movie_info_df['synopsis'][movie_info_df['synopsis'].duplicated()]
print(len(duplicates))
duplicates.head()
122/151:
duplicates = movie_info_df[movie_info_df.duplicated(subset='synopsis')]
print(len(duplicates))
duplicates.head()
122/152:
duplicates = movie_info_df[movie_info_df.duplicated(subset='synopsis')]
print(len(duplicates))
duplicates.head()
122/153:
movie_info_df = pd.read_csv('zippedData/rt.movie_info.tsv.gz', delimiter='\t', compression= 'gzip')
movie_info_df.head()
122/154:
duplicates = movie_info_df[movie_info_df.duplicated(subset='synopsis')]
print(len(duplicates))
duplicates.head()
122/155:
duplicates = movie_info_df[movie_info_df.duplicated(subset='synopsis')]
print(len(duplicates)) #check for duplicates after initial cleaning
duplicates
122/156:
duplicates = movie_info_df[movie_info_df.duplicated(subset='synopsis')]
print(len(duplicates)) #Check for duplicates before cleaning
duplicates.drop_duplicates()
122/157:
duplicates = movie_info_df[movie_info_df.duplicated(subset='synopsis')]
print(len(duplicates)) #check for duplicates after initial cleaning
duplicates.drop_duplicates(inplace=True)
122/158: movie_info_df.info()
122/159:
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline


import seaborn as sns
122/160:
movie_info_df = pd.read_csv('zippedData/rt.movie_info.tsv.gz', delimiter='\t', compression= 'gzip')
movie_info_df.head()
122/161: movie_info_df.info()
122/162:
duplicates = movie_info_df[movie_info_df.duplicated(subset='synopsis')]
print(len(duplicates)) #Check for duplicates before cleaning
duplicates.drop_duplicates()
122/163:
for col in movie_info_df.columns: #check for extraneous values
    print(col, '\n', movie_info_df[col].value_counts().head(), '\n\n')
122/164:
movie_info_df = movie_info_df.drop(columns=['currency', 'studio']) #The 'currency' column has null, NaN, and a placeholder value of $340, the studio column does not add predictive value, Microsoft can Bing "Top Studios" 
movie_info_df.head()
122/165:
for column in movie_info_df.columns: #replace missing values in remaining columns with their modes
    movie_info_df[column].fillna(movie_info_df[column].mode()[0], inplace=True) # I kept box office becuase it gives insight to return on investment and is compatible with ML algorithms
movie_info_df.tail()
122/166: movie_info_df.info() #final check for NaN's
122/167:
duplicates = movie_info_df[movie_info_df.duplicated()]
print(len(duplicates))
duplicates.head()
122/168:
duplicates = movie_info_df[movie_info_df.duplicated(subset='synopsis')]
print(len(duplicates)) #check for duplicates after initial cleaning
duplicates.drop_duplicates(inplace=True)
122/169: movie_info_df.info()
122/170: title_prinicipals_df.info()
122/171:
for col in title_prinicipals_df.columns: #check for extraneous values
    print(col, '\n', title_prinicipals_df[col].value_counts().head(), '\n\n')
122/172:
title_prinicipals_df = title_prinicipals_df.drop(columns=['job']) #The 'currency' column has null, NaN, and a placeholder value of $340, the studio column does not add predictive value, Microsoft can Bing "Top Studios" 
title_prinicipals_df.head()
122/173:
duplicates = title_prinicipals_df[title_prinicipals_df.duplicated()]
print(len(duplicates))
duplicates.head()
122/174: title_prinicipals_df = title_prinicipals_df.drop(columns=['job', 'characters']) #job and character coulmns are neglible
122/175:
title_prinicipals_df = title_prinicipals_df.drop(columns=['job', 'characters']) #job and character coulmns are neglible
title_prinicipals_df.head()
122/176:
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline


import seaborn as sns
122/177:
title_prinicipals_df = title_prinicipals_df.drop(columns=['job', 'characters']) #job and character coulmns are neglible
title_prinicipals_df.head()
122/178:
title_prinicipals_df = pd.read_csv('zippedData/imdb.title.principals.csv.gz', compression='gzip')
title_prinicipals_df.head()
122/179: title_prinicipals_df.info()
122/180:
for col in title_prinicipals_df.columns: #check for extraneous values
    print(col, '\n', title_prinicipals_df[col].value_counts().head(), '\n\n')
122/181:
title_prinicipals_df = title_prinicipals_df.drop(columns=['job', 'characters']) #job and character coulmns are neglible
title_prinicipals_df.head()
122/182: title_prinicipals_df.info()
122/183:
#convert foreign gross to int64
#pd.to_numeric(Bom_gross_df['foreign_gross'])
pd.to_numeric(df['foreign_gross'])

#Bom_gross_df['foreign_gross'] = Bom_gross_df['foreign_gross'].astype('int')
122/184:
#convert foreign gross to int64
#pd.to_numeric(Bom_gross_df['foreign_gross'])
pd.to_numeric(Bom_gross_df['foreign_gross'])

#Bom_gross_df['foreign_gross'] = Bom_gross_df['foreign_gross'].astype('int')
122/185:
#convert foreign gross to int64
#pd.to_numeric(Bom_gross_df['foreign_gross'])
pd.to_numeric(Bom_gross_df['foreign_gross'])

#Bom_gross_df['foreign_gross'] = Bom_gross_df['foreign_gross'].astype('int')
122/186:
Bom_gross_df = pd.read_csv('zippedData/bom.movie_gross.csv.gz', compression='gzip')
Bom_gross_df.head()
122/187: Bom_gross_df.info() #check for missing values
122/188: Bom_gross_df['domestic_gross'] = Bom_gross_df['domestic_gross'].fillna(Bom_gross_df['domestic_gross'].median()) #replace NaNs with median values
122/189:
for column in Bom_gross_df.columns: #replace missing values in remaining columns with their modes
    Bom_gross_df[column].fillna(Bom_gross_df[column].mode()[0], inplace=True)
Bom_gross_df.head()
122/190: Bom_gross_df.info() #Last NaN check
122/191:
duplicates = Bom_gross_df[Bom_gross_df.duplicated()] #Check for duplicate rows
print(len(duplicates))
duplicates.head()
122/192:
duplicates = Bom_gross_df[Bom_gross_df.duplicated(subset='title')] #Check for duplicate rows
print(len(duplicates)) #print count of duplicate titles
duplicates.head()
122/193: duplicates.drop_duplicates(keep='last') #drop all duplicates except the last duplicate row
122/194:
#Bom_gross_df['studio'].unique()
for col in Bom_gross_df.columns: #check for extraneous values
    print(col, '\n', Bom_gross_df[col].value_counts().head(), '\n\n')
122/195:
#convert foreign gross to int64
#pd.to_numeric(Bom_gross_df['foreign_gross'])
pd.to_numeric(Bom_gross_df['foreign_gross'])

#Bom_gross_df['foreign_gross'] = Bom_gross_df['foreign_gross'].astype('int')
125/1:
import pandas as pd
import seaborn as sns
import numpy as np
125/2:
#convert data sets to pandas dataframes
imdb_basics_df = pd.read_csv('zippedData\imdb.title.basics.csv.gz')
imdb_ratings_df = pd.read_csv('zippedData\imdb.title.ratings.csv.gz')
rt_reviews_df = pd.read_csv('zippedData/rt.reviews.tsv.gz', compression='gzip',error_bad_lines=False, delimiter='\t',encoding='ISO-8859-1')
tmdb_df = pd.read_csv('zippedData/tmdb.movies.csv.gz')
tn_budgets_df = pd.read_csv('zippedData/tn.movie_budgets.csv.gz')
125/3:
import pandas as pd
import seaborn as sns
import numpy as np
125/4:
#convert data sets to pandas dataframes
imdb_basics_df = pd.read_csv('zippedData\imdb.title.basics.csv.gz')
imdb_ratings_df = pd.read_csv('zippedData\imdb.title.ratings.csv.gz')
rt_reviews_df = pd.read_csv('zippedData/rt.reviews.tsv.gz', compression='gzip',error_bad_lines=False, delimiter='\t',encoding='ISO-8859-1')
tmdb_df = pd.read_csv('zippedData/tmdb.movies.csv.gz')
tn_budgets_df = pd.read_csv('zippedData/tn.movie_budgets.csv.gz')
125/5:
#convert data sets to pandas dataframes
imdb_basics_df = pd.read_csv('zippedData\imdb.title.basics.csv.gz', compression='gzip')
imdb_ratings_df = pd.read_csv('zippedData\imdb.title.ratings.csv.gz')
rt_reviews_df = pd.read_csv('zippedData/rt.reviews.tsv.gz', compression='gzip',error_bad_lines=False, delimiter='\t',encoding='ISO-8859-1')
tmdb_df = pd.read_csv('zippedData/tmdb.movies.csv.gz')
tn_budgets_df = pd.read_csv('zippedData/tn.movie_budgets.csv.gz')
125/6:
#convert data sets to pandas dataframes
imdb_basics_df = pd.read_csv('zippedData/imdb.title.basics.csv.gz')
imdb_ratings_df = pd.read_csv('zippedData\imdb.title.ratings.csv.gz')
rt_reviews_df = pd.read_csv('zippedData/rt.reviews.tsv.gz', compression='gzip',error_bad_lines=False, delimiter='\t',encoding='ISO-8859-1')
tmdb_df = pd.read_csv('zippedData/tmdb.movies.csv.gz')
tn_budgets_df = pd.read_csv('zippedData/tn.movie_budgets.csv.gz')
125/7:
#convert data sets to pandas dataframes
imdb_basics_df = pd.read_csv('zippedData/imdb.title.basics.csv.gz')
imdb_ratings_df = pd.read_csv('zippedData/imdb.title.ratings.csv.gz')
rt_reviews_df = pd.read_csv('zippedData/rt.reviews.tsv.gz', compression='gzip',error_bad_lines=False, delimiter='\t',encoding='ISO-8859-1')
tmdb_df = pd.read_csv('zippedData/tmdb.movies.csv.gz')
tn_budgets_df = pd.read_csv('zippedData/tn.movie_budgets.csv.gz')
125/8:
#Clean IMDB basics runtime_minutes
imdb_basics_df['runtime_minutes'].fillna(imdb_basics_df['runtime_minutes'].median(),inplace=True)
#Clean IMDB basics genres
imdb_basics_df['genres'].fillna('Genre Data Missing',inplace = True)
#Clean IMDB basics original_title
imdb_basics_df['original_title'].fillna(imdb_basics_df['primary_title'],inplace = True)

print ('IMDB title basics')
print(imdb_basics_df.columns)
print('Number of entries:', len(imdb_basics_df),'\n')
print(imdb_basics_df.isna().sum())
125/9:
print ('IMDB title ratings')
print(imdb_ratings_df.head())
print('\nNumber of entries:',len(imdb_ratings_df),'\n')
print(imdb_ratings_df.isna().sum())
125/10:
print ('RT Reviews')
print(rt_reviews_df.head())
print(rt_reviews_df.columns)
print('\nNumber of entries:',len(rt_reviews_df),'\n')
print(rt_reviews_df.isna().sum())
125/11:
tmdb_df.drop('Unnamed: 0',axis=1,inplace = True)
print ('TMDB')
print(tmdb_df.head())
print(tmdb_df.columns)
print('\nNumber of entries:',len(tmdb_df),'\n')
print(tmdb_df.isna().sum())
125/12:
money_list = ['production_budget','domestic_gross','worldwide_gross']
for ser in money_list:
    tn_budgets_df[ser] = tn_budgets_df[ser].apply(lambda x:x.replace(',',''))
    tn_budgets_df[ser] = tn_budgets_df[ser].apply(lambda x:x.replace('$',''))
    tn_budgets_df[ser] = pd.to_numeric(tn_budgets_df[ser])

print ('TN Movie Budgets')
print(tn_budgets_df.head())
print(tn_budgets_df.columns)
print('\nNumber of entries:',len(tn_budgets_df),'\n')
print(tn_budgets_df.isna().sum())
125/13: tn_budgets_df.info()
122/196: movie_info_df.head()
122/197: movie_info_df.head(2)
122/198: import sqlite3
122/199: imdb_basics_df.head(2)
125/14: imdb_basics_df.head()
125/15: imdb_basics_df.head(2)
125/16: imdb_ratings_df.head(2)
122/200:
movie_info_df = movie_info_df.rename(columns = {'runtime':'runtime_minutes'})
movie_info_df.head()
122/201:
movie_info_df = movie_info_df.rename(columns = {'runtime':'runtime_minutes'}) #change column name to runtime_minutes to match runtime column from imdb_basics table
movie_info_df['runtime_minutes'] = movie_info_df['runtime_minutes'].map(lambda x: x.rstrip(' minutes'))
movie_info_df.head()
122/202:
movie_info_df = movie_info_df.rename(columns = {'runtime':'runtime_minutes'}) #change column name to runtime_minutes to match runtime column from imdb_basics table
movie_info_df['runtime_minutes'] = movie_info_df['runtime_minutes'].map(lambda x: x.str.replace(' minutes', '.0', regex=True)
#movie_info_df['runtime_minutes'] = movie_info_df['runtime_minutes'].map(lambda x: x.rstrip(' minutes'))
movie_info_df.head()
122/203:
movie_info_df = movie_info_df.rename(columns = {'runtime':'runtime_minutes'}) #change column name to runtime_minutes to match runtime column from imdb_basics table
movie_info_df['runtime_minutes'] = movie_info_df['runtime_minutes'].map(lambda x: x.str.replace(' minutes', '.0', regex=True)
#movie_info_df['runtime_minutes'] = movie_info_df['runtime_minutes'].map(lambda x: x.rstrip(' minutes'))
#movie_info_df.head()
122/204:
movie_info_df = movie_info_df.rename(columns = {'runtime':'runtime_minutes'}) #change column name to runtime_minutes to match runtime column from imdb_basics table
movie_info_df['runtime_minutes'] = movie_info_df['runtime_minutes'].map(lambda x: x.str.replace(' minutes', '.0', regex=True)
#movie_info_df['runtime_minutes'] = movie_info_df['runtime_minutes'].map(lambda x: x.rstrip(' minutes'))
#movie_info_df.head()
122/205:
movie_info_df = movie_info_df.rename(columns = {'runtime':'runtime_minutes'}) #change column name to runtime_minutes to match runtime column from imdb_basics table
#movie_info_df['runtime_minutes'] = movie_info_df['runtime_minutes'].map(lambda x: x.str.replace(' minutes', '.0', regex=True)
#movie_info_df['runtime_minutes'] = movie_info_df['runtime_minutes'].map(lambda x: x.rstrip(' minutes'))
#movie_info_df.head()
122/206:
movie_info_df = movie_info_df.rename(columns = {'runtime':'runtime_minutes'}) #change column name to runtime_minutes to match runtime column from imdb_basics table
#movie_info_df['runtime_minutes'] = movie_info_df['runtime_minutes'].map(lambda x: x.str.replace(' minutes', '.0', regex=True)
movie_info_df['runtime_minutes'] = movie_info_df['runtime_minutes'].map(lambda x: x.rstrip(' minutes'))
movie_info_df.head()
122/207:
movie_info_df = movie_info_df.rename(columns = {'runtime':'runtime_minutes'}) #change column name to runtime_minutes to match runtime column from imdb_basics table
#movie_info_df['runtime_minutes'] = movie_info_df['runtime_minutes'].map(lambda x: x.str.replace(' minutes', '.0', regex=True)
movie_info_df['runtime_minutes'] = movie_info_df['runtime_minutes'].map(lambda x: x.rstrip(' minutes')) #remove the string 'minutes'
movie_info_df.head(2)
125/17:
imdb_basics_df['runtime_minutes'] = imdb_basics_df['runtime_minutes'].map(lambda x: x.rstrip('.0'))
imdb_basics_df.head(2)
122/208: movie_info_df['runtime_minutes'] = movie_info_df['runtime_minutes'].astype(float)
122/209:
movie_info_df['runtime_minutes'] = movie_info_df['runtime_minutes'].astype(float)
movie_info_df.head(2)
122/210:
movie_info_df = movie_info_df.rename(columns = {'runtime':'runtime_minutes'}) #change column name to runtime_minutes to match runtime column from imdb_basics table
#movie_info_df['runtime_minutes'] = movie_info_df['runtime_minutes'].map(lambda x: x.str.replace(' minutes', '.0', regex=True)
movie_info_df['runtime_minutes'] = movie_info_df['runtime_minutes'].map(lambda x: x.rstrip(' minutes')) #remove the string 'minutes'
movie_info_df['runtime_minutes'] = movie_info_df['runtime_minutes'].astype(float) #convert from string to type float
movie_info_df.head(2)
122/211:
movie_info_df = movie_info_df.rename(columns = {'runtime':'runtime_minutes'}) #change column name to runtime_minutes to match runtime column from imdb_basics table
#movie_info_df['runtime_minutes'] = movie_info_df['runtime_minutes'].map(lambda x: x.str.replace(' minutes', '.0', regex=True)
movie_info_df['runtime_minutes'] = movie_info_df['runtime_minutes'].map(lambda x: x.rstrip(' minutes')) #remove the string 'minutes'
movie_info_df.head(2)
122/212:
movie_info_df = pd.read_csv('zippedData/rt.movie_info.tsv.gz', delimiter='\t', compression= 'gzip')
movie_info_df.head()
122/213: movie_info_df.info()
122/214:
duplicates = movie_info_df[movie_info_df.duplicated(subset='synopsis')]
print(len(duplicates)) #Check for duplicates before cleaning
duplicates.drop_duplicates()
122/215:
for col in movie_info_df.columns: #check for extraneous values
    print(col, '\n', movie_info_df[col].value_counts().head(), '\n\n')
122/216:
movie_info_df = movie_info_df.drop(columns=['currency', 'studio']) #The 'currency' column has null, NaN, and a placeholder value of $340, the studio column does not add predictive value, Microsoft can Bing "Top Studios" 
movie_info_df.head()
122/217:
for column in movie_info_df.columns: #replace missing values in remaining columns with their modes
    movie_info_df[column].fillna(movie_info_df[column].mode()[0], inplace=True) # I kept box office becuase it gives insight to return on investment and is compatible with ML algorithms
movie_info_df.tail()
122/218: movie_info_df.info() #final check for NaN's
122/219:
duplicates = movie_info_df[movie_info_df.duplicated()]
print(len(duplicates))
duplicates.head()
122/220:
duplicates = movie_info_df[movie_info_df.duplicated(subset='synopsis')]
print(len(duplicates)) #check for duplicates after initial cleaning
duplicates.drop_duplicates(inplace=True) #should drop duplicates, looks like its not removing them from the overall df
122/221: movie_info_df.info() #final
122/222:
movie_info_df = movie_info_df.rename(columns = {'runtime':'runtime_minutes'}) #change column name to runtime_minutes to match runtime column from imdb_basics table
#movie_info_df['runtime_minutes'] = movie_info_df['runtime_minutes'].map(lambda x: x.str.replace(' minutes', '.0', regex=True)
movie_info_df['runtime_minutes'] = movie_info_df['runtime_minutes'].map(lambda x: x.rstrip(' minutes')) #remove the string 'minutes'
movie_info_df.head(2)
122/223:
movie_info_df['runtime_minutes'] = movie_info_df['runtime_minutes'].astype(float) #convert from string to type float
movie_info_df.head(2)
122/224:
imdb_basics_df = pd.read_csv('zippedData/imdb.title.basics.csv.gz')
#Clean IMDB basics runtime_minutes
imdb_basics_df['runtime_minutes'].fillna(imdb_basics_df['runtime_minutes'].median(),inplace=True)
#Clean IMDB basics genres
imdb_basics_df['genres'].fillna('Genre Data Missing',inplace = True)
#Clean IMDB basics original_title
imdb_basics_df['original_title'].fillna(imdb_basics_df['primary_title'],inplace = True)
122/225: imdb_ratings_df = pd.read_csv('zippedData/imdb.title.ratings.csv.gz')
122/226:
imdb_ratings_df = pd.read_csv('zippedData/imdb.title.ratings.csv.gz')
imdb_ratings_df.head()
122/227:
imdb_basics_df = pd.read_csv('zippedData/imdb.title.basics.csv.gz')
#Clean IMDB basics runtime_minutes
imdb_basics_df['runtime_minutes'].fillna(imdb_basics_df['runtime_minutes'].median(),inplace=True)
#Clean IMDB basics genres
imdb_basics_df['genres'].fillna('Genre Data Missing',inplace = True)
#Clean IMDB basics original_title
imdb_basics_df['original_title'].fillna(imdb_basics_df['primary_title'],inplace = True)
imdb_basics_df.head()
122/228: import sqlite3
122/229:
#Ratings vs. Movie Length
conn = sqlite3.Connection('zippedData/')
cur = conn.cursor()
122/230: sorted(movie_info_df['box_office'])
122/231:
movie_info_df['box_office'] = movie_info_df['box_office'].astype(float)
#sorted(movie_info_df['box_office'])
122/232:
movie_info_df['box_office'] = movie_info_df['box_office'].astype(int)
#sorted(movie_info_df['box_office'])
122/233:
pd.to_numeric(movie_info_df['box_office'])
#movie_info_df['box_office'] = movie_info_df['box_office'].astype(float)
#sorted(movie_info_df['box_office'])
122/234:
#pd.to_numeric(movie_info_df['box_office'])
#movie_info_df['box_office'] = movie_info_df['box_office'].astype(float)
sorted(movie_info_df['box_office'])
122/235:
#pd.to_numeric(movie_info_df['box_office'])
#movie_info_df['box_office'] = movie_info_df['box_office'].astype(float) #will sort once I can convert to int
sorted(movie_info_df['runtime_minutes'])
122/236:
#pd.to_numeric(movie_info_df['box_office'])
#movie_info_df['box_office'] = movie_info_df['box_office'].astype(float) #will sort once I can convert to int
movie_info_df['runtime_minutes'] = sorted(movie_info_df['runtime_minutes'])
122/237:
#pd.to_numeric(movie_info_df['box_office'])
#movie_info_df['box_office'] = movie_info_df['box_office'].astype(float) #will sort once I can convert to int
movie_info_df['runtime_minutes'] = sorted(movie_info_df['runtime_minutes'])
movie_info_df.head()
122/238:
movie_info_df.groupby(['runtime_minutes'])
movie_info_df.head()
122/239: imdb_ratings_df.groupby(['averagerating'])
122/240:
imdb_ratings_df.groupby(['averagerating'])
imdb_ratings_df.head()
122/241:
imdb_basics_df.groupby(['runtime_minutes'])
imdb_basics_df.head()
122/242:
imdb_basics_movie_info_df = imdb_basics_df.join(movie_info_df, how='left')
imdb_basics_movie_info_df.head()
122/243:
imdb_basics_movie_info_df = imdb_basics_df.join(movie_info_df)
imdb_basics_movie_info_df.head()
122/244:
imdb_basics_movie_info_df = imdb_basics_df.join(movie_info_df, how='inner')
imdb_basics_movie_info_df.head()
122/245:
imdb_basics_movie_info_df = imdb_basics_df.merge(movie_info_df)
imdb_basics_movie_info_df.head()
122/246:
imdb_ratings_basics_df = imdb_basics_df.merge(imdb_ratings_df)
imdb_ratings_basics_df
122/247:
imdb_ratings_basics_df = imdb_basics_df.merge(imdb_ratings_df) #join imdb_basics & imdb_ratings 
imdb_ratings_basics_df.groupby(['runtime_minutes', 'averagerating']).mean()
122/248:
imdb_basics_movie_info_df = imdb_basics_df.merge(movie_info_df) #join imbd basics & movie_info

imdb_basics_movie_info_df.groupby(['box_office', 'runtime_minutes']).mean()
122/249:
imdb_basics_movie_info_df = imdb_basics_df.merge(movie_info_df) #join imbd basics & movie_info

imdb_basics_movie_info_df.groupby(['box_office', 'runtime_minutes'])
122/250:
imdb_ratings_basics_df = imdb_basics_df.merge(imdb_ratings_df) #join imdb_basics & imdb_ratings 
imdb_ratings_basics_df.groupby(['runtime_minutes', 'averagerating']) #groupby runtime and average rating
122/251:
imdb_basics_movie_info_df = imdb_basics_df.merge(movie_info_df) #join imbd basics & movie_info

imdb_basics_movie_info_df.groupby(['box_office', 'runtime_minutes'])
imdb_basics_movie_info_df.head()
122/252:
imdb_ratings_basics_df = imdb_basics_df.merge(imdb_ratings_df) #join imdb_basics & imdb_ratings 
imdb_ratings_basics_df.groupby(['runtime_minutes', 'averagerating'])
imdb_ratings_basics_df.head()
#groupby runtime and average rating
122/253:
imdb_basics_movie_info_df = imdb_basics_df.merge(movie_info_df, how= 'left') #join imbd basics & movie_info

imdb_basics_movie_info_df.groupby(['box_office', 'runtime_minutes'])
imdb_basics_movie_info_df.head()
122/254:
imdb_basics_movie_info_df = imdb_basics_df.merge(movie_info_df, how= 'inner') #join imbd basics & movie_info

imdb_basics_movie_info_df.groupby(['box_office', 'runtime_minutes'])
imdb_basics_movie_info_df.head()
122/255:
imdb_ratings_basics_df = imdb_basics_df.merge(imdb_ratings_df, how= 'inner') #join imdb_basics & imdb_ratings 
imdb_ratings_basics_df.groupby(['runtime_minutes', 'averagerating'])
imdb_ratings_basics_df.head()
#groupby runtime and average rating
122/256: imdb_ratings_basics_df.corr()
122/257: imdb_basics_movie_info_df.corr()
122/258: imdb_basics_movie_info_df.cov()
122/259: imdb_ratings_basics_df.cov()
   1: movie_info_df['box_office'].map(lambda x: int(x)).head()
   2:
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline


import seaborn as sns
   3:
imdb_name_df = pd.read_csv('zippedData/imdb.name.basics.csv.gz', compression='gzip')
imdb_name_df.head()
   4:
#Data Cleaning
#print(imdb_name_df.describe())
imdb_name_df.info() #Check for missing values
   5:
imdb_name_df = imdb_name_df.drop(columns=['birth_year', 'death_year']) #Both of these columns are missing ~85%+ values 
imdb_name_df.head()
   6:
for column in imdb_name_df.columns: #replace missing values in remaining columns with their modes
    imdb_name_df[column].fillna(imdb_name_df[column].mode()[0], inplace=True)
imdb_name_df.head()
   7: imdb_name_df.info() #Last check for null values
   8:
duplicates = imdb_name_df[imdb_name_df.duplicated()] #Check for duplicate rows
print(len(duplicates))
duplicates.head()
   9:
for col in imdb_name_df.columns: #check for extraneous values
    print(col, '\n', imdb_name_df[col].value_counts().head(), '\n\n')
  10:
#imdb_name_df['primary_name'].value_counts()
duplicates = imdb_name_df[imdb_name_df.duplicated(subset='primary_name')]
print(len(duplicates))
duplicates.head(10)
  11:
Bom_gross_df = pd.read_csv('zippedData/bom.movie_gross.csv.gz', compression='gzip')
Bom_gross_df.head()
  12: Bom_gross_df.info() #check for missing values
  13: Bom_gross_df['domestic_gross'] = Bom_gross_df['domestic_gross'].fillna(Bom_gross_df['domestic_gross'].median()) #replace NaNs with median values
  14:
for column in Bom_gross_df.columns: #replace missing values in remaining columns with their modes
    Bom_gross_df[column].fillna(Bom_gross_df[column].mode()[0], inplace=True)
Bom_gross_df.head()
  15: Bom_gross_df.info() #Last NaN check
  16:
duplicates = Bom_gross_df[Bom_gross_df.duplicated()] #Check for duplicate rows
print(len(duplicates))
duplicates.head()
  17:
duplicates = Bom_gross_df[Bom_gross_df.duplicated(subset='title')] #Check for duplicate rows
print(len(duplicates)) #print count of duplicate titles
duplicates.head()
  18: duplicates.drop_duplicates(keep='last') #drop all duplicates except the last duplicate row
  19:
#Bom_gross_df['studio'].unique()
for col in Bom_gross_df.columns: #check for extraneous values
    print(col, '\n', Bom_gross_df[col].value_counts().head(), '\n\n')
  20:
imdb_titlea_df = pd.read_csv('zippedData/imdb.title.akas.csv.gz', compression='gzip')
imdb_titlea_df.head()
  21: imdb_titlea_df.info()
  22:
imdb_titlea_df = imdb_titlea_df.drop(columns=['language', 'attributes']) #Both of these columns are missing ~85%+ values 
imdb_titlea_df.head()
  23: imdb_titlea_df['is_original_title'] = imdb_titlea_df['is_original_title'].fillna(imdb_titlea_df['is_original_title'].median())
  24:
for column in imdb_titlea_df.columns: #replace missing values in remaining columns with their modes
    imdb_titlea_df[column].fillna(imdb_titlea_df[column].mode()[0], inplace=True)
imdb_titlea_df.head()
  25: imdb_titlea_df.info() #Final NaN check
  26:
duplicates = imdb_titlea_df[imdb_titlea_df.duplicated()]
print(len(duplicates))
duplicates.head()
  27:
movie_info_df = pd.read_csv('zippedData/rt.movie_info.tsv.gz', delimiter='\t', compression= 'gzip')
movie_info_df.head()
  28: movie_info_df.info()
  29:
duplicates = movie_info_df[movie_info_df.duplicated(subset='synopsis')]
print(len(duplicates)) #Check for duplicates before cleaning
duplicates.drop_duplicates()
  30:
for col in movie_info_df.columns: #check for extraneous values
    print(col, '\n', movie_info_df[col].value_counts().head(), '\n\n')
  31:
movie_info_df = movie_info_df.drop(columns=['currency', 'studio']) #The 'currency' column has null, NaN, and a placeholder value of $340, the studio column does not add predictive value, Microsoft can Bing "Top Studios" 
movie_info_df.head()
  32:
for column in movie_info_df.columns: #replace missing values in remaining columns with their modes
    movie_info_df[column].fillna(movie_info_df[column].mode()[0], inplace=True) # I kept box office becuase it gives insight to return on investment and is compatible with ML algorithms
movie_info_df.tail()
  33: movie_info_df.info() #final check for NaN's
  34:
duplicates = movie_info_df[movie_info_df.duplicated()]
print(len(duplicates))
duplicates.head()
  35:
duplicates = movie_info_df[movie_info_df.duplicated(subset='synopsis')]
print(len(duplicates)) #check for duplicates after initial cleaning
duplicates.drop_duplicates(inplace=True) #should drop duplicates, looks like its not removing them from the overall df
  36: movie_info_df.info() #final
  37:
title_prinicipals_df = pd.read_csv('zippedData/imdb.title.principals.csv.gz', compression='gzip')
title_prinicipals_df.head()
  38: title_prinicipals_df.info()
  39:
for col in title_prinicipals_df.columns: #check for extraneous values
    print(col, '\n', title_prinicipals_df[col].value_counts().head(), '\n\n')
  40:
title_prinicipals_df = title_prinicipals_df.drop(columns=['job', 'characters']) #job and character coulmns are neglible
title_prinicipals_df.head()
  41:
duplicates = title_prinicipals_df[title_prinicipals_df.duplicated()]
print(len(duplicates))
duplicates.head()
  42: title_prinicipals_df.info() #Final NaN/Null check
  43:
movie_info_df = movie_info_df.rename(columns = {'runtime':'runtime_minutes'}) #change column name to runtime_minutes to match runtime column from imdb_basics table
#movie_info_df['runtime_minutes'] = movie_info_df['runtime_minutes'].map(lambda x: x.str.replace(' minutes', '.0', regex=True)
movie_info_df['runtime_minutes'] = movie_info_df['runtime_minutes'].map(lambda x: x.rstrip(' minutes')) #remove the string 'minutes'
movie_info_df.head(2)
  44:
movie_info_df['runtime_minutes'] = movie_info_df['runtime_minutes'].astype(float) #convert from string to type float
movie_info_df.head(2)
  45: movie_info_df['box_office'].map(lambda x: int(x)).head()
  46:
def comma_strto_int(string):
    string.replace(',', '')
    string = int(string)
    return string
  47: number = comma_strto_int(movie_info_df['box_office'][0])
  48:
def comma_strto_int(string):
    string.replace(',', '')
    string = string.apply(int(string))z
    return string
  49:
def comma_strto_int(string):
    string.replace(',', '')
    string = string.apply(int(string))
    return string
  50: number = comma_strto_int(movie_info_df['box_office'][0])
  51:
def comma_strto_int(string):
    string.replace(',', '')
    string = string.apply(lambda x: int(x))
    return string
  52: number = comma_strto_int(movie_info_df['box_office'][0])
  53:
def comma_strto_int(string):
    string.replace(',', '')
    string = string.map(lambda x: int(x))
    return string
  54: number = comma_strto_int(movie_info_df['box_office'][0])
  55: movie_info_df['box_office'][0]
  56: movie_info_df['box_office'].replace(',','')
  57: movie_info_df['box_office'][0].replace(',','')
  58: movie_info_df['box_office'][0:3].replace(',','')
  59:
movie_info_df['box_office'][0:3]
x = [i.replace(',','') for i in movie_info_df['box_office']]
  60: x
  61: movie_info_df['box_office'] = [i.replace(',','') for i in movie_info_df['box_office']]
  62: movie_info_df.head()
  63:
movie_info_df['box_office'] = [i.replace(',','') for i in movie_info_df['box_office']]
movie_info_df.head()
  64:
#Reg Plot of Runtime vs Average Rating

sns.regplot(x= 'runtime_minutes', y= 'averagerating', data= imdb_ratings_basics_df)
  65:
movie_info_df['runtime_minutes'] = sorted(movie_info_df['runtime_minutes']) #recheck this
movie_info_df.head()
  66:
movie_info_df.groupby(['runtime_minutes'])
movie_info_df.head()
  67:
imdb_basics_df = pd.read_csv('zippedData/imdb.title.basics.csv.gz')
#Clean IMDB basics runtime_minutes
imdb_basics_df['runtime_minutes'].fillna(imdb_basics_df['runtime_minutes'].median(),inplace=True)
#Clean IMDB basics genres
imdb_basics_df['genres'].fillna('Genre Data Missing',inplace = True)
#Clean IMDB basics original_title
imdb_basics_df['original_title'].fillna(imdb_basics_df['primary_title'],inplace = True)
imdb_basics_df.head()
  68:
imdb_ratings_df = pd.read_csv('zippedData/imdb.title.ratings.csv.gz')
imdb_ratings_df.head()
  69:
imdb_ratings_df.groupby(['averagerating'])
imdb_ratings_df.head()
  70:
imdb_basics_df.groupby(['runtime_minutes'])
imdb_basics_df.head()
  71:
imdb_basics_movie_info_df = imdb_basics_df.merge(movie_info_df, how= 'inner') #join imbd basics & movie_info

imdb_basics_movie_info_df.groupby(['box_office', 'runtime_minutes'])
imdb_basics_movie_info_df.head()
  72: imdb_basics_movie_info_df.cov() #covariance between runtime and start year
  73: imdb_basics_movie_info_df.corr() #correlation coefficient between runtime and start year
  74:
imdb_ratings_basics_df = imdb_basics_df.merge(imdb_ratings_df, how= 'inner') #join imdb_basics & imdb_ratings 
imdb_ratings_basics_df.groupby(['runtime_minutes', 'averagerating'])
imdb_ratings_basics_df.head()
#groupby runtime and average rating
  75: imdb_ratings_basics_df.cov() #Calculate covariance between runtime and average rating
  76: imdb_ratings_basics_df.corr() #Calculate correlation between runtime and average rating
  77:
#Reg Plot of Runtime vs Average Rating

sns.regplot(x= 'runtime_minutes', y= 'averagerating', data= imdb_ratings_basics_df)
  78:
#Reg Plot of Runtime vs Average Rating
sns.regplot(x= 'runtime_minutes', y= 'averagerating', data= imdb_ratings_basics_df)
plt.xlabel('Movie Runtimes (in minutes)')
plt.ylabel('Average Rating')
plt.title('Movie Runtimes vs. Average Viewer Ratings')
  79:
tn_budgets_df = pd.read_csv('zippedData/tn.movie_budgets.csv.gz')
money_list = ['production_budget','domestic_gross','worldwide_gross']
for ser in money_list:
    tn_budgets_df[ser] = tn_budgets_df[ser].apply(lambda x:x.replace(',',''))
    tn_budgets_df[ser] = tn_budgets_df[ser].apply(lambda x:x.replace('$',''))
    tn_budgets_df[ser] = pd.to_numeric(tn_budgets_df[ser])

print ('TN Movie Budgets')
print(tn_budgets_df.head())
print(tn_budgets_df.columns)
  80: tn_budgets_df.describe
  81: tn_budgets_df.describe()
  82: tn_budgets_df.groupby('release_date').plt(x= 'production_budget', y= domestic_gross)
  83: tn_budgets_df.plt(x= 'production_budget', y= domestic_gross)
  84: tn_budgets_df.plt(x= 'production_budget', y= 'domestic_gross')
  85:
budget_gross = pltfigure(figsize=(10,6))
ax = budget_gross.add_subplot(121)
ax2 = budget_gross.add_subplot(122)
ax.scatter(x='production_budget', y= 'domestic_gross', color= 'green', marker= 'o')
ax2.scatter(x='production_budget', y= 'worldwide_gross', color= 'purple', marker= 'o')
plt.show()
  86:
budget_gross = plt.figure(figsize=(10,6))
ax = budget_gross.add_subplot(121)
ax2 = budget_gross.add_subplot(122)
ax.scatter(x='production_budget', y= 'domestic_gross', color= 'green', marker= 'o')
ax2.scatter(x='production_budget', y= 'worldwide_gross', color= 'purple', marker= 'o')
plt.show()
  87:
budget_gross = plt.figure(figsize=(10,6))
ax = budget_gross.add_subplot(121)
ax2 = budget_gross.add_subplot(122)
ax.plot(x='production_budget', y= 'domestic_gross', color= 'green', marker= 'o')
ax2.scatter(x='production_budget', y= 'worldwide_gross', color= 'purple', marker= 'o')
plt.show()
  88:
budget_gross = plt.figure(figsize=(10,6))
ax = budget_gross.add_subplot(121)
ax2 = budget_gross.add_subplot(122)
ax.plot(x='production_budget', y= 'domestic_gross', color= 'green')
ax2.scatter(x='production_budget', y= 'worldwide_gross', color= 'purple', marker= 'o')
plt.show()
  89:
budget_gross = plt.figure(figsize=(10,6))
ax = budget_gross.add_subplot(121)
ax2 = budget_gross.add_subplot(122)
ax.scatter(x='production_budget', y= 'domestic_gross', color= 'green', marker= 'o')
ax2.scatter(x='production_budget', y= 'worldwide_gross', color= 'purple', marker= 'o')
plt.show()
  90:
budget_gross = plt.figure(figsize=(10,8))
ax = budget_gross.add_subplot(121)
ax2 = budget_gross.add_subplot(122)
ax.scatter(x='production_budget', y= 'domestic_gross', color= 'green', marker= 'o')
ax2.scatter(x='production_budget', y= 'worldwide_gross', color= 'purple', marker= 'o')
plt.show()
  91:
budget_gross = plt.figure(figsize=(12,8))
ax = budget_gross.add_subplot(121)
ax2 = budget_gross.add_subplot(122)
ax.scatter(x='production_budget', y= 'domestic_gross', color= 'green', marker= 'o')
ax2.scatter(x='production_budget', y= 'worldwide_gross', color= 'purple', marker= 'o')
plt.show()
  92:
budget_gross = plt.figure(figsize=(12,8))
tn_budgets_df.plot.scatter(x='production_budget', y= 'domestic_gross', color= 'green', marker= 'o')
tn_budgets_df.plot.scatter(x='production_budget', y= 'worldwide_gross', color= 'purple', marker= 'o')
plt.show()
  93: tn_budgets_df.cov()
  94: tn_budgets_df.corr()
  95:
budget_gross = plt.figure(figsize=(12,8))
ax = tn_budgets_df.plot.scatter(x='production_budget', y= 'domestic_gross', color= 'green', marker= 'o')
ax1 = tn_budgets_df.plot.scatter(x='production_budget', y= 'worldwide_gross', color= 'purple', marker= 'o')

ax.plt.xlabel('Film Production Budget')
ax.plt.ylabel('Domestic Gross')
ax.title('Production Budget vs. Domestic Gross')

ax1.plt.xlabel('Film Production Budget')
ax1.plt.ylabel('Worldwide Gross')
ax1.title('Production Budget vs. Worldwide Gross')

plt.show()
  96:
budget_gross = plt.figure(figsize=(12,8))
ax = tn_budgets_df.plot.scatter(x='production_budget', y= 'domestic_gross', color= 'green', marker= 'o')
ax1 = tn_budgets_df.plot.scatter(x='production_budget', y= 'worldwide_gross', color= 'purple', marker= 'o')

ax.plot.xlabel('Film Production Budget')
ax.plot.ylabel('Domestic Gross')
ax.title('Production Budget vs. Domestic Gross')

ax1.plot.xlabel('Film Production Budget')
ax1.plot.ylabel('Worldwide Gross')
ax1.title('Production Budget vs. Worldwide Gross')

plt.show()
  97:
#Product Budget vs. Domestic Gross vs. Worldwide Gross Plots
budget_gross = plt.figure(figsize=(12,8))
domestic = tn_budgets_df.plot.scatter(x='production_budget', y= 'domestic_gross', color= 'green', marker= 'o')
worldwide = tn_budgets_df.plot.scatter(x='production_budget', y= 'worldwide_gross', color= 'purple', marker= 'o')

domestic.plot.xlabel('Film Production Budget')
domestic.plot.ylabel('Domestic Gross')
domestic.title('Production Budget vs. Domestic Gross')

worldwide.plot.xlabel('Film Production Budget')
worldwide.plot.ylabel('Worldwide Gross')
worldwide.title('Production Budget vs. Worldwide Gross')

plt.show()
  98:
#Product Budget vs. Domestic Gross vs. Worldwide Gross Plots
budget_gross = plt.figure(figsize=(12,8))
domestic = tn_budgets_df.plot.scatter(x='production_budget', y= 'domestic_gross', color= 'green', marker= 'o')
worldwide = tn_budgets_df.plot.scatter(x='production_budget', y= 'worldwide_gross', color= 'purple', marker= 'o')

domestic.plt.xlabel('Film Production Budget')
domestic.plt.ylabel('Domestic Gross')
domestic.title('Production Budget vs. Domestic Gross')

worldwide.plt.xlabel('Film Production Budget')
worldwide.plt.ylabel('Worldwide Gross')
worldwide.title('Production Budget vs. Worldwide Gross')

plt.show()
  99:
#Product Budget vs. Domestic Gross vs. Worldwide Gross Plots
budget_gross = plt.figure(figsize=(12,8))
ax = tn_budgets_df.plot.scatter(x='production_budget', y= 'domestic_gross', color= 'green', marker= 'o')
ax1 = tn_budgets_df.plot.scatter(x='production_budget', y= 'worldwide_gross', color= 'purple', marker= 'o')

ax.set_xlabel('Film Production Budget')
ax.set_ylabel('Domestic Gross')
ax.title('Production Budget vs. Domestic Gross')

ax1.set_xlabel('Film Production Budget')
ax1.set_ylabel('Worldwide Gross')
ax1.title('Production Budget vs. Worldwide Gross')

plt.show()
 100:
#Product Budget vs. Domestic Gross vs. Worldwide Gross Plots
budget_gross = plt.figure(figsize=(12,8))
ax = tn_budgets_df.plot.scatter(x='production_budget', y= 'domestic_gross', color= 'green', marker= 'o')
ax1 = tn_budgets_df.plot.scatter(x='production_budget', y= 'worldwide_gross', color= 'purple', marker= 'o')

ax.set_xlabel('Film Production Budget')
ax.set_ylabel('Domestic Gross')
ax.set_title('Production Budget vs. Domestic Gross')

ax1.set_xlabel('Film Production Budget')
ax1.set_ylabel('Worldwide Gross')
ax1.set_title('Production Budget vs. Worldwide Gross')

plt.show()
 101: tn_budgets_df.merge(imdb_ratings_df, how= 'inner')
 102:
imdb_ratings_df.groupby(['tconst'])
imdb_ratings_df.head()
 103: tn_budgets_df.head()
 104:
#Import TMDB Movies Data to grab movie titles
tmdb_df.drop('Unnamed: 0',axis=1,inplace = True)
print ('TMDB')
print(tmdb_df.head())
print(tmdb_df.columns)
print('\nNumber of entries:',len(tmdb_df),'\n')
print(tmdb_df.isna().sum())
 105:
#Import TMDB Movies Data to grab movie titles
tmdb_df = pd.read_csv('zippedData/tmdb.movies.csv.gz')
tmdb_df.drop('Unnamed: 0',axis=1,inplace = True)
print ('TMDB')
print(tmdb_df.head())
print(tmdb_df.columns)
print('\nNumber of entries:',len(tmdb_df),'\n')
print(tmdb_df.isna().sum())
 106: tmdb_df.head()
 107: tmdb_df.sort('original_title')
 108: tmdb_df.sort_values('original_title')
 109: tn_budgets_df.sort_values('movies')
 110: tn_budgets_df.sort_values('movie')
 111: tmdb_df.sort_values('title')
 112: tmdb_df.sort_values('title').tail()
 113: Bom_gross_df.head()
 114: #tmdb_df.sort_values('title').tail()
 115: #tn_budgets_df.sort_values('movie')
 116: tn_budgets_df.head()
 117: Bom_gross_df.sort_values('title').head()
 118: tn_budgets_df.sort_values('title').head()
 119: tn_budgets_df.sort_values('titles').head()
 120: tn_budgets_df.head()
 121: tn_budgets_df.sort_values('movie').head()
 122: imdb_titlea_df.head()
 123: imdb_titlea_df.sort_values('title').head()
 124: imdb_ratings_basics_df.sort_values('primary_title').head()
 125:
imdb_ratings_basics_df = imdb_ratings_basics_df.rename(columns = {'primary_title' : 'title'})
imdb_ratings_basics_df.head()
 126:
imdb_ratings_basics_df = imdb_ratings_basics_df.rename(columns = {'primary_title' : 'title'}) #Rename 'primary_title' to 'title' inorder to merge imdb_ratings_basics_df and imdb_titlea_df 
titleakas_ratings_df = imdb_titlea_df.merge(imdb_ratings_basics_df)
titleakas_ratings_df.head()
 127:
imdb_ratings_basics_df = imdb_ratings_basics_df.rename(columns = {'primary_title' : 'title'}) #Rename 'primary_title' to 'title' inorder to merge imdb_ratings_basics_df and imdb_titlea_df 
titleakas_ratings_df = imdb_titlea_df.merge(imdb_ratings_basics_df)
titleakas_ratings_df.groupby('region').head()
 128:
imdb_ratings_basics_df = imdb_ratings_basics_df.rename(columns = {'primary_title' : 'title'}) #Rename 'primary_title' to 'title' inorder to merge imdb_ratings_basics_df and imdb_titlea_df 
titleakas_ratings_df = imdb_titlea_df.merge(imdb_ratings_basics_df, how='inner')
titleakas_ratings_df.groupby('region').head()
 129:
imdb_ratings_basics_df = imdb_ratings_basics_df.rename(columns = {'primary_title' : 'title'}) #Rename 'primary_title' to 'title' inorder to merge imdb_ratings_basics_df and imdb_titlea_df 
titleakas_ratings_df = imdb_titlea_df.merge(imdb_ratings_basics_df)
titleakas_ratings_df.groupby('region').head()
 130:
imdb_ratings_basics_df = imdb_ratings_basics_df.rename(columns = {'primary_title' : 'title'}) #Rename 'primary_title' to 'title' inorder to merge imdb_ratings_basics_df and imdb_titlea_df 
titleakas_ratings_df = imdb_titlea_df.merge(imdb_ratings_basics_df)
titleakas_ratings_df = titleakas_ratings_df.groupby('region')
titleakas_ratings_df = titleakas_ratings_df.drop_duplicates(subset ="title", keep = False, inplace = True)
 131:
imdb_ratings_basics_df = imdb_ratings_basics_df.rename(columns = {'primary_title' : 'title'}) #Rename 'primary_title' to 'title' inorder to merge imdb_ratings_basics_df and imdb_titlea_df 
titleakas_ratings_df = imdb_titlea_df.merge(imdb_ratings_basics_df)
titleakas_ratings_df = titleakas_ratings_df.drop_duplicates(subset ="title", keep = False, inplace = True)
 132:
imdb_ratings_basics_df = imdb_ratings_basics_df.rename(columns = {'primary_title' : 'title'}) #Rename 'primary_title' to 'title' inorder to merge imdb_ratings_basics_df and imdb_titlea_df 
titleakas_ratings_df = imdb_titlea_df.merge(imdb_ratings_basics_df)
titleakas_ratings_df = titleakas_ratings_df.drop_duplicates(subset ="title", keep = False, inplace = True)
titleakas_ratings_df.head()
 133:
imdb_ratings_basics_df = imdb_ratings_basics_df.rename(columns = {'primary_title' : 'title'}) #Rename 'primary_title' to 'title' inorder to merge imdb_ratings_basics_df and imdb_titlea_df 
titleakas_ratings_df = imdb_titlea_df.merge(imdb_ratings_basics_df)
titleakas_ratings_df = titleakas_ratings_df.drop_duplicates(subset ="title", keep = False, inplace = True)
titleakas_ratings_df
 134:
imdb_ratings_basics_df = imdb_ratings_basics_df.rename(columns = {'primary_title' : 'title'}) #Rename 'primary_title' to 'title' inorder to merge imdb_ratings_basics_df and imdb_titlea_df 
titleakas_ratings_df = imdb_titlea_df.merge(imdb_ratings_basics_df)
titleakas_ratings_df
 135: imdb_titlea_df.sort_values('title') #sort to see title similarities
 136: imdb_titlea_df.sort_values('title').head(2) #sort to see title similarities
 137: imdb_ratings_basics_df.sort_values('primary_title').head(2) #sort to see title similarities
 138:
imdb_ratings_basics_df = imdb_ratings_basics_df.rename(columns = {'primary_title' : 'title'}) #Rename 'primary_title' to 'title' inorder to merge imdb_ratings_basics_df and imdb_titlea_df 
titleakas_ratings_df = imdb_titlea_df.merge(imdb_ratings_basics_df)
titleakas_ratings_df
 139: imdb_ratings_basics_df.sort_values('primary_title').head(2) #sort to see title similarities
 140:
imdb_ratings_basics_df = imdb_ratings_basics_df.rename(columns = {'primary_title' : 'title'}) #Rename 'primary_title' to 'title' inorder to merge imdb_ratings_basics_df and imdb_titlea_df 
titleakas_ratings_df = imdb_titlea_df.merge(imdb_ratings_basics_df)
titleakas_ratings_df.head(2)
 141: region_vs_ratings = sns.barplot(x='region', y='averagerating', data=titleakas_ratings_df)
 142:

region_vs_ratings = sns.barplot(x='region', y='averagerating', data=titleakas_ratings_df)
plt.xlabel('Movie Showing by Region')
plt.ylabel('Average Rating')
plt.title('Movie Showings vs. Average Viewer Ratings')
 143:
sns.set(rc={'figure.figsize':(15,10)})
region_vs_ratings = sns.barplot(x='region', y='averagerating', data=titleakas_ratings_df)
plt.xlabel('Movie Showing by Region')
plt.ylabel('Average Rating')
plt.title('Movie Showings vs. Average Viewer Ratings')
 144:
imdb_ratings_basics_df = imdb_ratings_basics_df.rename(columns = {'primary_title' : 'title'}) #Rename 'primary_title' to 'title' inorder to merge imdb_ratings_basics_df and imdb_titlea_df 
titleakas_ratings_df = imdb_titlea_df.merge(imdb_ratings_basics_df)
titleakas_ratings_df.groupby(['region','averageratings']).mean().head()
 145:
imdb_ratings_basics_df = imdb_ratings_basics_df.rename(columns = {'primary_title' : 'title'}) #Rename 'primary_title' to 'title' inorder to merge imdb_ratings_basics_df and imdb_titlea_df 
titleakas_ratings_df = imdb_titlea_df.merge(imdb_ratings_basics_df)
titleakas_ratings_df.groupby(['region','averagerating']).mean().head()
 146:
imdb_ratings_basics_df = imdb_ratings_basics_df.rename(columns = {'primary_title' : 'title'}) #Rename 'primary_title' to 'title' inorder to merge imdb_ratings_basics_df and imdb_titlea_df 
titleakas_ratings_df = imdb_titlea_df.merge(imdb_ratings_basics_df)
titleakas_ratings_df = titleakas_ratings_df.groupby(['region','averagerating']).mean().head()
 147:
sns.set(rc={'figure.figsize':(15,10)})
region_vs_ratings = sns.barplot(x='region', y='averagerating', data=titleakas_ratings_df)
plt.xlabel('Movie Showing by Region')
plt.ylabel('Average Rating')
plt.title('Movie Showings vs. Average Viewer Ratings')
 148:
imdb_ratings_basics_df = imdb_ratings_basics_df.rename(columns = {'primary_title' : 'title'}) #Rename 'primary_title' to 'title' inorder to merge imdb_ratings_basics_df and imdb_titlea_df 
titleakas_ratings_df = imdb_titlea_df.merge(imdb_ratings_basics_df)
titleakas_ratings_df = titleakas_ratings_df.groupby(['region','averagerating']).mean().head()
 149:
imdb_ratings_basics_df = imdb_ratings_basics_df.rename(columns = {'primary_title' : 'title'}) #Rename 'primary_title' to 'title' inorder to merge imdb_ratings_basics_df and imdb_titlea_df 
titleakas_ratings_df = imdb_titlea_df.merge(imdb_ratings_basics_df)
titleakas_ratings_df = titleakas_ratings_df.groupby(['region','averagerating']).mean()
titleakas_ratings_df.head()
 150:
sns.set(rc={'figure.figsize':(15,10)})
region_vs_ratings = sns.barplot(x='region', y='averagerating', data=titleakas_ratings_df)
plt.xlabel('Movie Showing by Region')
plt.ylabel('Average Rating')
plt.title('Movie Showings vs. Average Viewer Ratings')
 151:
imdb_ratings_basics_df = imdb_ratings_basics_df.rename(columns = {'primary_title' : 'title'}) #Rename 'primary_title' to 'title' inorder to merge imdb_ratings_basics_df and imdb_titlea_df 
titleakas_ratings_df = imdb_titlea_df.merge(imdb_ratings_basics_df)
region_rate_df = titleakas_ratings_df.groupby(['region','averagerating']).mean() #group dataframe by region and average rating
region_rate_df.head()
 152:
sns.set(rc={'figure.figsize':(15,10)})
region_vs_ratings = sns.barplot(x='region', y='averagerating', data=region_rate_df)
plt.xlabel('Movie Showing by Region')
plt.ylabel('Average Rating')
plt.title('Movie Showings vs. Average Viewer Ratings')
 153:
sns.set(rc={'figure.figsize':(15,10)})
region_vs_ratings = sns.barplot(x='region', y='averagerating', data=titleakas_ratings_df)
plt.xlabel('Movie Showing by Region')
plt.ylabel('Average Rating')
plt.title('Movie Showings vs. Average Viewer Ratings')
 154:
imdb_ratings_basics_df = imdb_ratings_basics_df.rename(columns = {'primary_title' : 'title'}) #Rename 'primary_title' to 'title' inorder to merge imdb_ratings_basics_df and imdb_titlea_df 
titleakas_ratings_df = imdb_titlea_df.merge(imdb_ratings_basics_df)
region_rate_df = titleakas_ratings_df.groupby(['region','averagerating']).mean() #group dataframe by region and average rating
region_rate_df.head(10)
 155:
sns.set(rc={'figure.figsize':(15,10)})
region_vs_ratings = sns.barplot(x='averagerating', y='region', data=titleakas_ratings_df)
plt.xlabel('Movie Showing by Region')
plt.ylabel('Average Rating')
plt.title('Movie Showings vs. Average Viewer Ratings')
 156:
sns.set(rc={'figure.figsize':(12,15)})
region_vs_ratings = sns.barplot(x='averagerating', y='region', data=titleakas_ratings_df)
plt.xlabel('Movie Showing by Region')
plt.ylabel('Average Rating')
plt.title('Movie Showings vs. Average Viewer Ratings')
 157:
sns.set(rc={'figure.figsize':(12,15)})
region_vs_ratings = sns.barplot(x='averagerating', y='region', data=titleakas_ratings_df)
plt.xlabel('Average Rating')
plt.ylabel('Movie Showing by Region')
plt.title('Movie Showings vs. Average Viewer Ratings')
 158:
sns.set(rc={'figure.figsize':(12,15)})
region_vs_ratings = sns.barplot(x='averagerating', y='region', estimator = sum, data=titleakas_ratings_df)
plt.xlabel('Average Rating')
plt.ylabel('Movie Showing by Region')
plt.title('Movie Showings vs. Average Viewer Ratings')
 159: Bom_gross_df.sort_values('title')
 160: Bom_gross_df.sort_values('title').head(2)
 161: tn_budgets_df.sort_values('movie').head(2)
 162:
imdb_ratings_basics_df = imdb_ratings_basics_df.rename(columns = {'primary_title' : 'title'}) #Rename 'primary_title' to 'title' inorder to merge imdb_ratings_basics_df and imdb_titlea_df 
titleakas_ratings_df = imdb_titlea_df.merge(imdb_ratings_basics_df)
region_rate_df = titleakas_ratings_df.groupby(['region','averagerating']).mean() #group dataframe by region and average rating
region_rate_df.head(5)
 163:
sns.set(rc={'figure.figsize':(12,15)})
region_vs_ratings = sns.barplot(x='averagerating', y='region', data=titleakas_ratings_df)
plt.xlabel('Average Rating')
plt.ylabel('Movie Showing by Region')
plt.title('Movie Showings vs. Average Viewer Ratings')
 164: titleakas_ratings_df.drop_duplicates(subset='region', keep='first', inplace=True)
 165:
sns.set(rc={'figure.figsize':(12,15)})
region_vs_ratings = sns.barplot(x='averagerating', y='region', data=titleakas_ratings_df)
plt.xlabel('Average Rating')
plt.ylabel('Movie Showing by Region')
plt.title('Movie Showings vs. Average Viewer Ratings')
 166: titleakas_ratings_df['region'].mode()
 167: titleakas_ratings_df.mode()
 168: titleakas_ratings_df['region'].mode()
 169: titleakas_ratings_df['region'].mode(dropna=False)
 170: titleakas_ratings_df.mode(dropna=False)
 171: titleakas_ratings_df['region'].mode()
 172: %history -g -f my_notebook_code.txt
